================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/tailwind.config.ts
================================================================================
import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: ["./client/index.html", "./client/src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
        card: {
          DEFAULT: "var(--card)",
          foreground: "var(--card-foreground)",
        },
        popover: {
          DEFAULT: "var(--popover)",
          foreground: "var(--popover-foreground)",
        },
        primary: {
          DEFAULT: "var(--primary)",
          foreground: "var(--primary-foreground)",
        },
        secondary: {
          DEFAULT: "var(--secondary)",
          foreground: "var(--secondary-foreground)",
        },
        muted: {
          DEFAULT: "var(--muted)",
          foreground: "var(--muted-foreground)",
        },
        accent: {
          DEFAULT: "var(--accent)",
          foreground: "var(--accent-foreground)",
        },
        destructive: {
          DEFAULT: "var(--destructive)",
          foreground: "var(--destructive-foreground)",
        },
        border: "var(--border)",
        input: "var(--input)",
        ring: "var(--ring)",
        chart: {
          "1": "var(--chart-1)",
          "2": "var(--chart-2)",
          "3": "var(--chart-3)",
          "4": "var(--chart-4)",
          "5": "var(--chart-5)",
        },
        sidebar: {
          DEFAULT: "var(--sidebar)",
          foreground: "var(--sidebar-foreground)",
          primary: "var(--sidebar-primary)",
          "primary-foreground": "var(--sidebar-primary-foreground)",
          accent: "var(--sidebar-accent)",
          "accent-foreground": "var(--sidebar-accent-foreground)",
          border: "var(--sidebar-border)",
          ring: "var(--sidebar-ring)",
        },
      },
      fontFamily: {
        sans: ["var(--font-sans)", "Inter", "sans-serif"],
        serif: ["var(--font-serif)", "Georgia", "serif"],
        mono: ["var(--font-mono)", "Menlo", "monospace"],
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "float": "float 6s ease-in-out infinite",
        "glow": "glow 2s ease-in-out infinite alternate",
        "orbit": "orbit 20s linear infinite",
        "twinkle": "twinkle 3s ease-in-out infinite",
        "pulse-neon": "pulse-neon 2s ease-in-out infinite",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
        float: {
          "0%, 100%": { transform: "translateY(0px)" },
          "50%": { transform: "translateY(-20px)" },
        },
        glow: {
          from: { opacity: "0.5" },
          to: { opacity: "1" },
        },
        orbit: {
          from: { transform: "rotate(0deg)" },
          to: { transform: "rotate(360deg)" },
        },
        twinkle: {
          "0%, 100%": { opacity: "0.3" },
          "50%": { opacity: "1" },
        },
        "pulse-neon": {
          "0%, 100%": { 
            boxShadow: "0 0 20px hsl(280, 100%, 70%)"
          },
          "50%": { 
            boxShadow: "0 0 30px hsl(280, 100%, 70%), 0 0 40px hsl(195, 100%, 50%)"
          },
        },
      },
    },
  },
  plugins: [require("tailwindcss-animate"), require("@tailwindcss/typography")],
} satisfies Config;



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/postcss.config.js
================================================================================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/index.html
================================================================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Architects+Daughter&family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&family=Fira+Code:wght@300..700&family=Geist+Mono:wght@100..900&family=Geist:wght@100..900&family=IBM+Plex+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&family=IBM+Plex+Sans:ital,wght@0,100..700;1,100..700&family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&family=Libre+Baskerville:ital,wght@0,400;0,700;1,400&family=Lora:ital,wght@0,400..700;1,400..700&family=Merriweather:ital,opsz,wght@0,18..144,300..900;1,18..144,300..900&family=Montserrat:ital,wght@0,100..900;1,100..900&family=Open+Sans:ital,wght@0,300..800;1,300..800&family=Outfit:wght@100..900&family=Oxanium:wght@200..800&family=Playfair+Display:ital,wght@0,400..900;1,400..900&family=Plus+Jakarta+Sans:ital,wght@0,200..800;1,200..800&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&family=Roboto+Mono:ital,wght@0,100..700;1,100..700&family=Roboto:ital,wght@0,100..900;1,100..900&family=Source+Code+Pro:ital,wght@0,200..900;1,200..900&family=Source+Serif+4:ital,opsz,wght@0,8..60,200..900;1,8..60,200..900&family=Space+Grotesk:wght@300..700&family=Space+Mono:ital,wght@0,400;0,700;1,400;1,700&display=swap" rel="stylesheet">
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx?v=20250915-v2"></script>
    <!-- This is a replit script which adds a banner on the top of the page when opened in development mode outside the replit environment -->
    <script type="text/javascript" src="https://replit.com/public/js/replit-dev-banner.js"></script>
  </body>
</html>


================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/index.css
================================================================================
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap');
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  /* Background colors */
  --background: rgba(8, 5, 13, 0.01);
  --foreground: hsl(300, 20%, 99%);
  --card: rgba(255, 255, 255, 0.02);
  --card-foreground: hsl(300, 20%, 99%);
  --popover: rgba(255, 255, 255, 0.02);
  --popover-foreground: hsl(300, 20%, 99%);
  
  /* Primary theme colors */
  --primary: hsl(42, 92%, 56%);
  --primary-foreground: hsl(240, 100%, 4%);
  --secondary: hsl(195, 100%, 50%);
  --secondary-foreground: hsl(240, 100%, 4%);
  --muted: rgba(255, 255, 255, 0.05);
  --muted-foreground: hsl(300, 10%, 70%);
  --accent: rgba(255, 193, 7, 0.08);
  --accent-foreground: hsl(240, 100%, 4%);
  
  /* Utility colors */
  --destructive: hsl(0, 62%, 30%);
  --destructive-foreground: hsl(300, 20%, 99%);
  --border: rgba(255, 193, 7, 0.1);
  --input: rgba(255, 255, 255, 0.05);
  --ring: hsl(42, 92%, 56%);
  
  /* Chart colors */
  --chart-1: hsl(42, 92%, 56%);
  --chart-2: hsl(195, 100%, 50%);
  --chart-3: hsl(280, 100%, 70%);
  --chart-4: hsl(147, 78%, 42%);
  --chart-5: hsl(341, 75%, 51%);
  
  /* Sidebar colors */
  --sidebar: rgba(255, 255, 255, 0.02);
  --sidebar-foreground: hsl(300, 20%, 99%);
  --sidebar-primary: hsl(42, 92%, 56%);
  --sidebar-primary-foreground: hsl(240, 100%, 4%);
  --sidebar-accent: hsl(42, 92%, 56%);
  --sidebar-accent-foreground: hsl(240, 100%, 4%);
  --sidebar-border: rgba(255, 193, 7, 0.08);
  --sidebar-ring: hsl(42, 92%, 56%);
  
  /* Font families */
  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
  --font-serif: Georgia, serif;
  --font-mono: Menlo, monospace;
  
  /* Border radius */
  --radius: 12px;
  
  /* Shadows */
  --shadow-2xs: 0px 2px 0px 0px hsl(42, 92%, 56%, 0.1);
  --shadow-xs: 0px 2px 0px 0px hsl(42, 92%, 56%, 0.1);
  --shadow-sm: 0px 2px 0px 0px hsl(42, 92%, 56%, 0.1), 0px 1px 2px -1px hsl(42, 92%, 56%, 0.1);
  --shadow: 0px 2px 0px 0px hsl(42, 92%, 56%, 0.1), 0px 1px 2px -1px hsl(42, 92%, 56%, 0.1);
  --shadow-md: 0px 2px 0px 0px hsl(42, 92%, 56%, 0.1), 0px 2px 4px -1px hsl(42, 92%, 56%, 0.1);
  --shadow-lg: 0px 2px 0px 0px hsl(42, 92%, 56%, 0.1), 0px 4px 6px -1px hsl(42, 92%, 56%, 0.1);
  --shadow-xl: 0px 2px 0px 0px hsl(42, 92%, 56%, 0.1), 0px 8px 10px -1px hsl(42, 92%, 56%, 0.1);
  --shadow-2xl: 0px 2px 0px 0px hsl(42, 92%, 56%, 0.1);
  
  /* Spacing and typography */
  --tracking-normal: 0em;
  --spacing: 0.25rem;
}

body {
  font-family: var(--font-sans);
  background: linear-gradient(135deg, #05050f 0%, #0c0618 20%, #14081f 40%, #1a0b2e 60%, #0f0820 80%, #08050d 100%);
  min-height: 100vh;
  overflow-x: hidden;
}

/* Glassmorphism styles */
.glass {
  background: rgba(255, 255, 255, 0.01);
  backdrop-filter: blur(30px) saturate(1.8);
  border: 1px solid rgba(255, 255, 255, 0.03);
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);
}

.glass-card {
  background: linear-gradient(135deg, 
    rgba(255, 193, 7, 0.04) 0%, 
    rgba(255, 255, 255, 0.01) 50%, 
    rgba(255, 193, 7, 0.02) 100%);
  backdrop-filter: blur(30px) saturate(2.0);
  border: 1px solid;
  border-image: linear-gradient(135deg, 
    rgba(255, 193, 7, 0.12) 0%, 
    rgba(255, 255, 255, 0.06) 50%, 
    rgba(255, 193, 7, 0.08) 100%) 1;
  box-shadow: 
    0 8px 32px rgba(255, 193, 7, 0.04),
    0 0 20px rgba(255, 193, 7, 0.02),
    inset 0 1px 0 rgba(255, 255, 255, 0.05);
}

/* Neon glow effects */
.neon-text {
  -webkit-text-stroke: 1.5px rgba(255, 193, 7, 0.4);
  text-shadow: 
    0 0 2px hsl(42, 100%, 85%),
    0 0 5px hsl(42, 100%, 70%),
    0 0 10px hsl(42, 92%, 56%),
    0 0 15px hsl(42, 92%, 56%),
    0 0 20px hsl(42, 100%, 60%),
    0 0 30px hsl(42, 95%, 55%),
    0 0 40px hsl(42, 90%, 50%),
    0 0 50px hsl(42, 85%, 45%),
    inset 0 0 3px rgba(255, 255, 255, 0.3);
  filter: brightness(1.4) saturate(1.3) contrast(1.2) drop-shadow(0 0 5px rgba(255, 193, 7, 1.0)) drop-shadow(0 0 15px rgba(255, 193, 7, 0.6));
  color: hsl(42, 100%, 75%) !important;
  font-weight: 700;
  letter-spacing: 0.02em;
}

.neon-border {
  box-shadow: 0 0 10px var(--primary), 0 0 20px var(--primary), 0 0 30px var(--primary);
}

.neon-button {
  background: linear-gradient(45deg, hsl(42, 92%, 56%), hsl(195, 100%, 50%));
  box-shadow: 0 0 20px hsl(42, 92%, 56%), 0 4px 15px rgba(0, 0, 0, 0.3);
  transition: all 0.3s ease;
}

.neon-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 0 30px hsl(42, 92%, 56%), 0 6px 20px rgba(0, 0, 0, 0.4);
}

/* Navigation styles */
.nav-glass {
  background: rgba(26, 11, 46, 0.2);
  backdrop-filter: blur(30px) saturate(1.8);
  border-bottom: 1px solid rgba(255, 193, 7, 0.06);
}

/* Form styling */
.form-input {
  background: rgba(255, 255, 255, 0.01);
  border: 1px solid rgba(255, 193, 7, 0.08);
  backdrop-filter: blur(20px) saturate(1.5);
  color: hsl(300, 20%, 99%);
}

/* Hide native date/time input icons to show our custom ones */
.form-input::-webkit-calendar-picker-indicator,
.form-input::-webkit-inner-spin-button,
.form-input::-webkit-datetime-edit-fields-wrapper {
  opacity: 0;
  cursor: pointer;
}

.form-input:focus {
  border-color: hsl(42, 92%, 56%);
  box-shadow: 0 0 0 2px rgba(255, 193, 7, 0.2);
  outline: none;
}

.form-input::placeholder {
  color: hsl(300, 10%, 70%);
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: rgba(255, 193, 7, 0.1);
}

::-webkit-scrollbar-thumb {
  background: linear-gradient(45deg, hsl(42, 92%, 56%), hsl(195, 100%, 50%));
  border-radius: 4px;
}

/* Animations */
@keyframes float {
  0%, 100% { transform: translateY(0px) translateX(0px); }
  25% { transform: translateY(-15px) translateX(5px); }
  50% { transform: translateY(-30px) translateX(0px); }
  75% { transform: translateY(-15px) translateX(-5px); }
}

@keyframes glow {
  0%, 100% { opacity: 0.8; filter: brightness(1); }
  50% { opacity: 1; filter: brightness(1.3); }
}

@keyframes orbit {
  0% { transform: rotate(0deg) translateX(150px) rotate(0deg); }
  100% { transform: rotate(360deg) translateX(150px) rotate(-360deg); }
}

@keyframes twinkle {
  0%, 100% { opacity: 0.4; transform: scale(1); }
  50% { opacity: 1; transform: scale(1.2); }
}

@keyframes comet {
  0% { 
    transform: translateX(-100vw) translateY(-100vh) rotate(-45deg);
    opacity: 0;
  }
  10% { opacity: 1; }
  90% { opacity: 1; }
  100% { 
    transform: translateX(100vw) translateY(100vh) rotate(-45deg);
    opacity: 0;
  }
}

@keyframes nebula-drift {
  0%, 100% { transform: translateX(0) translateY(0) scale(1); }
  25% { transform: translateX(20px) translateY(-10px) scale(1.1); }
  50% { transform: translateX(-10px) translateY(15px) scale(0.9); }
  75% { transform: translateX(15px) translateY(20px) scale(1.05); }
}

@keyframes pulse-neon {
  0%, 100% { 
    box-shadow: 0 0 20px hsl(42, 92%, 56%);
  }
  50% { 
    box-shadow: 0 0 30px hsl(42, 92%, 56%), 0 0 40px hsl(195, 100%, 50%);
  }
}

/* Utility classes */
.animate-float {
  animation: float 6s ease-in-out infinite;
}

.animate-glow {
  animation: glow 2s ease-in-out infinite alternate;
}

.animate-orbit {
  animation: orbit 20s linear infinite;
}

.animate-twinkle {
  animation: twinkle 3s ease-in-out infinite;
}

.animate-pulse-neon {
  animation: pulse-neon 2s ease-in-out infinite;
}

.animate-comet {
  animation: comet 8s linear infinite;
}

.animate-nebula-drift {
  animation: nebula-drift 15s ease-in-out infinite;
}

/* Mobile menu animation */
.mobile-menu {
  transform: translateX(-100%);
  transition: transform 0.3s ease-in-out;
}

.mobile-menu.open {
  transform: translateX(0);
}

/* Cosmic background elements */
.cosmic-bg {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
  overflow: hidden;
}

.star {
  position: absolute;
  width: 2px;
  height: 2px;
  background: white;
  border-radius: 50%;
  animation: twinkle 3s ease-in-out infinite;
}

.planet {
  position: absolute;
  border-radius: 50%;
  animation: orbit 20s linear infinite;
}

.comet {
  position: absolute;
  width: 3px;
  height: 3px;
  background: linear-gradient(45deg, #00f5ff, #ffffff);
  border-radius: 50%;
  box-shadow: 0 0 10px #00f5ff;
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply font-sans antialiased bg-background text-foreground;
  }
  
  h1, h2, h3, h4, h5, h6 {
    @apply font-semibold;
  }
  
  button {
    @apply transition-all duration-200;
  }
  
  input, textarea, select {
    @apply transition-colors duration-200;
  }
}

@layer utilities {
  .text-gradient {
    background: linear-gradient(45deg, hsl(42, 92%, 56%), hsl(195, 100%, 50%));
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
  
  .border-gradient {
    border: 2px solid transparent;
    background: linear-gradient(var(--background), var(--background)) padding-box,
                linear-gradient(45deg, hsl(42, 92%, 56%), hsl(195, 100%, 50%)) border-box;
  }
}
/* Custom styles for react-phone-number-input */
.PhoneInput {
  @apply form-input flex items-center;
}

.PhoneInputInput {
  @apply bg-transparent border-none outline-none w-full text-base md:text-sm text-foreground ring-0 focus:ring-0;
}

.PhoneInputCountry {
  @apply mr-2;
}

.PhoneInputCountryIcon {
  box-shadow: none !important;
}

/* Style for the dropdown menu of the phone input */
.PhoneInputCountrySelect {
  @apply bg-card text-card-foreground border border-border;
}


================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/main.tsx
================================================================================
import { createRoot } from "react-dom/client";
import App from "./App";
import "./index.css";

createRoot(document.getElementById("root")!).render(<App />);



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/App.tsx
================================================================================
// File: AstroOracle/client/src/App.tsx
import { Switch, Route, useLocation } from "wouter";
import { queryClient } from "./lib/queryClient";
import { QueryClientProvider } from "@tanstack/react-query";
import { Toaster } from "@/components/ui/toaster";
import { TooltipProvider } from "@/components/ui/tooltip";
import { LanguageProvider } from "@/contexts/LanguageContext";
import NotFound from "@/pages/not-found";
import Home from "@/pages/home";
import Login from "@/pages/auth/login";
import Register from "@/pages/auth/register";
import Auth from "@/pages/auth/auth";
import Booking from "@/pages/booking";
import Courses from "@/pages/courses";
import Products from "@/pages/products";
import Consultation from "@/pages/consultation";
import HomeTuition from "@/pages/home-tuition";
import OneToOneApplication from "@/pages/home-tuition/apply/one-to-one/[courseId]";
import GroupApplication from "@/pages/home-tuition/apply/group/[courseId]";
import AdminDashboard from "@/pages/admin/dashboard";
import AdminClients from "@/pages/admin/clients";
import AdminCourses from "@/pages/admin/courses";
import AdminProducts from "@/pages/admin/products";
import AdminFAQs from "@/pages/admin/faqs";
import AdminConsultations from "@/pages/admin/consultations";
import AdminHomeTuition from "@/pages/admin/home-tuition-management";
import AdminSupportChat from "@/pages/admin/support-chat";
import AdminAnalytics from "@/pages/admin/analytics";
import AdminNotifications from "@/pages/admin/notifications";
import Checkout from "@/pages/checkout";
import PaymentSuccess from "@/pages/payment/success";
import PaymentFailed from "@/pages/payment/failed";
import ConsultationSession from "@/pages/consultation-session";
import ConsultationFeedback from "@/pages/consultation-feedback";
import Navigation from "@/components/layout/navigation";
import Footer from "@/components/layout/footer";
import CosmicBackground from "@/components/layout/cosmic-background";
import AIChatbot from "@/components/support/ai-chatbot";
import { SpeedInsights } from '@vercel/speed-insights/react'; // <-- ADDED THIS LINE

function LoginRedirect() {
  const [, setLocation] = useLocation();
  setLocation('/auth');
  return null;
}

function RegisterRedirect() {
  const [, setLocation] = useLocation();
  setLocation('/auth/register');
  return null;
}

function Router() {
  return (
    <Switch>
      <Route path="/" component={Home} />
      <Route path="/auth" component={Auth} />
      <Route path="/login" component={LoginRedirect} />
      <Route path="/register" component={RegisterRedirect} />
      <Route path="/auth/login" component={Auth} />
      <Route path="/auth/register" component={Auth} />
      <Route path="/booking" component={Booking} />
      <Route path="/courses" component={Courses} />
      <Route path="/home-tuition" component={HomeTuition} />
      <Route path="/home-tuition/apply/one-to-one/:courseId" component={OneToOneApplication} />
      <Route path="/home-tuition/apply/group/:courseId" component={GroupApplication} />
      <Route path="/products" component={Products} />
      <Route path="/consultation/:id" component={Consultation} />
      <Route path="/admin" component={AdminDashboard} />
      <Route path="/admin/clients" component={AdminClients} />
      <Route path="/admin/courses" component={AdminCourses} />
      <Route path="/admin/products" component={AdminProducts} />
      <Route path="/admin/faqs" component={AdminFAQs} />
      <Route path="/admin/consultations" component={AdminConsultations} />
      <Route path="/admin/home-tuition" component={AdminHomeTuition} />
      <Route path="/admin/support-chat" component={AdminSupportChat} />
      <Route path="/admin/analytics" component={AdminAnalytics} />
      <Route path="/admin/notifications" component={AdminNotifications} />
      <Route path="/checkout" component={Checkout} />
      <Route path="/payment/success" component={PaymentSuccess} />
      <Route path="/payment/failed" component={PaymentFailed} />
      <Route path="/mobile-login">
        {() => {
          window.location.href = '/login';
          return null;
        }}
      </Route>
      <Route path="/consultation-session" component={ConsultationSession} />
      <Route path="/consultation-feedback" component={ConsultationFeedback} />
      <Route component={NotFound} />
    </Switch>
  );
}

function App() {
  const [location] = useLocation();
  const isAdminRoute = location.startsWith('/admin');

  return (
    <QueryClientProvider client={queryClient}>
      <TooltipProvider>
        <LanguageProvider>
          <div className="min-h-screen bg-background text-foreground">
            <CosmicBackground />
            <Navigation />
            <main className="relative z-10">
              <Router />
            </main>
            {!isAdminRoute && <Footer />}
            <AIChatbot />
            <Toaster />
            <SpeedInsights /> {/* <-- ADDED THIS LINE */}
          </div>
        </LanguageProvider>
      </TooltipProvider>
    </QueryClientProvider>
  );
}

export default App;



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/vite.config.ts
================================================================================
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";

export default defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    ...(process.env.NODE_ENV !== "production" &&
    process.env.REPL_ID !== undefined
      ? [
          await import("@replit/vite-plugin-cartographer").then((m) =>
            m.cartographer(),
          ),
        ]
      : []),
  ],
  resolve: {
    alias: {
      "@": path.resolve(import.meta.dirname, "client", "src"),
      "@shared": path.resolve(import.meta.dirname, "shared"),
      "@assets": path.resolve(import.meta.dirname, "attached_assets"),
    },
  },
  root: path.resolve(import.meta.dirname, "client"),
  build: {
    outDir: path.resolve(import.meta.dirname, "dist/public"),
    emptyOutDir: true,
  },
  server: {
    host: "0.0.0.0",
    port: 5173,
    hmr: {
      port: 5173,
    },
    fs: {
      strict: true,
      deny: ["**/.*"],
    },
  },
});



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/components/layout/cosmic-background.tsx
================================================================================
import { useEffect, useState } from "react";

interface Star {
  id: number;
  top: string;
  left: string;
  animationDelay: string;
}

interface Planet {
  id: number;
  top: string;
  left: string;
  width: string;
  height: string;
  background: string;
  animationDuration: string;
}

interface Comet {
  id: number;
  top: string;
  left: string;
  animationDelay: string;
}

export default function CosmicBackground() {
  const [stars, setStars] = useState<Star[]>([]);
  const [planets, setPlanets] = useState<Planet[]>([]);
  const [comets, setComets] = useState<Comet[]>([]);

  useEffect(() => {
    // Generate more stunning stars for a richer sky
    const initialStars: Star[] = Array.from({ length: 150 }, (_, i) => ({
      id: i,
      top: `${Math.random() * 100}%`,
      left: `${Math.random() * 100}%`,
      animationDelay: `${Math.random() * 5}s`,
    }));

    // Generate 9 realistic planets with accurate colors and sizes
    const initialPlanets: Planet[] = [
      // Mercury (smallest, gray-brown)
      {
        id: 1,
        top: "12%",
        left: "88%",
        width: "24px",
        height: "24px",
        background: "radial-gradient(circle at 30% 30%, #8c7853, #5d4e37, #2c1810)",
        animationDuration: "20s",
      },
      // Venus (bright yellow-white)
      {
        id: 2,
        top: "25%",
        left: "15%",
        width: "32px",
        height: "32px",
        background: "radial-gradient(circle at 30% 30%, #ffd700, #ffb347, #ff8c00)",
        animationDuration: "35s",
      },
      // Earth (blue-green with clouds)
      {
        id: 3,
        top: "45%",
        left: "80%",
        width: "36px",
        height: "36px",
        background: "radial-gradient(circle at 30% 30%, #4169e1, #228b22, #0066cc, #1e90ff)",
        animationDuration: "45s",
      },
      // Mars (red planet)
      {
        id: 4,
        top: "65%",
        left: "20%",
        width: "28px",
        height: "28px",
        background: "radial-gradient(circle at 30% 30%, #cd5c5c, #a0522d, #8b0000)",
        animationDuration: "55s",
      },
      // Jupiter (gas giant, largest)
      {
        id: 5,
        top: "35%",
        left: "45%",
        width: "64px",
        height: "64px",
        background: "radial-gradient(circle at 30% 30%, #d2691e, #daa520, #b8860b, #8b4513)",
        animationDuration: "75s",
      },
      // Saturn (with ring effect)
      {
        id: 6,
        top: "80%",
        left: "70%",
        width: "56px",
        height: "56px",
        background: "radial-gradient(circle at 30% 30%, #faf0e6, #f4a460, #daa520)",
        animationDuration: "85s",
      },
      // Uranus (ice giant, blue-green)
      {
        id: 7,
        top: "8%",
        left: "40%",
        width: "44px",
        height: "44px",
        background: "radial-gradient(circle at 30% 30%, #4fd0e3, #00ced1, #008b8b)",
        animationDuration: "95s",
      },
      // Neptune (deep blue)
      {
        id: 8,
        top: "60%",
        left: "5%",
        width: "42px",
        height: "42px",
        background: "radial-gradient(circle at 30% 30%, #4169e1, #0000cd, #191970)",
        animationDuration: "105s",
      },
      // Pluto (small, distant)
      {
        id: 9,
        top: "88%",
        left: "92%",
        width: "20px",
        height: "20px",
        background: "radial-gradient(circle at 30% 30%, #deb887, #cd853f, #8b7355)",
        animationDuration: "120s",
      },
    ];

    // Generate more dramatic natural comets
    const initialComets: Comet[] = [
      {
        id: 1,
        top: "8%",
        left: "60%",
        animationDelay: "0s",
      },
      {
        id: 2,
        top: "30%",
        left: "2%",
        animationDelay: "4s",
      },
      {
        id: 3,
        top: "70%",
        left: "50%",
        animationDelay: "8s",
      },
      {
        id: 4,
        top: "90%",
        left: "15%",
        animationDelay: "12s",
      },
      {
        id: 5,
        top: "15%",
        left: "95%",
        animationDelay: "16s",
      },
      {
        id: 6,
        top: "5%",
        left: "20%",
        animationDelay: "20s",
      },
      {
        id: 7,
        top: "55%",
        left: "85%",
        animationDelay: "24s",
      },
      {
        id: 8,
        top: "75%",
        left: "35%",
        animationDelay: "28s",
      },
      {
        id: 9,
        top: "25%",
        left: "80%",
        animationDelay: "32s",
      },
      {
        id: 10,
        top: "85%",
        left: "60%",
        animationDelay: "36s",
      },
    ];

    setStars(initialStars);
    setPlanets(initialPlanets);
    setComets(initialComets);

    // Continuous generation of new stars and comets
    const cosmicInterval = setInterval(() => {
      // Add new star
      const newStar: Star = {
        id: Date.now() + Math.random() * 10000,
        top: `${Math.random() * 100}%`,
        left: `${Math.random() * 100}%`,
        animationDelay: "0s",
      };

      setStars(prevStars => {
        const updatedStars = [...prevStars, newStar];
        return updatedStars.slice(-200); // Keep max 200 stars
      });

      // Add new comet occasionally
      if (Math.random() < 0.3) {
        const newComet: Comet = {
          id: Date.now() + Math.random() * 1000,
          top: `${Math.random() * 100}%`,
          left: `${Math.random() * 100}%`,
          animationDelay: "0s",
        };

        setComets(prevComets => {
          const updatedComets = [...prevComets, newComet];
          return updatedComets.slice(-8); // Keep max 8 comets
        });

        // Cleanup comet after animation
        setTimeout(() => {
          setComets(prevComets => prevComets.filter(comet => comet.id !== newComet.id));
        }, 8000);
      }

      // Cleanup star after animation
      setTimeout(() => {
        setStars(prevStars => prevStars.filter(star => star.id !== newStar.id));
      }, 8000);
    }, 3000);

    return () => clearInterval(cosmicInterval);
  }, []);

  return (
    <div className="cosmic-bg">
      {/* Enhanced Stars */}
      {stars.map((star) => (
        <div
          key={star.id}
          className="star animate-twinkle"
          style={{
            top: star.top,
            left: star.left,
            animationDelay: star.animationDelay,
            width: `${2 + Math.random() * 3}px`,
            height: `${2 + Math.random() * 3}px`,
            background: `radial-gradient(circle, hsl(${Math.random() * 60 + 180}, 100%, 90%), transparent)`,
            boxShadow: `0 0 ${4 + Math.random() * 8}px hsl(${Math.random() * 60 + 180}, 100%, 70%)`,
          }}
        />
      ))}

      {/* 9 Realistic Planets */}
      {planets.map((planet) => (
        <div
          key={planet.id}
          className="planet animate-orbit"
          style={{
            top: planet.top,
            left: planet.left,
            width: planet.width,
            height: planet.height,
            background: planet.background,
            animationDuration: planet.animationDuration,
            boxShadow: `0 0 ${parseInt(planet.width) / 2}px rgba(255, 255, 255, 0.3), 
                       0 0 ${parseInt(planet.width)}px rgba(255, 255, 255, 0.1)`,
            border: '1px solid rgba(255, 255, 255, 0.1)',
          }}
        />
      ))}

      {/* Dramatic Comets */}
      {comets.map((comet) => (
        <div
          key={comet.id}
          className="comet animate-comet"
          style={{
            top: comet.top,
            left: comet.left,
            animationDelay: comet.animationDelay,
          }}
        />
      ))}

      {/* Nebula Effects */}
      <div className="absolute inset-0 bg-gradient-radial from-transparent via-purple-900/3 to-transparent animate-pulse" />
      <div className="absolute top-1/6 left-1/4 w-96 h-96 bg-gradient-radial from-yellow-500/5 via-purple-600/3 to-transparent rounded-full blur-3xl animate-float" />
      <div className="absolute bottom-1/4 right-1/5 w-80 h-80 bg-gradient-radial from-cyan-400/4 via-blue-600/2 to-transparent rounded-full blur-2xl animate-glow" style={{ animationDelay: "3s" }} />
      <div className="absolute top-2/3 left-1/6 w-64 h-64 bg-gradient-radial from-pink-500/3 via-purple-500/2 to-transparent rounded-full blur-3xl animate-pulse" style={{ animationDelay: "5s" }} />

      {/* Cosmic Dust */}
      <div className="absolute inset-0 opacity-20">
        <div className="absolute top-0 left-0 w-full h-full bg-gradient-to-br from-yellow-200/5 via-transparent to-purple-300/5" />
      </div>
    </div>
  );
}



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/components/layout/navigation.tsx
================================================================================
import { useState, useEffect } from "react";
import { Link, useLocation } from "wouter";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Sheet, SheetContent, SheetTrigger } from "@/components/ui/sheet";
import { Menu, User, LogOut } from "lucide-react";
import { useQuery } from "@tanstack/react-query";
import CartDrawer from "@/components/ui/cart-drawer";
import { useLanguage } from "@/contexts/LanguageContext";

export default function Navigation() {
  const [location] = useLocation();
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const { currentLanguage, setLanguage, t } = useLanguage();

  // Check if user is authenticated
  const { data: user } = useQuery({
    queryKey: ["/api/profile"],
    enabled: !!localStorage.getItem("token"),
  });

  const isAuthenticated = !!localStorage.getItem("token");

  const handleLogout = () => {
    localStorage.removeItem("token");
    window.location.href = "/";
  };

  const languages = [
    // English (International)
    { value: "en", label: "English" },
    
    // Major Indian Languages
    { value: "hi", label: "हिंदी (Hindi)" },
    { value: "bn", label: "বাংলা (Bengali)" },
    { value: "te", label: "తెలుగు (Telugu)" },
    { value: "mr", label: "मराठी (Marathi)" },
    { value: "ta", label: "தமிழ் (Tamil)" },
    { value: "gu", label: "ગુજરાતી (Gujarati)" },
    { value: "kn", label: "ಕನ್ನಡ (Kannada)" },
    { value: "or", label: "ଓଡ଼ିଆ (Odia)" },
    { value: "pa", label: "ਪੰਜਾਬੀ (Punjabi)" },
    { value: "ml", label: "മലയാളം (Malayalam)" },
    { value: "as", label: "অসমীয়া (Assamese)" },
    { value: "ur", label: "اردو (Urdu)" },
    { value: "sa", label: "संस्कृतम् (Sanskrit)" },
    
    // Major World Languages
    { value: "es", label: "Español (Spanish)" },
    { value: "fr", label: "Français (French)" },
    { value: "de", label: "Deutsch (German)" },
    { value: "it", label: "Italiano (Italian)" },
    { value: "pt", label: "Português (Portuguese)" },
    { value: "ru", label: "Русский (Russian)" },
    { value: "zh", label: "中文 (Chinese)" },
    { value: "ja", label: "日本語 (Japanese)" },
    { value: "ko", label: "한국어 (Korean)" },
    { value: "ar", label: "العربية (Arabic)" },
    
    // European Languages
    { value: "nl", label: "Nederlands (Dutch)" },
    { value: "sv", label: "Svenska (Swedish)" },
    { value: "no", label: "Norsk (Norwegian)" },
    { value: "da", label: "Dansk (Danish)" },
    { value: "fi", label: "Suomi (Finnish)" },
    { value: "pl", label: "Polski (Polish)" },
    { value: "cs", label: "Čeština (Czech)" },
    { value: "hu", label: "Magyar (Hungarian)" },
    { value: "ro", label: "Română (Romanian)" },
    { value: "el", label: "Ελληνικά (Greek)" },
    { value: "tr", label: "Türkçe (Turkish)" },
    
    // Middle Eastern & Central Asian
    { value: "fa", label: "فارسی (Persian)" },
    { value: "he", label: "עברית (Hebrew)" },
    
    // Southeast Asian
    { value: "th", label: "ไทย (Thai)" },
    { value: "vi", label: "Tiếng Việt (Vietnamese)" },
    { value: "id", label: "Bahasa Indonesia" },
    { value: "ms", label: "Bahasa Melayu (Malay)" },
    { value: "fil", label: "Filipino" },
    
    // African Languages
    { value: "sw", label: "Kiswahili (Swahili)" },
    { value: "af", label: "Afrikaans" },
    
    // Additional Languages
    { value: "uk", label: "Українська (Ukrainian)" },
    { value: "bg", label: "Български (Bulgarian)" },
    { value: "hr", label: "Hrvatski (Croatian)" },
    { value: "sk", label: "Slovenčina (Slovak)" },
    { value: "sl", label: "Slovenščina (Slovenian)" },
    { value: "et", label: "Eesti (Estonian)" },
    { value: "lv", label: "Latviešu (Latvian)" },
    { value: "lt", label: "Lietuvių (Lithuanian)" },
  ];

  const navItems = [
    { href: "/", label: t("home") },
    { href: "/booking", label: t("bookConsultation") },
    { href: "/courses", label: t("courses") },
    { href: "/home-tuition", label: t("homeTuition") },
    { href: "/products", label: t("products") },
  ];

  // Only show Admin Dashboard on admin pages
  if (location.startsWith('/admin')) {
    navItems.push({ href: "/admin", label: t("adminDashboard") });
  }

  return (
    <nav className="fixed top-0 left-0 right-0 z-50 nav-glass" data-testid="navigation">
      <div className="max-w-full mx-auto px-1 sm:px-2 lg:px-4">
        <div className="flex items-center justify-center h-16">
          {/* Logo */}
          <Link href="/" className="flex items-center space-x-3" data-testid="logo-link">
            <div className="w-10 h-10 rounded-lg bg-primary/20 border-2 border-dashed border-primary/50 flex items-center justify-center neon-border hover:bg-primary/30 transition-colors">
              <span className="text-primary text-xs font-medium">LOGO</span>
            </div>
            <span className="font-bold text-xl neon-text text-primary hidden md:block whitespace-nowrap">
              Jai Guru Astro Remedy
            </span>
          </Link>

          {/* Navigation - Close to Logo */}
          <div className="hidden lg:flex items-center space-x-6 ml-8">
            {navItems.map((item) => (
              <Link
                key={item.href}
                href={item.href}
                className={`text-foreground hover:text-primary transition-colors text-base font-medium whitespace-nowrap ${
                  location === item.href ? "text-primary" : ""
                }`}
                data-testid={`nav-link-${item.label.toLowerCase().replace(/\s+/g, "-")}`}
              >
                {item.label}
              </Link>
            ))}
          </div>

          {/* Right Side Actions - Close to Navigation */}
          <div className="hidden lg:flex items-center space-x-4 ml-8">
            {/* Language Selector */}
            <Select value={currentLanguage} onValueChange={(value) => setLanguage(value as any)} data-testid="language-selector">
              <SelectTrigger className="w-32 form-input text-base">
                <SelectValue />
              </SelectTrigger>
              <SelectContent className="glass-card border-primary/20">
                {languages.map((lang) => (
                  <SelectItem key={lang.value} value={lang.value}>
                    {lang.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>

            <CartDrawer />
            
            {/* Auth Buttons */}
            {isAuthenticated ? (
              <div className="flex items-center space-x-4">
                <span className="text-foreground text-sm">{t("welcome")}, {user && typeof user === 'object' && 'fullName' in user ? (user.fullName || (user as any).username) : 'User'}</span>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleLogout}
                  className="text-foreground border-primary/30 hover:bg-primary/10"
                  data-testid="logout-button"
                >
                  <LogOut className="w-4 h-4 mr-2" />
                  {t("logout")}
                </Button>
              </div>
            ) : (
              <div className="flex items-center space-x-4">
                <Link href="/auth">
                  <Button variant="outline" size="sm" className="text-foreground border-primary/30 hover:bg-primary/10" data-testid="login-button">
                    <User className="w-4 h-4 mr-2" />
                    {t("login")}
                  </Button>
                </Link>
                <Link href="/booking">
                  <Button className="neon-button text-primary-foreground font-semibold" data-testid="book-consultation-button">
                    {t("bookConsultation")}
                  </Button>
                </Link>
              </div>
            )}
          </div>

          {/* Mobile Menu Button */}
          <Sheet open={isMobileMenuOpen} onOpenChange={setIsMobileMenuOpen}>
            <SheetTrigger asChild>
              <Button variant="outline" size="sm" className="md:hidden" data-testid="mobile-menu-button">
                <Menu className="w-5 h-5" />
              </Button>
            </SheetTrigger>
            <SheetContent side="right" className="glass-card w-full sm:w-80">
              <div className="flex flex-col space-y-6 mt-6">
                {/* Mobile Navigation Links */}
                <div className="space-y-4">
                  {navItems.map((item) => (
                    <Link
                      key={item.href}
                      href={item.href}
                      className={`block text-foreground hover:text-primary transition-colors py-2 ${
                        location === item.href ? "text-primary font-semibold" : ""
                      }`}
                      onClick={() => setIsMobileMenuOpen(false)}
                      data-testid={`mobile-nav-link-${item.label.toLowerCase().replace(/\s+/g, "-")}`}
                    >
                      {item.label}
                    </Link>
                  ))}
                </div>

                {/* Mobile Language Selector */}
                <div>
                  <label className="block text-sm font-medium text-foreground mb-2">Language</label>
                  <Select value={currentLanguage} onValueChange={(value) => setLanguage(value as any)}>
                    <SelectTrigger className="w-full form-input">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent className="glass-card border-primary/20">
                      {languages.map((lang) => (
                        <SelectItem key={lang.value} value={lang.value}>
                          {lang.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {/* Mobile Auth Buttons */}
                <div className="space-y-3 pt-4 border-t border-primary/20">
                  {isAuthenticated ? (
                    <>
                      <div className="text-foreground text-sm">{t("welcome")}, {user && typeof user === 'object' && 'fullName' in user ? (user.fullName || (user as any).username) : 'User'}</div>
                      <Button
                        variant="outline"
                        className="w-full text-foreground border-primary/30 hover:bg-primary/10"
                        onClick={handleLogout}
                        data-testid="mobile-logout-button"
                      >
                        <LogOut className="w-4 h-4 mr-2" />
                        {t("logout")}
                      </Button>
                    </>
                  ) : (
                    <>
                      <Link href="/auth" className="block" onClick={() => setIsMobileMenuOpen(false)}>
                        <Button variant="outline" className="w-full text-foreground border-primary/30 hover:bg-primary/10" data-testid="mobile-login-button">
                          <User className="w-4 h-4 mr-2" />
                          {t("login")}
                        </Button>
                      </Link>
                      <Link href="/booking" className="block" onClick={() => setIsMobileMenuOpen(false)}>
                        <Button className="w-full neon-button text-primary-foreground font-semibold" data-testid="mobile-book-consultation-button">
                          Book Consultation
                        </Button>
                      </Link>
                    </>
                  )}
                </div>
              </div>
            </SheetContent>
          </Sheet>
        </div>
      </div>
    </nav>
  );
}



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/components/layout/footer.tsx
================================================================================
import { Link } from "wouter";
import { Mail, Phone, Globe, Facebook, Twitter, Instagram } from "lucide-react";
import { useLanguage } from "@/contexts/LanguageContext";

export default function Footer() {
  const currentYear = new Date().getFullYear();
  const { t } = useLanguage();

  const quickLinks = [
    { href: "/", label: t("home") },
    { href: "/booking", label: t("bookConsultation") },
    { href: "/courses", label: t("courses") },
    { href: "/products", label: t("products") },
  ];

  const services = [
    { href: "/booking?type=video", label: t("videoConsultation") },
    { href: "/booking?type=audio", label: t("audioConsultation") },
    { href: "/booking?type=chat", label: t("chatConsultation") },
    { href: "/booking?type=in-person", label: t("inPersonReading") },
  ];

  const legalLinks = [
    { href: "/privacy", label: t("privacyPolicy") },
    { href: "/terms", label: t("termsOfService") },
    { href: "/disclaimer", label: t("disclaimer") },
    { href: "/refund", label: t("refundPolicy") },
  ];

  return (
    <footer className="py-16 px-4 sm:px-6 lg:px-8 mt-16 relative z-10" data-testid="footer">
      <div className="max-w-7xl mx-auto">
        <div className="glass-card rounded-2xl p-8 md:p-12">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
            {/* Brand Section */}
            <div className="md:col-span-1">
              <div className="flex items-center space-x-3 mb-6">
                <div className="relative w-12 h-12 rounded-lg bg-gradient-to-br from-purple-600 via-blue-600 to-indigo-800 flex items-center justify-center neon-border overflow-hidden">
                  {/* Animated Background Stars */}
                  <div className="absolute inset-0 pointer-events-none z-0">
                    <div className="absolute w-0.5 h-0.5 bg-yellow-300 rounded-full animate-pulse" style={{top: '20%', left: '30%'}} />
                    <div className="absolute w-0.5 h-0.5 bg-white rounded-full animate-pulse delay-500" style={{top: '60%', left: '70%'}} />
                    <div className="absolute w-0.5 h-0.5 bg-purple-200 rounded-full animate-pulse delay-1000" style={{top: '80%', left: '50%'}} />
                  </div>
                  
                  {/* Central Star Symbol */}
                  <div className="relative z-20">
                    <div className="text-lg font-bold text-yellow-300 drop-shadow-lg">
                      ✦
                    </div>
                  </div>
                  
                  {/* Subtle Glow Effect */}
                  <div className="absolute inset-0 bg-gradient-to-br from-yellow-400/10 via-transparent to-blue-400/10 rounded-lg pointer-events-none z-10" />
                </div>
                <span className="font-bold text-xl neon-text text-primary">
                  Jai Guru Astro Remedy
                </span>
              </div>
              <p className="text-muted-foreground mb-6 text-sm leading-relaxed">
                Expert Vedic astrology consultations and cosmic guidance by Arup Shastri with 18+ years of experience.
                Unlock the secrets of the universe with personalized readings and authentic astrological remedies.
              </p>
              <div className="flex space-x-4">
                <a 
                  href="https://facebook.com/jaiguruastroremedy" 
                  target="_blank"
                  rel="noopener noreferrer"
                  className="w-10 h-10 bg-primary rounded-full flex items-center justify-center neon-border hover:scale-110 transition-transform"
                  data-testid="social-facebook"
                  aria-label="Facebook"
                >
                  <Facebook className="w-5 h-5 text-primary-foreground" />
                </a>
                <a 
                  href="https://twitter.com/jaiguruastro" 
                  target="_blank"
                  rel="noopener noreferrer"
                  className="w-10 h-10 bg-secondary rounded-full flex items-center justify-center hover:scale-110 transition-transform"
                  style={{ boxShadow: "0 0 20px var(--secondary)" }}
                  data-testid="social-twitter"
                  aria-label="Twitter"
                >
                  <Twitter className="w-5 h-5 text-secondary-foreground" />
                </a>
                <a 
                  href="https://instagram.com/jaiguruastroremedy" 
                  target="_blank"
                  rel="noopener noreferrer"
                  className="w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center neon-border hover:scale-110 transition-transform"
                  style={{ boxShadow: "0 0 20px #e91e63" }}
                  data-testid="social-instagram"
                  aria-label="Instagram"
                >
                  <Instagram className="w-5 h-5 text-white" />
                </a>
              </div>
            </div>

            {/* Quick Links */}
            <div>
              <h4 className="font-bold text-lg mb-6 text-foreground">{t("quickLinks")}</h4>
              <ul className="space-y-3">
                {quickLinks.map((link) => (
                  <li key={link.href}>
                    <Link 
                      href={link.href} 
                      className="text-muted-foreground hover:text-primary transition-colors text-sm"
                      data-testid={`footer-link-${link.href.replace(/[^a-zA-Z0-9]/g, "-")}`}
                    >
                      {link.label}
                    </Link>
                  </li>
                ))}
                <li>
                  <Link 
                    href="/about" 
                    className="text-muted-foreground hover:text-primary transition-colors text-sm"
                    data-testid="footer-link-about"
                  >
                    {t("aboutArupShastri")}
                  </Link>
                </li>
              </ul>
            </div>

            {/* Services */}
            <div>
              <h4 className="font-bold text-lg mb-6 text-foreground">{t("services")}</h4>
              <ul className="space-y-3">
                {services.map((service) => (
                  <li key={service.href}>
                    <Link 
                      href={service.href} 
                      className="text-muted-foreground hover:text-primary transition-colors text-sm"
                      data-testid={`footer-service-${service.href.replace(/[^a-zA-Z0-9]/g, "-")}`}
                    >
                      {service.label}
                    </Link>
                  </li>
                ))}
                <li>
                  <Link 
                    href="/products" 
                    className="text-muted-foreground hover:text-primary transition-colors text-sm"
                    data-testid="footer-service-remedies"
                  >
                    {t("astrologicalRemedies")}
                  </Link>
                </li>
              </ul>
            </div>

            {/* Contact & Legal */}
            <div>
              <h4 className="font-bold text-lg mb-6 text-foreground">{t("contactLegal")}</h4>
              <ul className="space-y-3 mb-6">
                <li className="text-muted-foreground text-sm">
                  <div className="flex items-center space-x-2">
                    <Mail className="w-4 h-4 text-primary" />
                    <a href="mailto:info@jaiguruastroremedy.com" className="hover:text-primary transition-colors">
                      info@jaiguruastroremedy.com
                    </a>
                  </div>
                </li>
                <li className="text-muted-foreground text-sm">
                  <div className="flex items-center space-x-2">
                    <Phone className="w-4 h-4 text-secondary" />
                    <a href="tel:+919876543210" className="hover:text-secondary transition-colors">
                      +91 98765-43210
                    </a>
                  </div>
                </li>
                <li className="text-muted-foreground text-sm">
                  <div className="flex items-center space-x-2">
                    <Globe className="w-6 h-6 text-accent" style={{ 
                      filter: 'drop-shadow(0 0 8px hsl(279, 100%, 50%))',
                      color: 'hsl(279, 100%, 50%)',
                      strokeWidth: '2'
                    }} />
                    <span>{t("availableGlobally")}</span>
                  </div>
                </li>
              </ul>
              
              <div className="space-y-2">
                {legalLinks.map((link) => (
                  <div key={link.href}>
                    <Link 
                      href={link.href} 
                      className="text-muted-foreground hover:text-primary transition-colors text-xs block"
                      data-testid={`footer-legal-${link.href.replace(/[^a-zA-Z0-9]/g, "-")}`}
                    >
                      {link.label}
                    </Link>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Bottom Section */}
          <div className="border-t border-primary/20 mt-12 pt-8">
            <div className="flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0">
              <div className="text-muted-foreground text-sm text-center md:text-left">
                © {currentYear} {t("copyrightText")}
              </div>
              <div className="flex flex-col sm:flex-row items-center space-y-2 sm:space-y-0 sm:space-x-4 text-xs text-muted-foreground">
                <span>🌟 {t("yearsOfExcellence")}</span>
                <span className="hidden sm:block">•</span>
                <span>🔮 {t("trustedByClients")}</span>
              </div>
            </div>
            
            {/* Disclaimer */}
            <div className="mt-6 p-4 glass rounded-lg">
              <p className="text-xs text-muted-foreground text-center leading-relaxed">
                <strong>{t("importantDisclaimer")}:</strong> {t("disclaimerText")}
              </p>
            </div>
          </div>
        </div>
      </div>
    </footer>
  );
}



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/components/ui/neon-button.tsx
================================================================================
import { cn } from "@/lib/utils";
import { Button, ButtonProps } from "@/components/ui/button";
import { forwardRef } from "react";

export interface NeonButtonProps extends ButtonProps {
  variant?: "primary" | "secondary" | "accent" | "gradient";
  glow?: boolean;
  pulse?: boolean;
}

const NeonButton = forwardRef<HTMLButtonElement, NeonButtonProps>(
  ({ className, variant = "gradient", glow = true, pulse = false, children, ...props }, ref) => {
    const baseClasses = "font-semibold transition-all duration-300 transform hover:scale-105";
    
    const variants = {
      primary: "bg-primary text-primary-foreground shadow-lg shadow-primary/30 hover:shadow-primary/50",
      secondary: "bg-secondary text-secondary-foreground shadow-lg shadow-secondary/30 hover:shadow-secondary/50",
      accent: "bg-accent text-accent-foreground shadow-lg shadow-accent/30 hover:shadow-accent/50",
      gradient: "neon-button text-primary-foreground",
    };

    const glowEffect = glow ? "hover:shadow-2xl" : "";
    const pulseEffect = pulse ? "animate-pulse-neon" : "";

    return (
      <Button
        ref={ref}
        className={cn(
          baseClasses,
          variants[variant],
          glowEffect,
          pulseEffect,
          className
        )}
        {...props}
      >
        {children}
      </Button>
    );
  }
);

NeonButton.displayName = "NeonButton";

export { NeonButton };



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/components/ui/glass-card.tsx
================================================================================
import { cn } from "@/lib/utils";
import { forwardRef } from "react";

export interface GlassCardProps extends React.HTMLAttributes<HTMLDivElement> {
  variant?: "default" | "primary" | "secondary" | "accent";
  hover?: boolean;
}

const GlassCard = forwardRef<HTMLDivElement, GlassCardProps>(
  ({ className, variant = "default", hover = false, children, ...props }, ref) => {
    const baseClasses = "backdrop-blur-xl border rounded-xl transition-all duration-300";
    
    const variants = {
      default: "glass-card",
      primary: "glass-card border-primary/10 shadow-lg shadow-primary/5",
      secondary: "glass-card border-secondary/10 shadow-lg shadow-secondary/5", 
      accent: "glass-card border-accent/10 shadow-lg shadow-accent/5",
    };

    const hoverEffects = hover ? "hover:scale-[1.02] hover:shadow-2xl hover:backdrop-blur-2xl" : "";

    return (
      <div
        ref={ref}
        className={cn(
          baseClasses,
          variants[variant],
          hoverEffects,
          className
        )}
        {...props}
      >
        {children}
      </div>
    );
  }
);

GlassCard.displayName = "GlassCard";

export { GlassCard };



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/components/ui/card.tsx
================================================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/components/ui/button.tsx
================================================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/components/ui/animated-logo.tsx
================================================================================
import { useState, useEffect } from "react";

export function AnimatedLogo() {
  const [isAnimating, setIsAnimating] = useState(true);

  useEffect(() => {
    const timer = setTimeout(() => setIsAnimating(false), 3000);
    return () => clearTimeout(timer);
  }, []);

  return (
    <div className="relative w-16 h-16 rounded-lg bg-gradient-to-br from-purple-600 via-blue-600 to-indigo-800 flex items-center justify-center neon-border mx-auto mb-4 overflow-hidden">
      {/* Animated Background Stars */}
      <div className="absolute inset-0">
        <div className={`absolute w-1 h-1 bg-yellow-300 rounded-full animate-pulse ${isAnimating ? 'animate-ping' : ''}`} style={{top: '20%', left: '30%'}} />
        <div className={`absolute w-1 h-1 bg-white rounded-full animate-pulse delay-500 ${isAnimating ? 'animate-ping' : ''}`} style={{top: '60%', left: '70%'}} />
        <div className={`absolute w-0.5 h-0.5 bg-blue-200 rounded-full animate-pulse delay-1000 ${isAnimating ? 'animate-ping' : ''}`} style={{top: '40%', left: '20%'}} />
        <div className={`absolute w-0.5 h-0.5 bg-purple-200 rounded-full animate-pulse delay-1500 ${isAnimating ? 'animate-ping' : ''}`} style={{top: '80%', left: '50%'}} />
      </div>
      
      {/* Central Moon/Star Symbol */}
      <div className={`relative z-10 transition-all duration-2000 ${isAnimating ? 'scale-110 rotate-12' : 'scale-100 rotate-0'}`}>
        <div className="text-2xl font-bold text-yellow-300 drop-shadow-lg">
          ✦
        </div>
      </div>
      
      {/* Rotating Outer Ring */}
      <div className={`absolute inset-2 border border-yellow-300/30 rounded-full ${isAnimating ? 'animate-spin' : ''}`} style={{animationDuration: '4s'}} />
      
      {/* Subtle Glow Effect */}
      <div className="absolute inset-0 bg-gradient-to-br from-yellow-400/10 via-transparent to-blue-400/10 rounded-lg" />
    </div>
  );
}


================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/contexts/LanguageContext.tsx
================================================================================
// File: AstroOracle/client/src/contexts/LanguageContext.tsx
// This is the complete and final version, including all translation keys and the full country code list.

import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';
// Note: translateText and getMyMemoryLangCode are not implemented/used here yet, as per our plan.
// import { translateText, getMyMemoryLangCode } from '../utils/autoTranslate';

type Language = 'en' | 'hi' | 'bn' | 'te' | 'mr' | 'ta' | 'gu' | 'kn' | 'or' | 'pa' | 'ml' | 'as' | 'ur' | 'sa' | 'es' | 'fr' | 'de' | 'it' | 'pt' | 'ru' | 'zh' | 'ja' | 'ko' | 'ar' | 'nl' | 'sv' | 'no' | 'da' | 'fi' | 'pl' | 'cs' | 'hu' | 'ro' | 'el' | 'tr' | 'fa' | 'he' | 'th' | 'vi' | 'id' | 'ms' | 'fil' | 'sw' | 'af' | 'uk' | 'bg' | 'hr' | 'sk' | 'sl' | 'et' | 'lv' | 'lt';

interface LanguageContextType {
  currentLanguage: Language;
  setLanguage: (lang: Language) => void;
  t: (key: string) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

// Translation data
const translations = {
  en: {
    // Navigation
    home: "Home",
    bookConsultation: "Book Consultation",
    courses: "Courses",
    homeTuition: "Home Tuition",
    products: "Products",
    adminDashboard: "Admin Dashboard",
    login: "Login",
    logout: "Logout",
    
    // Hero Section
    heroTitle: "Discover Your Cosmic Destiny",
    heroSubtitle: "Unlock the secrets of the universe with expert Vedic astrology consultations by Astrologer Arup Shastri - 18+ years of transformative guidance",
    bookReadingNow: "Book Your Reading Now",
    exploreCourses: "Explore Courses",
    
    // Profile Section
    meetAstrologer: "Meet Astrologer Arup Shastri",
    astrologerDescription: "With over 18 years of dedicated practice in Vedic astrology, Astrologer Arup Shastri has guided thousands of souls towards clarity, purpose, and cosmic alignment.",
    scheduleConsultation: "Schedule Personal Consultation",
    
    // Expertise Areas
    vedicAstrology: "Vedic Astrology",
    vedicAstrologyDesc: "Traditional birth chart analysis",
    palmistry: "Palmistry",
    palmistryDesc: "Hand reading & life insights",
    numerology: "Numerology",
    numerologyDesc: "Number patterns & destiny",
    cosmicRemedies: "Cosmic Remedies",
    cosmicRemediesDesc: "Healing solutions & guidance",
    vedicVastu: "Vedic Vastu Shastra",
    vedicVastuDesc: "Science of construction & harmony",
    yogaMeditation: "Yoga & Meditation",
    yogaMeditationDesc: "Pranayam & spiritual practices",
    
    // Services Section
    consultationServices: "Consultation Services",
    servicesDescription: "Choose from multiple consultation formats designed to provide you with personalized cosmic guidance",
    
    // Service Types
    videoCall: "Video Call",
    audioCall: "Audio Call",
    chatSession: "Chat Session",
    inPerson: "In-Person",
    homeService: "Home Service",
    
    // Service Descriptions
    videoCallDesc: "Face-to-face consultation via secure video call using Jitsi Meet",
    audioCallDesc: "Voice-only consultation for focused spiritual guidance and clarity",
    chatSessionDesc: "Text-based consultation through secure in-app messaging system",
    inPersonDesc: "Traditional face-to-face consultations at designated locations",
    homeServiceDesc: "Premium consultation at your home with personalized rituals",
    
    // Service Buttons
    bookVideoSession: "Book Video Session",
    bookAudioSession: "Book Audio Session",
    startChatSession: "Start Chat Session",
    bookInPerson: "Book In-Person",
    bookHomeService: "Book Home Service",
    
    // Additional Services
    allServices: "All Services",
    allServicesDescription: "Comprehensive astrological solutions designed to guide you on your cosmic journey",
    liveConsultations: "Live Consultations",
    liveConsultationsDesc: "Video, Audio, Chat & In-Person sessions for personalized cosmic guidance",
    vedicAstrologyCourses: "Vedic Astrology Courses",
    vedicAstrologyCoursesDesc: "Master ancient wisdom through comprehensive online and offline learning programs",
    startingFrom: "Starting from",
    beginnerToExpert: "Beginner to Expert",
    
    // Testimonials & CTA
    readyToDiscover: "Ready to Discover Your Cosmic Path?",
    bookPersonalizedConsultation: "Book your personalized consultation today and unlock the mysteries of your destiny with expert guidance from Astrologer Arup Shastri.",
    discoverGuidance: "Discover how Astrologer Arup Shastri's cosmic guidance has transformed lives across the globe",
    quickBooking: "Quick Booking",
    
    // Service full descriptions
    vedicAstrologyFullDesc: "Traditional birth chart analysis with personalized cosmic insights and remedial guidance",
    palmistryFullDesc: "Palmistry, Numerology, and birth chart analysis for deep spiritual insights",
    numerologyFullDesc: "Sacred number patterns and destiny analysis for life path clarity",
    cosmicRemediesFullDesc: "Authentic gemstones, yantras, and spiritual products for positive energy transformation",
    vedicVastuFullDesc: "Science of construction and architectural harmony for positive living spaces",
    yogaMeditationFullDesc: "Pranayam breathing techniques and spiritual practices for inner peace and balance",
    homeServiceFullDesc: "Premium consultation at your home with personalized rituals and sacred ceremonies",
    
    // Testimonial names (keeping original)
    priyaSharma: "Priya Sharma",
    michaelJohnson: "Michael Johnson",
    sarahMitchell: "Sarah Mitchell",
    
    // Stats
    yearsExperience: "Years Experience",
    satisfiedClients: "Satisfied Clients",
    countriesServed: "Countries Served",
    
    
    // Additional service tags
    authenticBlessed: "Authentic & Blessed",
    sacredGeometry: "Sacred Geometry",
    mindBodyHarmony: "Mind Body Harmony",
    sacredHomeVisits: "Sacred Home Visits",
    
    // Footer specific translations
    videoConsultation: "Video Consultation",
    audioConsultation: "Audio Consultation",
    chatConsultation: "Chat Consultation",
    inPersonReading: "In-Person Reading",
    astrologicalRemedies: "Astrological Remedies",
    contactLegal: "Contact & Legal",
    privacyPolicy: "Privacy Policy",
    termsOfService: "Terms of Service",
    disclaimer: "Disclaimer",
    refundPolicy: "Refund Policy",
    quickLinks: "Quick Links",
    services: "Services",
    availableGlobally: "Available Globally",
    copyrightText: "Jai Guru Astro Remedy. All rights reserved.",
    yearsOfExcellence: "18+ Years of Excellence",
    trustedByClients: "Trusted by 10,000+ Clients Worldwide",
    importantDisclaimer: "Important Disclaimer",
    disclaimerText: "Astrological predictions are for guidance purposes only. Results may vary based on individual circumstances and planetary influences.",
    aboutArupShastri: "About Arup Shastri",
    
    // Common
    welcome: "Welcome",
    loading: "Loading...",
    error: "Error",
    success: "Success",
    
    // Booking specific keys (newly added for the wizard)
    booking: {
      mainTitle: "Book Your Consultation",
      mainSubtitle: "Follow the steps to schedule your session.",
      backButton: "Back",
      nextButton: "Next Step",
      submitButton: "Proceed to Checkout",
      processingButton: "Processing...",
      minutes: "minutes",
      steps: {
        type: "Select Type",
        details: "Topics & Plan",
        personal: "Your Details",
        schedule: "Schedule & Confirm"
      },
      personalInfo: {
        title: "Step 3: Your Personal Information",
        fullNamePlaceholder: "Enter your full name *",
        emailPlaceholder: "your.email@example.com (Optional)",
        phonePlaceholder: "Enter your phone number *",
        pobPlaceholder: "City, State, Country (Optional)",
        birthDetailsTitle: "Birth Details (for accurate reading)"
      },
      typeSelection: {
        title: "Step 1: Select Consultation Type"
      },
      topicSelection: {
        titleSingle: "Step 2: Choose Consultation Topic",
        subtitleSingle: "Select the main subject for your consultation.",
        titleMulti: "Step 2: Select Your Topics",
        subtitleMulti: "Choose multiple topics (₹100 for 6 minutes each)."
      },
      planSelection: {
        title: "Select Your Plan"
      },
      schedule: {
        title: "Step 4: Schedule & Finalize Your Booking",
        datePlaceholder: "Select a date",
        timePlaceholder: "Select a time slot",
        notesPlaceholder: "Any special requirements or questions...",
        languageLabel: "Consultation Language"
      },
      summary: {
        title: "Booking Summary",
        type: "Type",
        plan: "Plan",
        duration: "Duration",
        dateTime: "Date & Time",
        total: "Total Amount"
      },
      terms: {
        agreeText: "I agree to the",
        termsLink: "Terms of Service",
        privacyLink: "Privacy Policy",
        refundText: ", and understand that consultations are non-refundable."
      },
      toast: {
        success: { title: "Booking Initiated!", desc: "Redirecting to checkout..." },
        error: { title: "Booking Failed", desc: "An unexpected error occurred. Please try again." },
        termsRequired: { title: "Agreement Required", desc: "You must agree to the terms and policies to proceed." }
      },
      langEnglish: "English",
      langHindi: "Hindi",
      langBengali: "Bengali"
    },
    topics: {
        birthChart: { label: "Birth Chart Analysis", desc: "Complete birth chart reading" },
        career: { label: "Career & Job", desc: "Career guidance, job changes" },
        business: { label: "Business & Income", desc: "Business prospects, financial growth" },
        partnerships: { label: "Partnership", desc: "Business partnerships and collaborations" },
        education: { label: "Education", desc: "Academic guidance and decisions" },
        marriage: { label: "Marriage", desc: "Marriage timing and marital life" },
        maritalDiscord: { label: "Marital Discord", desc: "Relationship problems and issues" },
        breakup: { label: "Break Up", desc: "Relationship breakups and moving on" },
        dreams: { label: "Dreams", desc: "Dream interpretation and guidance" },
        success: { label: "Success", desc: "Path to success and achievement" },
        divorce: { label: "Divorce", desc: "Divorce proceedings and life after" },
        loveAffairs: { label: "Love Affairs", desc: "Romantic relationships and guidance" },
        litigation: { label: "Litigation", desc: "Legal matters and court cases" },
        offspring: { label: "Offspring", desc: "Children, pregnancy, family planning" },
        siblings: { label: "Brother/Sister", desc: "Sibling relationships and dynamics" },
        property: { label: "House/Land", desc: "Property matters and real estate" },
        vehicle: { label: "Vehicle", desc: "Vehicle purchase and transportation" },
        parents: { label: "Father/Mother", desc: "Parental relationships and guidance" },
        relatives: { label: "Relatives", desc: "Extended family relationships" },
        bankBalance: { label: "Bank Balance", desc: "Financial status and wealth" },
        friends: { label: "Friends", desc: "Friendship and social relationships" },
        enemies: { label: "Enemies", desc: "Dealing with adversaries and conflicts" },
        health: { label: "Diseases/Health", desc: "Health predictions and wellness" },
        fortune: { label: "Fortune", desc: "Overall luck and destiny analysis" },
        accident: { label: "Accident", desc: "Accident prevention and safety" },
        smallTour: { label: "Small Tour", desc: "Local travel and short trips" },
        foreignTravel: { label: "Foreign Travel", desc: "International travel and settlement" },
        shareMarket: { label: "Share Market", desc: "Stock market investments and trading" },
        suddenGain: { label: "Sudden Gain", desc: "Unexpected profits and windfalls" },
        lottery: { label: "Lottery", desc: "Gambling luck and lottery predictions" }
    },
    consultation: {
        types: {
            video: { title: "Video Call", desc: "Face-to-face consultation via secure video call" },
            audio: { title: "Audio Call", desc: "Voice-only consultation for focused guidance" },
            chat: { title: "Chat Session", desc: "Text-based secure consultation" },
            inPerson: { title: "In-Person (Kolkata)", desc: "Traditional face-to-face consultation", note: "Only on Wednesdays (3pm-6pm)" },
            homeService: { title: "Home Service (Kolkata)", desc: "Premium consultation at your home", note: "Within 25km. 48hrs advance booking." },
            topicBased: { title: "Topic-Based", desc: "Select specific topics for guidance", note: "Online only. 6 minutes per topic." }
        },
        plans: {
            quickGuidance: { name: "Quick Guidance" },
            focusedAnalysis: { name: "Focused Analysis" },
            inDepthAnalysis: { name: "In-Depth Analysis" },
            comprehensiveAnalysis: { name: "Comprehensive Analysis" },
            sacredHome: { name: "Sacred Home Consultation" },
            completeHome: { name: "Complete Home Analysis" },
            homeBlessing: { name: "Home Blessing Ceremony" },
            perTopic: { name: "Per Topic" }
        }
    }
  },
  // ... (your other languages like hi, bn, es, etc., should remain as they are)
};

export function LanguageProvider({ children }: { children: ReactNode }) {
  const [currentLanguage, setCurrentLanguage] = useState<Language>('en');

  const setLanguage = (lang: Language) => {
    setCurrentLanguage(lang);
    localStorage.setItem('preferred-language', lang);
    // RTL direction is now handled in App.tsx and globally in index.css
  };

  const t = (key: string): string => {
    const keys = key.split('.');
    let translation: any = translations[currentLanguage];

    for (const k of keys) {
      if (translation && typeof translation === 'object' && k in translation) {
        translation = translation[k];
      } else {
        // Fallback to English
        translation = translations.en;
        for (const fk of keys) {
          if (translation && typeof translation === 'object' && fk in translation) {
            translation = translation[fk];
          } else {
            return key; // Return key if not found
          }
        }
        break; // Exit loop if English fallback was used
      }
    }

    if (typeof translation !== 'string') {
        return key; // Return key if the resolved value is not a string
    }

    return translation;
  };

  // Load saved language and apply initial direction
  useEffect(() => {
    const saved = localStorage.getItem('preferred-language') as Language | null;
    const initialLang = (saved && supportedLanguages.some(lang => lang.code === saved)) ? saved : 'en';
    setCurrentLanguage(initialLang);
    
    const languageConfig = supportedLanguages.find(lang => lang.code === initialLang);
    document.documentElement.setAttribute('dir', languageConfig?.rtl ? 'rtl' : 'ltr');
    document.documentElement.setAttribute('lang', initialLang);
  }, []);

  // Update document direction when language changes
  useEffect(() => {
    const languageConfig = supportedLanguages.find(lang => lang.code === currentLanguage);
    document.documentElement.setAttribute('dir', languageConfig?.rtl ? 'rtl' : 'ltr');
    document.documentElement.setAttribute('lang', currentLanguage);
  }, [currentLanguage]);

  return (
    <LanguageContext.Provider value={{ currentLanguage, setLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
}

export function useLanguage() {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within LanguageProvider');
  }
  return context;
}


================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/lib/i18n.ts
================================================================================
// Internationalization configuration and utilities
export interface TranslationResource {
  [key: string]: string | TranslationResource;
}

export interface LanguageConfig {
  code: string;
  name: string;
  nativeName: string;
  flag: string;
  rtl?: boolean;
}

// Supported languages configuration
export const supportedLanguages: LanguageConfig[] = [
  { code: 'en', name: 'English', nativeName: 'English', flag: '🇺🇸' },
  { code: 'hi', name: 'Hindi', nativeName: 'हिंदी', flag: '🇮🇳' },
  { code: 'bn', name: 'Bengali', nativeName: 'বাংলা', flag: '🇧🇩' },
  { code: 'es', name: 'Spanish', nativeName: 'Español', flag: '🇪🇸' },
  { code: 'fr', name: 'French', nativeName: 'Français', flag: '🇫🇷' },
  { code: 'de', name: 'German', nativeName: 'Deutsch', flag: '🇩🇪' },
  { code: 'it', name: 'Italian', nativeName: 'Italiano', flag: '🇮🇹' },
  { code: 'pt', name: 'Portuguese', nativeName: 'Português', flag: '🇵🇹' },
  { code: 'ru', name: 'Russian', nativeName: 'Русский', flag: '🇷🇺' },
  { code: 'zh', name: 'Chinese', nativeName: '中文', flag: '🇨🇳' },
  { code: 'ja', name: 'Japanese', nativeName: '日本語', flag: '🇯🇵' },
  { code: 'ko', name: 'Korean', nativeName: '한국어', flag: '🇰🇷' },
  { code: 'ar', name: 'Arabic', nativeName: 'العربية', flag: '🇸🇦', rtl: true },
];

// Translation resources
const translations: Record<string, TranslationResource> = {
  en: {
    navigation: {
      home: 'Home',
      services: 'Services',
      courses: 'Courses',
      products: 'Products',
      about: 'About',
      login: 'Login',
      logout: 'Logout',
      bookConsultation: 'Book Consultation',
      dashboard: 'Dashboard',
    },
    home: {
      title: 'Discover Your Cosmic Destiny',
      subtitle: 'Unlock the secrets of the universe with expert Vedic astrology consultations by Astrologer Arup Shastri - 18+ years of transformative guidance',
      bookReading: 'Book Your Reading Now',
      exploreCourses: 'Explore Courses',
      yearsExperience: 'Years Experience',
      satisfiedClients: 'Satisfied Clients',
      countriesServed: 'Countries Served',
    },
    consultation: {
      types: {
        video: 'Video Call',
        audio: 'Audio Call',
        chat: 'Chat Session',
        inPerson: 'In-Person',
      },
      plans: {
        quickGuidance: 'Quick Guidance',
        focusedAnalysis: 'Focused Analysis',
        inDepthAnalysis: 'In-Depth Analysis',
        comprehensiveAnalysis: 'Comprehensive Analysis',
      },
      status: {
        scheduled: 'Scheduled',
        ongoing: 'In Progress',
        completed: 'Completed',
        cancelled: 'Cancelled',
      },
    },
    forms: {
      fullName: 'Full Name',
      email: 'Email Address',
      phoneNumber: 'Phone Number',
      dateOfBirth: 'Date of Birth',
      timeOfBirth: 'Time of Birth',
      placeOfBirth: 'Place of Birth',
      required: 'Required',
      optional: 'Optional',
      submit: 'Submit',
      cancel: 'Cancel',
      save: 'Save',
      edit: 'Edit',
      delete: 'Delete',
    },
    messages: {
      welcome: 'Welcome to Jai Guru Astro Remedy',
      loginSuccess: 'Login successful',
      loginFailed: 'Login failed',
      registrationSuccess: 'Registration successful',
      bookingConfirmed: 'Booking confirmed',
      paymentRequired: 'Payment required',
      connectionLost: 'Connection lost',
      reconnecting: 'Reconnecting...',
    },
    astrologer: {
      name: 'Astrologer Arup Shastri',
      title: 'Expert Vedic Astrologer',
      experience: '18+ years of experience',
      specialties: {
        vedicAstrology: 'Vedic Astrology',
        palmistry: 'Palmistry',
        numerology: 'Numerology',
        cosmicRemedies: 'Cosmic Remedies',
      },
    },
  },
  hi: {
    navigation: {
      home: 'मुख्य पृष्ठ',
      services: 'सेवाएं',
      courses: 'पाठ्यक्रम',
      products: 'उत्पाद',
      about: 'बारे में',
      login: 'लॉगिन',
      logout: 'लॉगआउट',
      bookConsultation: 'परामर्श बुक करें',
      dashboard: 'डैशबोर्ड',
    },
    home: {
      title: 'अपनी कॉस्मिक नियति खोजें',
      subtitle: 'अरुप शास्त्री के 18+ वर्षों के अनुभव के साथ वैदिक ज्योतिष परामर्श द्वारा ब्रह्मांड के रहस्यों को अनलॉक करें',
      bookReading: 'अभी अपना रीडिंग बुक करें',
      exploreCourses: 'पाठ्यक्रम देखें',
      yearsExperience: 'वर्षों का अनुभव',
      satisfiedClients: 'संतुष्ट ग्राहक',
      countriesServed: 'देश सेवित',
    },
    consultation: {
      types: {
        video: 'वीडियो कॉल',
        audio: 'ऑडियो कॉल',
        chat: 'चैट सेशन',
        inPerson: 'व्यक्तिगत',
      },
      plans: {
        quickGuidance: 'त्वरित मार्गदर्शन',
        focusedAnalysis: 'केंद्रित विश्लेषण',
        inDepthAnalysis: 'गहन विश्लेषण',
        comprehensiveAnalysis: 'व्यापक विश्लेषण',
      },
    },
    astrologer: {
      name: 'अरुप शास्त्री',
      title: 'विशेषज्ञ वैदिक ज्योतिषी',
      experience: '18+ वर्षों का अनुभव',
    },
  },
  bn: {
    navigation: {
      home: 'হোম',
      services: 'সেবা',
      courses: 'কোর্স',
      products: 'পণ্য',
      about: 'সম্পর্কে',
      login: 'লগইন',
      logout: 'লগআউট',
      bookConsultation: 'পরামর্শ বুক করুন',
      dashboard: 'ড্যাশবোর্ড',
    },
    home: {
      title: 'আপনার মহাজাগতিক নিয়তি আবিষ্কার করুন',
      subtitle: 'অরুপ শাস্ত্রীর 18+ বছরের অভিজ্ঞতার সাথে বিশেষজ্ঞ বৈদিক জ্যোতিষ পরামর্শের মাধ্যমে মহাবিশ্বের গোপনীয়তা আনলক করুন',
      bookReading: 'এখনই আপনার রিডিং বুক করুন',
      exploreCourses: 'কোর্স অন্বেষণ করুন',
      yearsExperience: 'বছরের অভিজ্ঞতা',
      satisfiedClients: 'সন্তুষ্ট ক্লায়েন্ট',
      countriesServed: 'দেশ সেবা করা হয়েছে',
    },
    astrologer: {
      name: 'অরুপ শাস্ত্রী',
      title: 'বিশেষজ্ঞ বৈদিক জ্যোতিষী',
      experience: '18+ বছরের অভিজ্ঞতা',
    },
  },
};

// Translation state management
class I18nManager {
  private currentLanguage: string = 'en';
  private fallbackLanguage: string = 'en';
  private listeners: Array<(language: string) => void> = [];

  constructor() {
    // Load saved language from localStorage
    const savedLanguage = localStorage.getItem('preferred-language');
    if (savedLanguage && this.isLanguageSupported(savedLanguage)) {
      this.currentLanguage = savedLanguage;
    } else {
      // Detect browser language
      const browserLanguage = navigator.language.split('-')[0];
      if (this.isLanguageSupported(browserLanguage)) {
        this.currentLanguage = browserLanguage;
      }
    }

    // Apply RTL if needed
    this.applyLanguageDirection();
  }

  isLanguageSupported(language: string): boolean {
    return supportedLanguages.some(lang => lang.code === language);
  }

  getCurrentLanguage(): string {
    return this.currentLanguage;
  }

  setLanguage(language: string): void {
    if (!this.isLanguageSupported(language)) {
      console.warn(`Language ${language} is not supported, falling back to ${this.fallbackLanguage}`);
      return;
    }

    this.currentLanguage = language;
    localStorage.setItem('preferred-language', language);
    this.applyLanguageDirection();
    this.notifyListeners();
  }

  subscribe(listener: (language: string) => void): () => void {
    this.listeners.push(listener);
    return () => {
      const index = this.listeners.indexOf(listener);
      if (index > -1) {
        this.listeners.splice(index, 1);
      }
    };
  }

  private notifyListeners(): void {
    this.listeners.forEach(listener => listener(this.currentLanguage));
  }

  private applyLanguageDirection(): void {
    const languageConfig = supportedLanguages.find(lang => lang.code === this.currentLanguage);
    const isRTL = languageConfig?.rtl || false;
    
    document.documentElement.setAttribute('dir', isRTL ? 'rtl' : 'ltr');
    document.documentElement.setAttribute('lang', this.currentLanguage);
  }

  translate(key: string, interpolations?: Record<string, string>): string {
    const keys = key.split('.');
    let translation: any = translations[this.currentLanguage];
    
    // Navigate through nested keys
    for (const k of keys) {
      if (translation && typeof translation === 'object' && k in translation) {
        translation = translation[k];
      } else {
        // Fallback to English if key not found
        translation = translations[this.fallbackLanguage];
        for (const k of keys) {
          if (translation && typeof translation === 'object' && k in translation) {
            translation = translation[k];
          } else {
            return key; // Return key if translation not found
          }
        }
        break;
      }
    }

    if (typeof translation !== 'string') {
      return key;
    }

    // Apply interpolations
    if (interpolations) {
      return Object.entries(interpolations).reduce((result, [placeholder, value]) => {
        return result.replace(new RegExp(`{{${placeholder}}}`, 'g'), value);
      }, translation);
    }

    return translation;
  }

  // Helper method to get language configuration
  getLanguageConfig(code?: string): LanguageConfig | undefined {
    const languageCode = code || this.currentLanguage;
    return supportedLanguages.find(lang => lang.code === languageCode);
  }

  // Format numbers according to locale
  formatNumber(number: number): string {
    try {
      const languageConfig = this.getLanguageConfig();
      const locale = languageConfig?.code === 'hi' ? 'hi-IN' : 
                    languageConfig?.code === 'bn' ? 'bn-BD' : 
                    languageConfig?.code === 'ar' ? 'ar-SA' : 
                    'en-US';
      return new Intl.NumberFormat(locale).format(number);
    } catch (error) {
      return number.toString();
    }
  }

  // Format currency according to locale
  formatCurrency(amount: number, currency: string = 'INR'): string {
    try {
      const languageConfig = this.getLanguageConfig();
      const locale = languageConfig?.code === 'hi' ? 'hi-IN' : 
                    languageConfig?.code === 'bn' ? 'bn-BD' : 
                    'en-IN';
      return new Intl.NumberFormat(locale, {
        style: 'currency',
        currency: currency,
      }).format(amount);
    } catch (error) {
      return `${currency} ${amount}`;
    }
  }

  // Format dates according to locale
  formatDate(date: Date | string): string {
    try {
      const dateObj = typeof date === 'string' ? new Date(date) : date;
      const languageConfig = this.getLanguageConfig();
      const locale = languageConfig?.code === 'hi' ? 'hi-IN' : 
                    languageConfig?.code === 'bn' ? 'bn-BD' : 
                    languageConfig?.code === 'ar' ? 'ar-SA' : 
                    'en-US';
      return new Intl.DateTimeFormat(locale, {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
      }).format(dateObj);
    } catch (error) {
      return date.toString();
    }
  }
}

// Create and export singleton instance
export const i18n = new I18nManager();

// React hook for using translations
export const useTranslation = () => {
  const [currentLanguage, setCurrentLanguage] = React.useState(i18n.getCurrentLanguage());

  React.useEffect(() => {
    const unsubscribe = i18n.subscribe(setCurrentLanguage);
    return unsubscribe;
  }, []);

  const t = React.useCallback((key: string, interpolations?: Record<string, string>) => {
    return i18n.translate(key, interpolations);
  }, []);

  const changeLanguage = React.useCallback((language: string) => {
    i18n.setLanguage(language);
  }, []);

  return {
    t,
    currentLanguage,
    changeLanguage,
    supportedLanguages,
    formatNumber: i18n.formatNumber.bind(i18n),
    formatCurrency: i18n.formatCurrency.bind(i18n),
    formatDate: i18n.formatDate.bind(i18n),
  };
};

// Add React import for the hook
import * as React from 'react';

// Helper function to add new translations dynamically
export const addTranslations = (language: string, newTranslations: TranslationResource) => {
  if (!translations[language]) {
    translations[language] = {};
  }
  
  // Deep merge translations
  const merge = (target: any, source: any) => {
    for (const key in source) {
      if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {
        if (!target[key]) target[key] = {};
        merge(target[key], source[key]);
      } else {
        target[key] = source[key];
      }
    }
  };
  
  merge(translations[language], newTranslations);
};

// Export useful utilities
export const getCurrentLanguage = () => i18n.getCurrentLanguage();
export const setLanguage = (language: string) => i18n.setLanguage(language);
export const translate = (key: string, interpolations?: Record<string, string>) => i18n.translate(key, interpolations);



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/data/global-phone-codes.ts
================================================================================
// Global phone codes for all countries in the world
export const globalPhoneCodes = [
  // Most common countries first
  { value: "+91", label: "🇮🇳 +91", country: "India", flag: "🇮🇳" },
  { value: "+1", label: "🇺🇸 +1", country: "United States", flag: "🇺🇸" },
  { value: "+86", label: "🇨🇳 +86", country: "China", flag: "🇨🇳" },
  { value: "+81", label: "🇯🇵 +81", country: "Japan", flag: "🇯🇵" },
  { value: "+49", label: "🇩🇪 +49", country: "Germany", flag: "🇩🇪" },
  { value: "+33", label: "🇫🇷 +33", country: "France", flag: "🇫🇷" },
  { value: "+44", label: "🇬🇧 +44", country: "United Kingdom", flag: "🇬🇧" },
  { value: "+82", label: "🇰🇷 +82", country: "South Korea", flag: "🇰🇷" },
  { value: "+61", label: "🇦🇺 +61", country: "Australia", flag: "🇦🇺" },
  { value: "+7", label: "🇷🇺 +7", country: "Russia", flag: "🇷🇺" },
  
  // All other countries alphabetically
  { value: "+93", label: "🇦🇫 +93", country: "Afghanistan", flag: "🇦🇫" },
  { value: "+355", label: "🇦🇱 +355", country: "Albania", flag: "🇦🇱" },
  { value: "+213", label: "🇩🇿 +213", country: "Algeria", flag: "🇩🇿" },
  { value: "+1684", label: "🇦🇸 +1684", country: "American Samoa", flag: "🇦🇸" },
  { value: "+376", label: "🇦🇩 +376", country: "Andorra", flag: "🇦🇩" },
  { value: "+244", label: "🇦🇴 +244", country: "Angola", flag: "🇦🇴" },
  { value: "+1264", label: "🇦🇮 +1264", country: "Anguilla", flag: "🇦🇮" },
  { value: "+1268", label: "🇦🇬 +1268", country: "Antigua and Barbuda", flag: "🇦🇬" },
  { value: "+54", label: "🇦🇷 +54", country: "Argentina", flag: "🇦🇷" },
  { value: "+374", label: "🇦🇲 +374", country: "Armenia", flag: "🇦🇲" },
  { value: "+297", label: "🇦🇼 +297", country: "Aruba", flag: "🇦🇼" },
  { value: "+43", label: "🇦🇹 +43", country: "Austria", flag: "🇦🇹" },
  { value: "+994", label: "🇦🇿 +994", country: "Azerbaijan", flag: "🇦🇿" },
  { value: "+1242", label: "🇧🇸 +1242", country: "Bahamas", flag: "🇧🇸" },
  { value: "+973", label: "🇧🇭 +973", country: "Bahrain", flag: "🇧🇭" },
  { value: "+880", label: "🇧🇩 +880", country: "Bangladesh", flag: "🇧🇩" },
  { value: "+1246", label: "🇧🇧 +1246", country: "Barbados", flag: "🇧🇧" },
  { value: "+375", label: "🇧🇾 +375", country: "Belarus", flag: "🇧🇾" },
  { value: "+32", label: "🇧🇪 +32", country: "Belgium", flag: "🇧🇪" },
  { value: "+501", label: "🇧🇿 +501", country: "Belize", flag: "🇧🇿" },
  { value: "+229", label: "🇧🇯 +229", country: "Benin", flag: "🇧🇯" },
  { value: "+1441", label: "🇧🇲 +1441", country: "Bermuda", flag: "🇧🇲" },
  { value: "+975", label: "🇧🇹 +975", country: "Bhutan", flag: "🇧🇹" },
  { value: "+591", label: "🇧🇴 +591", country: "Bolivia", flag: "🇧🇴" },
  { value: "+387", label: "🇧🇦 +387", country: "Bosnia and Herzegovina", flag: "🇧🇦" },
  { value: "+267", label: "🇧🇼 +267", country: "Botswana", flag: "🇧🇼" },
  { value: "+55", label: "🇧🇷 +55", country: "Brazil", flag: "🇧🇷" },
  { value: "+673", label: "🇧🇳 +673", country: "Brunei", flag: "🇧🇳" },
  { value: "+359", label: "🇧🇬 +359", country: "Bulgaria", flag: "🇧🇬" },
  { value: "+226", label: "🇧🇫 +226", country: "Burkina Faso", flag: "🇧🇫" },
  { value: "+257", label: "🇧🇮 +257", country: "Burundi", flag: "🇧🇮" },
  { value: "+855", label: "🇰🇭 +855", country: "Cambodia", flag: "🇰🇭" },
  { value: "+237", label: "🇨🇲 +237", country: "Cameroon", flag: "🇨🇲" },
  { value: "+1", label: "🇨🇦 +1", country: "Canada", flag: "🇨🇦" },
  { value: "+238", label: "🇨🇻 +238", country: "Cape Verde", flag: "🇨🇻" },
  { value: "+1345", label: "🇰🇾 +1345", country: "Cayman Islands", flag: "🇰🇾" },
  { value: "+236", label: "🇨🇫 +236", country: "Central African Republic", flag: "🇨🇫" },
  { value: "+235", label: "🇹🇩 +235", country: "Chad", flag: "🇹🇩" },
  { value: "+56", label: "🇨🇱 +56", country: "Chile", flag: "🇨🇱" },
  { value: "+57", label: "🇨🇴 +57", country: "Colombia", flag: "🇨🇴" },
  { value: "+269", label: "🇰🇲 +269", country: "Comoros", flag: "🇰🇲" },
  { value: "+242", label: "🇨🇬 +242", country: "Congo", flag: "🇨🇬" },
  { value: "+243", label: "🇨🇩 +243", country: "Congo (DRC)", flag: "🇨🇩" },
  { value: "+682", label: "🇨🇰 +682", country: "Cook Islands", flag: "🇨🇰" },
  { value: "+506", label: "🇨🇷 +506", country: "Costa Rica", flag: "🇨🇷" },
  { value: "+225", label: "🇨🇮 +225", country: "Côte d'Ivoire", flag: "🇨🇮" },
  { value: "+385", label: "🇭🇷 +385", country: "Croatia", flag: "🇭🇷" },
  { value: "+53", label: "🇨🇺 +53", country: "Cuba", flag: "🇨🇺" },
  { value: "+357", label: "🇨🇾 +357", country: "Cyprus", flag: "🇨🇾" },
  { value: "+420", label: "🇨🇿 +420", country: "Czech Republic", flag: "🇨🇿" },
  { value: "+45", label: "🇩🇰 +45", country: "Denmark", flag: "🇩🇰" },
  { value: "+253", label: "🇩🇯 +253", country: "Djibouti", flag: "🇩🇯" },
  { value: "+1767", label: "🇩🇲 +1767", country: "Dominica", flag: "🇩🇲" },
  { value: "+1849", label: "🇩🇴 +1849", country: "Dominican Republic", flag: "🇩🇴" },
  { value: "+593", label: "🇪🇨 +593", country: "Ecuador", flag: "🇪🇨" },
  { value: "+20", label: "🇪🇬 +20", country: "Egypt", flag: "🇪🇬" },
  { value: "+503", label: "🇸🇻 +503", country: "El Salvador", flag: "🇸🇻" },
  { value: "+240", label: "🇬🇶 +240", country: "Equatorial Guinea", flag: "🇬🇶" },
  { value: "+291", label: "🇪🇷 +291", country: "Eritrea", flag: "🇪🇷" },
  { value: "+372", label: "🇪🇪 +372", country: "Estonia", flag: "🇪🇪" },
  { value: "+268", label: "🇸🇿 +268", country: "Eswatini", flag: "🇸🇿" },
  { value: "+251", label: "🇪🇹 +251", country: "Ethiopia", flag: "🇪🇹" },
  { value: "+500", label: "🇫🇰 +500", country: "Falkland Islands", flag: "🇫🇰" },
  { value: "+298", label: "🇫🇴 +298", country: "Faroe Islands", flag: "🇫🇴" },
  { value: "+679", label: "🇫🇯 +679", country: "Fiji", flag: "🇫🇯" },
  { value: "+358", label: "🇫🇮 +358", country: "Finland", flag: "🇫🇮" },
  { value: "+594", label: "🇬🇫 +594", country: "French Guiana", flag: "🇬🇫" },
  { value: "+689", label: "🇵🇫 +689", country: "French Polynesia", flag: "🇵🇫" },
  { value: "+241", label: "🇬🇦 +241", country: "Gabon", flag: "🇬🇦" },
  { value: "+220", label: "🇬🇲 +220", country: "Gambia", flag: "🇬🇲" },
  { value: "+995", label: "🇬🇪 +995", country: "Georgia", flag: "🇬🇪" },
  { value: "+233", label: "🇬🇭 +233", country: "Ghana", flag: "🇬🇭" },
  { value: "+350", label: "🇬🇮 +350", country: "Gibraltar", flag: "🇬🇮" },
  { value: "+30", label: "🇬🇷 +30", country: "Greece", flag: "🇬🇷" },
  { value: "+299", label: "🇬🇱 +299", country: "Greenland", flag: "🇬🇱" },
  { value: "+1473", label: "🇬🇩 +1473", country: "Grenada", flag: "🇬🇩" },
  { value: "+590", label: "🇬🇵 +590", country: "Guadeloupe", flag: "🇬🇵" },
  { value: "+1671", label: "🇬🇺 +1671", country: "Guam", flag: "🇬🇺" },
  { value: "+502", label: "🇬🇹 +502", country: "Guatemala", flag: "🇬🇹" },
  { value: "+224", label: "🇬🇳 +224", country: "Guinea", flag: "🇬🇳" },
  { value: "+245", label: "🇬🇼 +245", country: "Guinea-Bissau", flag: "🇬🇼" },
  { value: "+592", label: "🇬🇾 +592", country: "Guyana", flag: "🇬🇾" },
  { value: "+509", label: "🇭🇹 +509", country: "Haiti", flag: "🇭🇹" },
  { value: "+504", label: "🇭🇳 +504", country: "Honduras", flag: "🇭🇳" },
  { value: "+852", label: "🇭🇰 +852", country: "Hong Kong", flag: "🇭🇰" },
  { value: "+36", label: "🇭🇺 +36", country: "Hungary", flag: "🇭🇺" },
  { value: "+354", label: "🇮🇸 +354", country: "Iceland", flag: "🇮🇸" },
  { value: "+62", label: "🇮🇩 +62", country: "Indonesia", flag: "🇮🇩" },
  { value: "+98", label: "🇮🇷 +98", country: "Iran", flag: "🇮🇷" },
  { value: "+964", label: "🇮🇶 +964", country: "Iraq", flag: "🇮🇶" },
  { value: "+353", label: "🇮🇪 +353", country: "Ireland", flag: "🇮🇪" },
  { value: "+972", label: "🇮🇱 +972", country: "Israel", flag: "🇮🇱" },
  { value: "+39", label: "🇮🇹 +39", country: "Italy", flag: "🇮🇹" },
  { value: "+1876", label: "🇯🇲 +1876", country: "Jamaica", flag: "🇯🇲" },
  { value: "+962", label: "🇯🇴 +962", country: "Jordan", flag: "🇯🇴" },
  { value: "+77", label: "🇰🇿 +77", country: "Kazakhstan", flag: "🇰🇿" },
  { value: "+254", label: "🇰🇪 +254", country: "Kenya", flag: "🇰🇪" },
  { value: "+686", label: "🇰🇮 +686", country: "Kiribati", flag: "🇰🇮" },
  { value: "+850", label: "🇰🇵 +850", country: "North Korea", flag: "🇰🇵" },
  { value: "+965", label: "🇰🇼 +965", country: "Kuwait", flag: "🇰🇼" },
  { value: "+996", label: "🇰🇬 +996", country: "Kyrgyzstan", flag: "🇰🇬" },
  { value: "+856", label: "🇱🇦 +856", country: "Laos", flag: "🇱🇦" },
  { value: "+371", label: "🇱🇻 +371", country: "Latvia", flag: "🇱🇻" },
  { value: "+961", label: "🇱🇧 +961", country: "Lebanon", flag: "🇱🇧" },
  { value: "+266", label: "🇱🇸 +266", country: "Lesotho", flag: "🇱🇸" },
  { value: "+231", label: "🇱🇷 +231", country: "Liberia", flag: "🇱🇷" },
  { value: "+218", label: "🇱🇾 +218", country: "Libya", flag: "🇱🇾" },
  { value: "+423", label: "🇱🇮 +423", country: "Liechtenstein", flag: "🇱🇮" },
  { value: "+370", label: "🇱🇹 +370", country: "Lithuania", flag: "🇱🇹" },
  { value: "+352", label: "🇱🇺 +352", country: "Luxembourg", flag: "🇱🇺" },
  { value: "+853", label: "🇲🇴 +853", country: "Macao", flag: "🇲🇴" },
  { value: "+389", label: "🇲🇰 +389", country: "North Macedonia", flag: "🇲🇰" },
  { value: "+261", label: "🇲🇬 +261", country: "Madagascar", flag: "🇲🇬" },
  { value: "+265", label: "🇲🇼 +265", country: "Malawi", flag: "🇲🇼" },
  { value: "+60", label: "🇲🇾 +60", country: "Malaysia", flag: "🇲🇾" },
  { value: "+960", label: "🇲🇻 +960", country: "Maldives", flag: "🇲🇻" },
  { value: "+223", label: "🇲🇱 +223", country: "Mali", flag: "🇲🇱" },
  { value: "+356", label: "🇲🇹 +356", country: "Malta", flag: "🇲🇹" },
  { value: "+692", label: "🇲🇭 +692", country: "Marshall Islands", flag: "🇲🇭" },
  { value: "+596", label: "🇲🇶 +596", country: "Martinique", flag: "🇲🇶" },
  { value: "+222", label: "🇲🇷 +222", country: "Mauritania", flag: "🇲🇷" },
  { value: "+230", label: "🇲🇺 +230", country: "Mauritius", flag: "🇲🇺" },
  { value: "+262", label: "🇾🇹 +262", country: "Mayotte", flag: "🇾🇹" },
  { value: "+52", label: "🇲🇽 +52", country: "Mexico", flag: "🇲🇽" },
  { value: "+691", label: "🇫🇲 +691", country: "Micronesia", flag: "🇫🇲" },
  { value: "+373", label: "🇲🇩 +373", country: "Moldova", flag: "🇲🇩" },
  { value: "+377", label: "🇲🇨 +377", country: "Monaco", flag: "🇲🇨" },
  { value: "+976", label: "🇲🇳 +976", country: "Mongolia", flag: "🇲🇳" },
  { value: "+382", label: "🇲🇪 +382", country: "Montenegro", flag: "🇲🇪" },
  { value: "+1664", label: "🇲🇸 +1664", country: "Montserrat", flag: "🇲🇸" },
  { value: "+212", label: "🇲🇦 +212", country: "Morocco", flag: "🇲🇦" },
  { value: "+258", label: "🇲🇿 +258", country: "Mozambique", flag: "🇲🇿" },
  { value: "+95", label: "🇲🇲 +95", country: "Myanmar", flag: "🇲🇲" },
  { value: "+264", label: "🇳🇦 +264", country: "Namibia", flag: "🇳🇦" },
  { value: "+674", label: "🇳🇷 +674", country: "Nauru", flag: "🇳🇷" },
  { value: "+977", label: "🇳🇵 +977", country: "Nepal", flag: "🇳🇵" },
  { value: "+31", label: "🇳🇱 +31", country: "Netherlands", flag: "🇳🇱" },
  { value: "+687", label: "🇳🇨 +687", country: "New Caledonia", flag: "🇳🇨" },
  { value: "+64", label: "🇳🇿 +64", country: "New Zealand", flag: "🇳🇿" },
  { value: "+505", label: "🇳🇮 +505", country: "Nicaragua", flag: "🇳🇮" },
  { value: "+227", label: "🇳🇪 +227", country: "Niger", flag: "🇳🇪" },
  { value: "+234", label: "🇳🇬 +234", country: "Nigeria", flag: "🇳🇬" },
  { value: "+683", label: "🇳🇺 +683", country: "Niue", flag: "🇳🇺" },
  { value: "+672", label: "🇳🇫 +672", country: "Norfolk Island", flag: "🇳🇫" },
  { value: "+1670", label: "🇲🇵 +1670", country: "Northern Mariana Islands", flag: "🇲🇵" },
  { value: "+47", label: "🇳🇴 +47", country: "Norway", flag: "🇳🇴" },
  { value: "+968", label: "🇴🇲 +968", country: "Oman", flag: "🇴🇲" },
  { value: "+92", label: "🇵🇰 +92", country: "Pakistan", flag: "🇵🇰" },
  { value: "+680", label: "🇵🇼 +680", country: "Palau", flag: "🇵🇼" },
  { value: "+970", label: "🇵🇸 +970", country: "Palestine", flag: "🇵🇸" },
  { value: "+507", label: "🇵🇦 +507", country: "Panama", flag: "🇵🇦" },
  { value: "+675", label: "🇵🇬 +675", country: "Papua New Guinea", flag: "🇵🇬" },
  { value: "+595", label: "🇵🇾 +595", country: "Paraguay", flag: "🇵🇾" },
  { value: "+51", label: "🇵🇪 +51", country: "Peru", flag: "🇵🇪" },
  { value: "+63", label: "🇵🇭 +63", country: "Philippines", flag: "🇵🇭" },
  { value: "+48", label: "🇵🇱 +48", country: "Poland", flag: "🇵🇱" },
  { value: "+351", label: "🇵🇹 +351", country: "Portugal", flag: "🇵🇹" },
  { value: "+1787", label: "🇵🇷 +1787", country: "Puerto Rico", flag: "🇵🇷" },
  { value: "+974", label: "🇶🇦 +974", country: "Qatar", flag: "🇶🇦" },
  { value: "+262", label: "🇷🇪 +262", country: "Réunion", flag: "🇷🇪" },
  { value: "+40", label: "🇷🇴 +40", country: "Romania", flag: "🇷🇴" },
  { value: "+250", label: "🇷🇼 +250", country: "Rwanda", flag: "🇷🇼" },
  { value: "+290", label: "🇸🇭 +290", country: "Saint Helena", flag: "🇸🇭" },
  { value: "+1869", label: "🇰🇳 +1869", country: "Saint Kitts and Nevis", flag: "🇰🇳" },
  { value: "+1758", label: "🇱🇨 +1758", country: "Saint Lucia", flag: "🇱🇨" },
  { value: "+508", label: "🇵🇲 +508", country: "Saint Pierre and Miquelon", flag: "🇵🇲" },
  { value: "+1784", label: "🇻🇨 +1784", country: "Saint Vincent and the Grenadines", flag: "🇻🇨" },
  { value: "+685", label: "🇼🇸 +685", country: "Samoa", flag: "🇼🇸" },
  { value: "+378", label: "🇸🇲 +378", country: "San Marino", flag: "🇸🇲" },
  { value: "+239", label: "🇸🇹 +239", country: "São Tomé and Príncipe", flag: "🇸🇹" },
  { value: "+966", label: "🇸🇦 +966", country: "Saudi Arabia", flag: "🇸🇦" },
  { value: "+221", label: "🇸🇳 +221", country: "Senegal", flag: "🇸🇳" },
  { value: "+381", label: "🇷🇸 +381", country: "Serbia", flag: "🇷🇸" },
  { value: "+248", label: "🇸🇨 +248", country: "Seychelles", flag: "🇸🇨" },
  { value: "+232", label: "🇸🇱 +232", country: "Sierra Leone", flag: "🇸🇱" },
  { value: "+65", label: "🇸🇬 +65", country: "Singapore", flag: "🇸🇬" },
  { value: "+421", label: "🇸🇰 +421", country: "Slovakia", flag: "🇸🇰" },
  { value: "+386", label: "🇸🇮 +386", country: "Slovenia", flag: "🇸🇮" },
  { value: "+677", label: "🇸🇧 +677", country: "Solomon Islands", flag: "🇸🇧" },
  { value: "+252", label: "🇸🇴 +252", country: "Somalia", flag: "🇸🇴" },
  { value: "+27", label: "🇿🇦 +27", country: "South Africa", flag: "🇿🇦" },
  { value: "+211", label: "🇸🇸 +211", country: "South Sudan", flag: "🇸🇸" },
  { value: "+34", label: "🇪🇸 +34", country: "Spain", flag: "🇪🇸" },
  { value: "+94", label: "🇱🇰 +94", country: "Sri Lanka", flag: "🇱🇰" },
  { value: "+249", label: "🇸🇩 +249", country: "Sudan", flag: "🇸🇩" },
  { value: "+597", label: "🇸🇷 +597", country: "Suriname", flag: "🇸🇷" },
  { value: "+46", label: "🇸🇪 +46", country: "Sweden", flag: "🇸🇪" },
  { value: "+41", label: "🇨🇭 +41", country: "Switzerland", flag: "🇨🇭" },
  { value: "+963", label: "🇸🇾 +963", country: "Syria", flag: "🇸🇾" },
  { value: "+886", label: "🇹🇼 +886", country: "Taiwan", flag: "🇹🇼" },
  { value: "+992", label: "🇹🇯 +992", country: "Tajikistan", flag: "🇹🇯" },
  { value: "+255", label: "🇹🇿 +255", country: "Tanzania", flag: "🇹🇿" },
  { value: "+66", label: "🇹🇭 +66", country: "Thailand", flag: "🇹🇭" },
  { value: "+670", label: "🇹🇱 +670", country: "Timor-Leste", flag: "🇹🇱" },
  { value: "+228", label: "🇹🇬 +228", country: "Togo", flag: "🇹🇬" },
  { value: "+690", label: "🇹🇰 +690", country: "Tokelau", flag: "🇹🇰" },
  { value: "+676", label: "🇹🇴 +676", country: "Tonga", flag: "🇹🇴" },
  { value: "+1868", label: "🇹🇹 +1868", country: "Trinidad and Tobago", flag: "🇹🇹" },
  { value: "+216", label: "🇹🇳 +216", country: "Tunisia", flag: "🇹🇳" },
  { value: "+90", label: "🇹🇷 +90", country: "Turkey", flag: "🇹🇷" },
  { value: "+993", label: "🇹🇲 +993", country: "Turkmenistan", flag: "🇹🇲" },
  { value: "+1649", label: "🇹🇨 +1649", country: "Turks and Caicos Islands", flag: "🇹🇨" },
  { value: "+688", label: "🇹🇻 +688", country: "Tuvalu", flag: "🇹🇻" },
  { value: "+256", label: "🇺🇬 +256", country: "Uganda", flag: "🇺🇬" },
  { value: "+380", label: "🇺🇦 +380", country: "Ukraine", flag: "🇺🇦" },
  { value: "+971", label: "🇦🇪 +971", country: "United Arab Emirates", flag: "🇦🇪" },
  { value: "+598", label: "🇺🇾 +598", country: "Uruguay", flag: "🇺🇾" },
  { value: "+998", label: "🇺🇿 +998", country: "Uzbekistan", flag: "🇺🇿" },
  { value: "+678", label: "🇻🇺 +678", country: "Vanuatu", flag: "🇻🇺" },
  { value: "+39", label: "🇻🇦 +39", country: "Vatican City", flag: "🇻🇦" },
  { value: "+58", label: "🇻🇪 +58", country: "Venezuela", flag: "🇻🇪" },
  { value: "+84", label: "🇻🇳 +84", country: "Vietnam", flag: "🇻🇳" },
  { value: "+1284", label: "🇻🇬 +1284", country: "British Virgin Islands", flag: "🇻🇬" },
  { value: "+1340", label: "🇻🇮 +1340", country: "U.S. Virgin Islands", flag: "🇻🇮" },
  { value: "+681", label: "🇼🇫 +681", country: "Wallis and Futuna", flag: "🇼🇫" },
  { value: "+212", label: "🇪🇭 +212", country: "Western Sahara", flag: "🇪🇭" },
  { value: "+967", label: "🇾🇪 +967", country: "Yemen", flag: "🇾🇪" },
  { value: "+260", label: "🇿🇲 +260", country: "Zambia", flag: "🇿🇲" },
  { value: "+263", label: "🇿🇼 +263", country: "Zimbabwe", flag: "🇿🇼" },
];

// Helper function to get country by phone code
export const getCountryByPhoneCode = (phoneCode: string) => {
  return globalPhoneCodes.find(country => country.value === phoneCode);
};

// Helper function to get all unique country codes
export const getAllCountryCodes = () => {
  return globalPhoneCodes.map(country => country.value);
};


================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/pages/home.tsx
================================================================================
import { Link } from "wouter";
import { useQuery } from "@tanstack/react-query";
import { GlassCard } from "@/components/ui/glass-card";
import { NeonButton } from "@/components/ui/neon-button";
import { Badge } from "@/components/ui/badge";
import { Star, Users, Globe, Award, Video, MessageSquare, Phone, MapPin, Home as HomeIcon } from "lucide-react";
import { useLanguage } from "@/contexts/LanguageContext";
// AutoTranslate import removed - using t() function instead

export default function Home() {
  const { t } = useLanguage();
  
  const { data: courses } = useQuery({
    queryKey: ["/api/courses"],
  });

  const { data: products } = useQuery({
    queryKey: ["/api/products"],
  });

  const stats = [
    { icon: Award, label: t("yearsExperience"), value: "18+", color: "text-primary" },
    { icon: Users, label: t("satisfiedClients"), value: "5000+", color: "text-secondary" },
    { icon: Globe, label: t("countriesServed"), value: "100+", color: "text-pink-500" },
  ];

  const consultationTypes = [
    {
      icon: Video,
      title: t("videoCall"),
      description: t("videoCallDesc"),
      price: "₹2,500",
      color: "primary",
      href: "/booking?type=video",
    },
    {
      icon: Phone,
      title: t("audioCall"),
      description: t("audioCallDesc"),
      price: "₹1,800",
      color: "secondary",
      href: "/booking?type=audio",
    },
    {
      icon: MessageSquare,
      title: t("chatSession"),
      description: t("chatSessionDesc"),
      price: "₹1,200",
      color: "accent",
      href: "/booking?type=chat",
    },
    {
      icon: MapPin,
      title: t("inPerson"),
      description: t("inPersonDesc"),
      price: "₹5,000",
      color: "yellow",
      href: "/booking?type=in-person",
    },
    {
      icon: HomeIcon,
      title: t("homeService"),
      description: t("homeServiceDesc"),
      price: "₹2,499",
      color: "amber",
      href: "/booking?type=home-service",
    },
  ];

  const testimonials = [
    {
      name: t("priyaSharma"),
      location: t("mumbaiIndia"),
      rating: 5,
      content: t("testimonial1"),
      initials: "P.S.",
    },
    {
      name: t("michaelJohnson"), 
      location: t("newYorkUSA"),
      rating: 5,
      content: t("testimonial2"),
      initials: "M.J.",
    },
    {
      name: t("sarahMitchell"),
      location: t("londonUK"), 
      rating: 5,
      content: t("testimonial3"),
      initials: "S.M.",
    },
  ];

  const featuredCourses = Array.isArray(courses) ? courses.slice(0, 3) : [];
  const featuredProducts = Array.isArray(products) ? products.slice(0, 4) : [];

  return (
    <div className="min-h-screen pt-16" data-testid="home-page">
      {/* Hero Section */}
      <section className="py-16 px-4 sm:px-6 lg:px-8" data-testid="hero-section">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <h1 className="text-5xl md:text-7xl font-bold mb-6 neon-text text-primary animate-float" data-testid="hero-title">
              {t("heroTitle")}
            </h1>
            <p className="text-xl md:text-2xl text-muted-foreground mb-8 max-w-3xl mx-auto" data-testid="hero-description">
              {t("heroSubtitle")}
            </p>
            
            {/* CTA Buttons */}
            <div className="flex flex-col sm:flex-row gap-4 justify-center mb-12">
              <Link href="/booking">
                <NeonButton size="lg" className="text-lg px-8 py-4" data-testid="book-reading-button">
                  {t("bookReadingNow")}
                </NeonButton>
              </Link>
              <Link href="/courses">
                <NeonButton size="lg" className="text-lg px-8 py-4" data-testid="explore-courses-button">
                  {t("exploreCourses")}
                </NeonButton>
              </Link>
            </div>

            {/* Quick Stats */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto">
              {stats.map((stat, index) => (
                <GlassCard key={index} className="p-6 text-center" hover data-testid={`stat-${index}`}>
                  <stat.icon className={`w-12 h-12 mx-auto mb-2 neon-border rounded-full p-3 ${stat.color}`} style={{ 
                    filter: 'drop-shadow(0 0 12px currentColor) brightness(1.2)',
                    background: index === 2 ? 'rgba(20, 20, 40, 0.8)' : 'rgba(255, 193, 7, 0.1)',
                    border: index === 2 ? '2px solid rgba(255, 193, 7, 0.4)' : '1px solid rgba(255, 193, 7, 0.2)',
                    strokeWidth: index === 2 ? '3' : '2',
                    color: index === 2 ? '#e91e63' : undefined,
                    fill: index === 2 ? 'rgba(20, 20, 40, 0.3)' : 'none'
                  }} />
                  <div className="text-3xl font-bold text-primary neon-text mb-2" data-testid={`stat-value-${index}`} style={{ 
                    textShadow: '0 0 10px hsl(42, 92%, 56%)' 
                  }}>{stat.value}</div>
                  <div className="text-muted-foreground" data-testid={`stat-label-${index}`}>{stat.label}</div>
                </GlassCard>
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Astrologer Profile Section */}
      <section className="py-16 px-4 sm:px-6 lg:px-8" data-testid="astrologer-profile">
        <div className="max-w-7xl mx-auto">
          <GlassCard className="p-8 md:p-12">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
              <div>
                <img 
                  src="https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=800" 
                  alt="Arup Shastri - Expert Vedic Astrologer" 
                  className="rounded-2xl shadow-2xl w-full max-w-md mx-auto neon-border"
                  data-testid="astrologer-image"
                />
              </div>
              <div>
                <h2 className="text-4xl font-bold mb-6 neon-text text-primary" data-testid="astrologer-title">
                  {t("meetAstrologer")}
                </h2>
                <p className="text-lg text-muted-foreground mb-6" data-testid="astrologer-description">
                  {t("astrologerDescription")}
                </p>
                
                {/* Expertise Areas */}
                <div className="grid grid-cols-2 lg:grid-cols-3 gap-4 mb-8">
                  {[
                    { title: t("vedicAstrology"), desc: t("vedicAstrologyDesc") },
                    { title: t("palmistry"), desc: t("palmistryDesc") },
                    { title: t("numerology"), desc: t("numerologyDesc") },
                    { title: t("cosmicRemedies"), desc: t("cosmicRemediesDesc") },
                    { title: t("vedicVastu"), desc: t("vedicVastuDesc") },
                    { title: t("yogaMeditation"), desc: t("yogaMeditationDesc") },
                  ].map((expertise, index) => (
                    <div key={index} className="glass p-4 rounded-lg" data-testid={`expertise-${index}`}>
                      <h4 className="font-semibold text-primary mb-2">{expertise.title}</h4>
                      <p className="text-sm text-muted-foreground">{expertise.desc}</p>
                    </div>
                  ))}
                </div>

                <Link href="/booking">
                  <NeonButton data-testid="schedule-consultation-button">
                    {t("scheduleConsultation")}
                  </NeonButton>
                </Link>
              </div>
            </div>
          </GlassCard>
        </div>
      </section>

      {/* Services Section */}
      <section className="py-16 px-4 sm:px-6 lg:px-8" data-testid="services-section">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-4xl md:text-5xl font-bold mb-6 neon-text text-primary" data-testid="services-title">
              {t("consultationServices")}
            </h2>
            <p className="text-xl text-muted-foreground max-w-3xl mx-auto" data-testid="services-description">
              {t("servicesDescription")}
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {consultationTypes.map((consultation, index) => (
              <GlassCard key={index} className="p-8 text-center" hover data-testid={`consultation-${index}`}>
                <div className={`w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-6 ${
                  consultation.color === 'primary' ? 'bg-primary neon-border' :
                  consultation.color === 'secondary' ? 'bg-secondary' :
                  consultation.color === 'accent' ? 'bg-accent' :
                  'bg-gradient-to-br from-purple-500 to-pink-500'
                }`} style={
                  consultation.color === 'primary' ? { boxShadow: '0 0 20px hsl(42, 92%, 56%)' } :
                  consultation.color === 'secondary' ? { boxShadow: '0 0 20px hsl(195, 100%, 50%)' } :
                  consultation.color === 'accent' ? { boxShadow: '0 0 20px hsl(279, 100%, 50%)', background: 'hsl(279, 100%, 50%)' } :
                  { boxShadow: '0 0 20px #e91e63', background: 'linear-gradient(to bottom right, #8b5cf6, #ec4899)' }
                }>
                  <consultation.icon className={`w-8 h-8 ${
                    consultation.color === 'yellow' ? 'text-white' : 
                    consultation.color === 'primary' ? 'text-primary-foreground' :
                    consultation.color === 'secondary' ? 'text-secondary-foreground' :
                    'text-white'
                  }`} style={
                    consultation.color === 'accent' ? { 
                      filter: 'drop-shadow(0 0 4px rgba(255, 255, 255, 0.8))',
                      strokeWidth: '2'
                    } : consultation.color === 'yellow' ? {
                      filter: 'drop-shadow(0 0 4px rgba(255, 255, 255, 0.8))',
                      strokeWidth: '2'
                    } : {}
                  } />
                </div>
                <h3 className="text-xl font-bold mb-4 text-foreground" data-testid={`consultation-title-${index}`}>
                  {consultation.title}
                </h3>
                <p className="text-muted-foreground mb-6 text-sm" data-testid={`consultation-description-${index}`}>
                  {consultation.description}
                </p>
                <div className={`text-2xl font-bold mb-4 ${
                  consultation.color === 'primary' ? 'text-primary' :
                  consultation.color === 'secondary' ? 'text-secondary' :
                  consultation.color === 'accent' ? 'text-accent' :
                  'text-pink-500'
                }`} style={
                  consultation.color === 'accent' ? { 
                    color: 'hsl(279, 100%, 60%)', 
                    textShadow: '0 0 10px hsl(279, 100%, 50%)' 
                  } : consultation.color === 'yellow' ? {
                    color: '#ec4899',
                    textShadow: '0 0 10px #e91e63'
                  } : {}
                } data-testid={`consultation-price-${index}`}>
                  {consultation.price}
                </div>
                <Link href={consultation.href}>
                  <button 
                    className="w-full py-3 rounded-lg font-semibold transition-all neon-button text-primary-foreground"
                    data-testid={`consultation-book-${index}`}>
                    {consultation.color === 'primary' ? t('bookVideoSession') :
                     consultation.color === 'secondary' ? t('bookAudioSession') :
                     consultation.color === 'accent' ? t('startChatSession') :
                     consultation.color === 'yellow' ? t('bookInPerson') :
                     t('bookHomeService')}
                  </button>
                </Link>
              </GlassCard>
            ))}
          </div>
        </div>
      </section>

      {/* All Services Section */}
      <section className="py-16 px-4 sm:px-6 lg:px-8" data-testid="all-services-section">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-4xl md:text-5xl font-bold mb-6 neon-text text-primary" data-testid="all-services-title">
              {t("allServices")}
            </h2>
            <p className="text-xl text-muted-foreground max-w-3xl mx-auto" data-testid="all-services-description">
              {t("allServicesDescription")}
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {/* Consultation Services */}
            <GlassCard className="p-8 text-center group" hover data-testid="service-consultations">
              <div className="w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-6 neon-border group-hover:scale-110 transition-transform" style={{ boxShadow: '0 0 20px hsl(42, 92%, 56%)' }}>
                <Video className="w-8 h-8 text-primary-foreground" />
              </div>
              <h3 className="text-xl font-bold mb-4 text-foreground">{t("liveConsultations")}</h3>
              <p className="text-muted-foreground mb-4 text-sm">{t("liveConsultationsDesc")}</p>
              <div className="text-lg font-semibold text-primary">{t("startingFrom")} ₹1,200</div>
            </GlassCard>

            {/* Astrology Courses */}
            <GlassCard className="p-8 text-center group" hover data-testid="service-courses">
              <div className="w-16 h-16 bg-secondary rounded-full flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform" style={{ boxShadow: '0 0 20px hsl(195, 100%, 50%)' }}>
                <Award className="w-8 h-8 text-secondary-foreground" />
              </div>
              <h3 className="text-xl font-bold mb-4 text-foreground">{t("vedicAstrologyCourses")}</h3>
              <p className="text-muted-foreground mb-4 text-sm">{t("vedicAstrologyCoursesDesc")}</p>
              <div className="text-lg font-semibold text-secondary">{t("beginnerToExpert")}</div>
            </GlassCard>

            {/* Cosmic Products */}
            <GlassCard className="p-8 text-center group" hover data-testid="service-products">
              <div className="w-16 h-16 bg-accent rounded-full flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform" style={{ boxShadow: '0 0 20px hsl(279, 100%, 50%)' }}>
                <Star className="w-8 h-8 text-white" />
              </div>
              <h3 className="text-xl font-bold mb-4 text-foreground">{t("cosmicRemedies")}</h3>
              <p className="text-muted-foreground mb-4 text-sm">{t("cosmicRemediesFullDesc")}</p>
              <div className="text-lg font-semibold text-primary neon-text">{t("authenticBlessed")}</div>
            </GlassCard>

            {/* Vedic Services */}
            <GlassCard className="p-8 text-center group" hover data-testid="service-vedic">
              <div className="w-16 h-16 bg-gradient-to-br from-orange-500 to-red-500 rounded-full flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform" style={{ boxShadow: '0 0 20px #f97316' }}>
                <Globe className="w-8 h-8 text-white" />
              </div>
              <h3 className="text-xl font-bold mb-4 text-foreground">{t("traditionalWisdom")}</h3>
              <p className="text-muted-foreground mb-4 text-sm">{t("palmistryFullDesc")}</p>
              <div className="text-lg font-semibold" style={{ color: '#f97316' }}>18+ {t("yearsExperience")}</div>
            </GlassCard>

            {/* Vastu Shastra */}
            <GlassCard className="p-8 text-center group" hover data-testid="service-vastu">
              <div className="w-16 h-16 bg-gradient-to-br from-green-500 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform" style={{ boxShadow: '0 0 20px #10b981' }}>
                <MapPin className="w-8 h-8 text-white" />
              </div>
              <h3 className="text-xl font-bold mb-4 text-foreground">{t("vedicVastu")}</h3>
              <p className="text-muted-foreground mb-4 text-sm">{t("vedicVastuFullDesc")}</p>
              <div className="text-lg font-semibold" style={{ color: '#10b981' }}>
                {t("sacredGeometry")}
              </div>
            </GlassCard>

            {/* Yoga & Meditation */}
            <GlassCard className="p-8 text-center group" hover data-testid="service-yoga">
              <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform" style={{ boxShadow: '0 0 20px #e91e63' }}>
                <Users className="w-8 h-8 text-white" />
              </div>
              <h3 className="text-xl font-bold mb-4 text-foreground">{t("yogaMeditation")}</h3>
              <p className="text-muted-foreground mb-4 text-sm">{t("yogaMeditationFullDesc")}</p>
              <div className="text-lg font-semibold" style={{ color: '#e91e63' }}>{t("mindBodyHarmony")}</div>
            </GlassCard>

            {/* Home Service */}
            <GlassCard className="p-8 text-center group" hover data-testid="service-home">
              <div className="w-16 h-16 bg-gradient-to-br from-yellow-500 to-amber-500 rounded-full flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform" style={{ boxShadow: '0 0 20px #fbbf24' }}>
                <HomeIcon className="w-8 h-8 text-white" />
              </div>
              <h3 className="text-xl font-bold mb-4 text-foreground">{t("homeService")}</h3>
              <p className="text-muted-foreground mb-4 text-sm">{t("homeServiceFullDesc")}</p>
              <div className="text-lg font-semibold" style={{ color: '#fbbf24' }}>{t("sacredHomeVisits")}</div>
            </GlassCard>
          </div>

          <div className="text-center mt-12">
            <Link href="/booking">
              <NeonButton size="lg" className="text-lg px-8 py-4" data-testid="explore-all-services-button">
                {t("allServices")}
              </NeonButton>
            </Link>
          </div>
        </div>
      </section>

      {/* Featured Courses */}
      {featuredCourses.length > 0 && (
        <section className="py-16 px-4 sm:px-6 lg:px-8" data-testid="featured-courses">
          <div className="max-w-7xl mx-auto">
            <div className="text-center mb-16">
              <h2 className="text-4xl md:text-5xl font-bold mb-6 neon-text text-primary">
                {t("courses")}
              </h2>
              <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
                {t("vedicAstrologyCoursesDesc")}
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              {featuredCourses.map((course, index) => (
                <GlassCard key={course.id} className="p-6" hover data-testid={`featured-course-${index}`}>
                  <Badge className="mb-4" variant={
                    course.level === 'beginner' ? 'default' :
                    course.level === 'intermediate' ? 'secondary' :
                    'destructive'
                  }>
                    {course.level}
                  </Badge>
                  <h3 className="text-xl font-bold mb-4 text-foreground" data-testid={`course-title-${index}`}>
                    {course.title}
                  </h3>
                  <p className="text-muted-foreground mb-6 text-sm" data-testid={`course-description-${index}`}>
                    {course.description}
                  </p>
                  <div className="text-2xl font-bold text-primary mb-6" data-testid={`course-price-${index}`}>
                    ₹{course.price}
                  </div>
                  <Link href="/courses">
                    <NeonButton size="sm" className="w-full" data-testid={`course-enroll-${index}`}>
                      {t("learnMore") || "Learn More"}
                    </NeonButton>
                  </Link>
                </GlassCard>
              ))}
            </div>

            <div className="text-center mt-12">
              <Link href="/courses">
                <NeonButton size="lg" className="text-lg px-8 py-4" data-testid="view-all-courses">
                  {t("viewAllCourses")}
                </NeonButton>
              </Link>
            </div>
          </div>
        </section>
      )}

      {/* Featured Products */}
      {featuredProducts.length > 0 && (
        <section className="py-16 px-4 sm:px-6 lg:px-8" data-testid="featured-products">
          <div className="max-w-7xl mx-auto">
            <div className="text-center mb-16">
              <h2 className="text-4xl md:text-5xl font-bold mb-6 neon-text text-primary">
                {t("cosmicRemedies")}
              </h2>
              <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
                {t("cosmicRemediesDescription")}
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
              {featuredProducts.map((product, index) => (
                <GlassCard key={product.id} className="p-6" hover data-testid={`featured-product-${index}`}>
                  <div className="w-full h-48 bg-muted rounded-lg mb-4 flex items-center justify-center">
                    <span className="text-muted-foreground">Product Image</span>
                  </div>
                  <h3 className="text-lg font-bold mb-2 text-foreground" data-testid={`product-title-${index}`}>
                    {product.name}
                  </h3>
                  <p className="text-muted-foreground mb-4 text-sm" data-testid={`product-description-${index}`}>
                    {product.description.substring(0, 80)}...
                  </p>
                  <div className="text-lg font-bold text-primary mb-4" data-testid={`product-price-${index}`}>
                    Starting ₹{product.price}
                  </div>
                  <Link href="/products">
                    <NeonButton size="sm" className="w-full" data-testid={`product-view-${index}`}>
                      {t("viewProduct")}
                    </NeonButton>
                  </Link>
                </GlassCard>
              ))}
            </div>

            <div className="text-center mt-12">
              <Link href="/products">
                <NeonButton size="lg" className="text-lg px-8 py-4" data-testid="view-all-products">
                  {t("browseAllProducts")}
                </NeonButton>
              </Link>
            </div>
          </div>
        </section>
      )}

      {/* Testimonials */}
      <section className="py-16 px-4 sm:px-6 lg:px-8" data-testid="testimonials-section">
        <div className="max-w-7xl mx-auto">
          <div className="text-center mb-16">
            <h2 className="text-4xl md:text-5xl font-bold mb-6 neon-text text-primary">
              Client Testimonials
            </h2>
            <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
              {t("discoverGuidance")}
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {testimonials.map((testimonial, index) => (
              <GlassCard key={index} className="p-8" data-testid={`testimonial-${index}`}>
                <div className="flex items-center mb-6">
                  <div className="w-12 h-12 bg-primary rounded-full flex items-center justify-center mr-4">
                    <span className="text-primary-foreground font-bold" data-testid={`testimonial-initials-${index}`}>
                      {testimonial.initials}
                    </span>
                  </div>
                  <div>
                    <div className="font-semibold text-foreground" data-testid={`testimonial-name-${index}`}>
                      {testimonial.name}
                    </div>
                    <div className="text-sm text-muted-foreground" data-testid={`testimonial-location-${index}`}>
                      {testimonial.location}
                    </div>
                  </div>
                </div>
                <div className="flex text-yellow-500 mb-4">
                  {Array.from({ length: testimonial.rating }).map((_, starIndex) => (
                    <Star key={starIndex} className="w-5 h-5 fill-current" />
                  ))}
                </div>
                <p className="text-muted-foreground" data-testid={`testimonial-content-${index}`}>
                  "{testimonial.content}"
                </p>
              </GlassCard>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-16 px-4 sm:px-6 lg:px-8" data-testid="cta-section">
        <div className="max-w-4xl mx-auto">
          <GlassCard className="p-8 md:p-12 text-center neon-border">
            <h3 className="text-3xl font-bold mb-4 text-primary" data-testid="cta-title">
              {t("readyToDiscover")}
            </h3>
            <p className="text-muted-foreground mb-8 text-lg" data-testid="cta-description">
              {t("bookPersonalizedConsultation")}
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Link href="/booking">
                <NeonButton size="lg" className="text-lg px-8 py-4" data-testid="cta-book-button">
                  {t("bookConsultation")}
                </NeonButton>
              </Link>
              <Link href="/courses">
                <NeonButton size="lg" className="text-lg px-8 py-4" data-testid="cta-learn-button">
                  Start Learning Astrology
                </NeonButton>
              </Link>
            </div>
          </GlassCard>
        </div>
      </section>

      {/* Floating Action Button */}
      <Link href="/booking">
        <button 
          className="fixed bottom-6 right-6 z-50 neon-button w-16 h-16 rounded-full shadow-2xl hover:scale-110 transition-transform"
          title={t("quickBooking")}
          data-testid="floating-book-button"
        >
          <Phone className="w-8 h-8 text-primary-foreground mx-auto" />
        </button>
      </Link>
    </div>
  );
}



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/pages/booking.tsx
================================================================================
// File: AstroOracle/client/src/pages/booking.tsx
// This is the new, enhanced multi-step wizard version with a global phone input.

import React, { useState, useMemo } from "react";
import { useMutation } from "@tanstack/react-query";
import { useLocation, Link } from "wouter";
import { useForm, Controller, FormProvider } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";

import 'react-phone-number-input/style.css'
import PhoneInputWithCountrySelect, { isValidPhoneNumber } from 'react-phone-number-input/react-hook-form'

import { GlassCard } from "@/components/ui/glass-card";
import { NeonButton } from "@/components/ui/neon-button";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Progress } from "@/components/ui/progress";
import { Calendar as CalendarIcon, Clock, ArrowLeft, Check, CheckCircle, Loader2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { useLanguage } from "@/contexts/LanguageContext";
import { consultationTopics, consultationTypes, consultationPlans } from "@/data/consultationData";
import { cn } from "@/lib/utils";

// Zod schema for validation
const bookingSchema = z.object({
  fullName: z.string().min(2, { message: "Full name is required" }),
  email: z.string().email({ message: "Invalid email address" }).optional().or(z.literal("")),
  phoneNumber: z.string().refine(isValidPhoneNumber, { message: "Invalid phone number" }),
  dateOfBirth: z.string().optional(),
  timeOfBirth: z.string().optional(),
  placeOfBirth: z.string().optional(),
  consultationType: z.string({ required_error: "Please select a consultation type" }),
  plan: z.string().min(1, { message: "Please select a plan or topic" }),
  selectedTopics: z.array(z.string()).optional(),
  scheduledDate: z.date({ required_error: "Please select a date" }),
  scheduledTime: z.string({ required_error: "Please select a time" }),
  language: z.string().default("en"),
  notes: z.string().optional(),
  agreedToTerms: z.boolean().refine(val => val === true, {
    message: "You must agree to the terms",
  }),
  duration: z.number(),
  price: z.number(),
});

type BookingFormData = z.infer<typeof bookingSchema>;

const TOTAL_STEPS = 4;

export default function BookingPage() {
  const { t } = useLanguage();
  const [, setLocation] = useLocation();
  const [currentStep, setCurrentStep] = useState(1);
  const { toast } = useToast();

  const methods = useForm<BookingFormData>({
    resolver: zodResolver(bookingSchema),
    mode: "onChange",
  });

  const { watch, setValue, trigger, handleSubmit, control } = methods;
  const formData = watch();

  const currentConsultationType = useMemo(
    () => consultationTypes.find(c => c.type === formData.consultationType),
    [formData.consultationType]
  );
  
  const createConsultationMutation = useMutation({
    mutationFn: (consultationData: any) => apiRequest("POST", "/api/consultations", consultationData),
    onSuccess: () => {
      toast({ title: t("booking.toast.success.title"), description: t("booking.toast.success.desc") });
      setLocation("/checkout");
    },
    onError: (error: any) => {
      toast({ title: t("booking.toast.error.title"), description: error.message || t("booking.toast.error.desc"), variant: "destructive" });
    },
  });

  const onSubmit = (data: BookingFormData) => {
    createConsultationMutation.mutate(data);
  };

  const handleNextStep = async () => {
    let fieldsToValidate: (keyof BookingFormData)[] | keyof BookingFormData = [];
    if (currentStep === 1) fieldsToValidate = 'consultationType';
    if (currentStep === 2) fieldsToValidate = 'plan';
    if (currentStep === 3) fieldsToValidate = ['fullName', 'phoneNumber'];
    
    const isValid = await trigger(fieldsToValidate);
    if (isValid) {
      setCurrentStep(prev => prev + 1);
    }
  };
  const handlePrevStep = () => setCurrentStep(prev => prev - 1);
  
  const progressValue = useMemo(() => ((currentStep - 1) / (TOTAL_STEPS - 1)) * 100, [currentStep]);

  return (
    <FormProvider {...methods}>
      <div className="min-h-screen pt-24 pb-16" data-testid="booking-page">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
          <GlassCard className="p-8 md:p-12">
            {currentStep > 1 && (
              <Button variant="ghost" onClick={handlePrevStep} className="mb-4 text-muted-foreground absolute top-6 left-6">
                <ArrowLeft className="w-4 h-4 mr-2" />
                {t('booking.backButton')}
              </Button>
            )}
            
            <div className="text-center mb-8">
              <h1 className="text-4xl font-bold mb-4 neon-text text-primary">{t('booking.mainTitle')}</h1>
              <p className="text-xl text-muted-foreground">{t('booking.mainSubtitle')}</p>
            </div>
            <div className="w-full max-w-2xl mx-auto mb-12">
              <StepIndicator currentStep={currentStep} totalSteps={TOTAL_STEPS} />
              <Progress value={progressValue} className="mt-4" />
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              <div className="lg:col-span-2">
                <StepContent
                  step={currentStep}
                  control={control}
                  setValue={setValue}
                  watch={watch}
                  currentConsultationType={currentConsultationType}
                />
              </div>
              <div className="lg:col-span-1">
                <BookingSummary />
              </div>
            </div>

            <div className="flex justify-between items-center mt-12 pt-8 border-t border-primary/20">
              <NeonButton type="button" variant="outline" onClick={handlePrevStep} disabled={currentStep === 1}>
                {t('booking.backButton')}
              </NeonButton>
              {currentStep < TOTAL_STEPS ? (
                <NeonButton type="button" onClick={handleNextStep}>
                  {t('booking.nextButton')}
                </NeonButton>
              ) : (
                <NeonButton type="button" onClick={handleSubmit(onSubmit)} disabled={createConsultationMutation.isPending}>
                  {createConsultationMutation.isPending ? <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> {t('booking.processingButton')}</> : t('booking.submitButton')}
                </NeonButton>
              )}
            </div>
          </GlassCard>
        </div>
      </div>
    </FormProvider>
  );
}

// --- Helper Components ---

const StepIndicator = ({ currentStep, totalSteps }: { currentStep: number, totalSteps: number }) => {
  const { t } = useLanguage();
  const steps = [
      t('booking.steps.type'),
      t('booking.steps.details'),
      t('booking.steps.personal'),
      t('booking.steps.schedule')
  ];
  return (
    <div className="flex items-center">
      {steps.map((label, index) => {
        const stepNumber = index + 1;
        const isActive = stepNumber <= currentStep;
        return (
          <React.Fragment key={stepNumber}>
            <div className="flex flex-col items-center text-center w-24">
              <div className={cn("w-10 h-10 rounded-full flex items-center justify-center border-2 transition-all duration-300", isActive ? "bg-primary border-primary neon-border" : "bg-muted border-border")}>
                {stepNumber < currentStep ? <Check className="w-6 h-6 text-primary-foreground" /> : <span className={cn("font-bold", isActive ? "text-primary-foreground" : "text-muted-foreground")}>{stepNumber}</span>}
              </div>
              <p className={cn("text-xs mt-2", isActive ? "text-foreground" : "text-muted-foreground")}>{label}</p>
            </div>
            {stepNumber < totalSteps && <div className={cn("flex-1 h-1 mx-2 rounded", isActive ? "bg-primary" : "bg-border")} />}
          </React.Fragment>
        );
      })}
    </div>
  );
};

const StepContent = ({ step, control, setValue, watch, currentConsultationType }: any) => {
  const formData = watch();

  const handleTopicToggle = (topicValue: string) => {
    const isTopicBased = watch("consultationType") === "topic-based";
    const selectedPlan = currentConsultationType?.plans.find((p: any) => p.isPerTopic);

    if (isTopicBased && selectedPlan) {
      const currentTopics = watch("selectedTopics") || [];
      const newSelectedTopics = currentTopics.includes(topicValue)
        ? currentTopics.filter((t: string) => t !== topicValue)
        : [...currentTopics, topicValue];
      
      setValue("selectedTopics", newSelectedTopics);
      setValue("duration", newSelectedTopics.length * selectedPlan.duration);
      setValue("price", newSelectedTopics.length * selectedPlan.price);
      setValue("plan", newSelectedTopics.length > 0 ? selectedPlan.nameKey : "");
    } else {
      setValue("selectedTopics", [topicValue]);
    }
  };

  const handlePlanSelect = (plan: any) => {
    setValue("plan", plan.nameKey);
    setValue("duration", plan.duration);
    setValue("price", plan.price);
  };
  
  switch (step) {
    case 1:
      return <ConsultationTypeStep onSelect={(type) => setValue("consultationType", type, { shouldValidate: true })} />;
    case 2:
      return <TopicAndPlanStep formData={formData} currentConsultationType={currentConsultationType} onTopicToggle={handleTopicToggle} onPlanSelect={handlePlanSelect} />;
    case 3:
      return <PersonalInformationStep control={control} />;
    case 4:
      return <ScheduleStep control={control} />;
    default: return null;
  }
};

const ConsultationTypeStep = ({ onSelect }: { onSelect: (type: string) => void }) => {
  const { t } = useLanguage();
  return (
    <div className="space-y-6">
      <h3 className="text-2xl font-semibold text-center text-foreground">{t('booking.typeSelection.title')}</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {consultationTypes.map((c) => (
          <GlassCard key={c.type} className="p-6 cursor-pointer transition-all hover:bg-primary/10 hover:neon-border" onClick={() => onSelect(c.type)}>
            <c.icon className="w-8 h-8 mx-auto mb-4 text-primary" />
            <h4 className="font-semibold text-center mb-2 text-primary">{t(c.titleKey)}</h4>
            <p className="text-xs text-muted-foreground text-center">{t(c.descriptionKey)}</p>
             {c.noteKey && <p className="text-xs text-yellow-500 mt-2 text-center">{t(c.noteKey)}</p>}
          </GlassCard>
        ))}
      </div>
    </div>
  );
};

const TopicAndPlanStep = ({ formData, currentConsultationType, onTopicToggle, onPlanSelect }: any) => {
  const { t } = useLanguage();
  const isTopicBased = formData.consultationType === "topic-based";

  return (
    <div className="space-y-12">
      <div>
        <h3 className="text-2xl font-semibold text-center text-foreground mb-4">{t(isTopicBased ? 'booking.topicSelection.titleMulti' : 'booking.topicSelection.titleSingle')}</h3>
        <p className="text-center text-muted-foreground mb-6">{t(isTopicBased ? 'booking.topicSelection.subtitleMulti' : 'booking.topicSelection.subtitleSingle')}</p>
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mt-4">
          {consultationTopics.map(topic => {
            const isSelected = formData.selectedTopics.includes(topic.value);
            return (
              <GlassCard key={topic.value} onClick={() => onTopicToggle(topic.value)} className={cn("p-4 cursor-pointer text-center relative transition-all duration-300 transform hover:scale-105", isSelected && "neon-border bg-primary/10 scale-105")}>
                {isSelected && !isTopicBased && <CheckCircle className="absolute top-2 right-2 w-5 h-5 text-primary" />}
                 {isTopicBased && (
                    <Checkbox checked={isSelected} className="absolute top-2 right-2" />
                 )}
                <div className="text-3xl mb-2">{topic.icon}</div>
                <h5 className="font-semibold text-sm">{t(topic.labelKey)}</h5>
                {isTopicBased && <p className="text-xs text-primary mt-1">₹100 • 6 min</p>}
              </GlassCard>
            );
          })}
        </div>
      </div>
      {currentConsultationType && !isTopicBased && (
        <div>
          <h3 className="text-2xl font-semibold text-center text-foreground mb-4">{t('booking.planSelection.title')}</h3>
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
            {currentConsultationType.plans.map((plan: any) => (
              <GlassCard key={plan.nameKey} onClick={() => onPlanSelect(plan)} className={cn("p-4 cursor-pointer text-center hover:bg-primary/10 hover:neon-border transition-all transform hover:scale-105", formData.plan === plan.nameKey && "neon-border bg-primary/10 scale-105")}>
                <h5 className="font-semibold mb-2">{t(plan.nameKey)}</h5>
                <div className="text-xl font-bold neon-text text-primary">₹{plan.price}</div>
                <div className="text-sm text-muted-foreground">{plan.duration} {t('booking.minutes')}</div>
              </GlassCard>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

const PersonalInformationStep = ({ control }: { control: any }) => {
  const { t } = useLanguage();
  const { formState: { errors } } = useForm();
  return (
    <div className="space-y-6 max-w-3xl mx-auto">
      <h3 className="text-2xl font-semibold text-center text-foreground">{t('booking.personalInfo.title')}</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Controller name="fullName" control={control} render={({ field }) => (<div><Input {...field} placeholder={t('booking.personalInfo.fullNamePlaceholder')} className="form-input" /><p className="text-red-400 text-xs mt-1">{errors.fullName?.message as string}</p></div>)} />
        <Controller name="email" control={control} render={({ field }) => (<div><Input {...field} type="email" placeholder={t('booking.personalInfo.emailPlaceholder')} className="form-input" /><p className="text-red-400 text-xs mt-1">{errors.email?.message as string}</p></div>)} />
      </div>
      <Controller name="phoneNumber" control={control} render={({ field }) => (
        <div>
          <PhoneInputWithCountrySelect
            international
            defaultCountry="IN"
            {...field}
            className="form-input"
          />
          <p className="text-red-400 text-xs mt-1">{errors.phoneNumber?.message as string}</p>
        </div>
      )} />
      <div>
        <h4 className="text-lg font-semibold text-foreground mt-6 mb-4">{t("booking.birthDetailsTitle")}</h4>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <Controller name="dateOfBirth" control={control} render={({ field }) => (<Input {...field} type="date" className="form-input" />)} />
          <Controller name="timeOfBirth" control={control} render={({ field }) => (<Input {...field} type="time" className="form-input" />)} />
        </div>
        <Controller name="placeOfBirth" control={control} render={({ field }) => (<Input {...field} placeholder={t('booking.personalInfo.pobPlaceholder')} className="form-input mt-6" />)} />
      </div>
    </div>
  );
};

const ScheduleStep = ({ control }: { control: any }) => {
    const { t } = useLanguage();
    const { watch, formState: { errors } } = useForm();
    const timeSlots = ["10:00", "11:00", "12:00", "15:00", "16:00", "19:00", "20:00"]; // Placeholder
    const selectedDate = watch("scheduledDate");

    return (
        <div className="space-y-8 max-w-3xl mx-auto">
            <div>
              <h3 className="text-2xl font-semibold text-center text-foreground mb-6">{t('booking.schedule.title')}</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                 <Controller name="scheduledDate" control={control} render={({ field }) => (
                     <Popover>
                        <PopoverTrigger asChild><Button variant="outline" className="form-input justify-start text-left font-normal w-full"><CalendarIcon className="mr-2 h-4 w-4" />{field.value ? field.value.toDateString() : t('booking.schedule.datePlaceholder')}</Button></PopoverTrigger>
                        <PopoverContent className="glass-card w-auto p-0"><Calendar mode="single" selected={field.value} onSelect={field.onChange} disabled={(date) => date < new Date(new Date().setDate(new Date().getDate() - 1))} initialFocus /></PopoverContent>
                     </Popover>
                 )} />
                 <Controller name="scheduledTime" control={control} render={({ field }) => (
                     <Select onValueChange={field.onChange} defaultValue={field.value} disabled={!selectedDate}>
                        <SelectTrigger className="form-input"><Clock className="mr-2 h-4 w-4" /> <SelectValue placeholder={t('booking.schedule.timePlaceholder')} /></SelectTrigger>
                        <SelectContent className="glass-card">{timeSlots.map(time => <SelectItem key={time} value={time}>{time}</SelectItem>)}</SelectContent>
                     </Select>
                 )} />
              </div>
              
              <Controller name="language" control={control} render={({ field }) => (
                <div>
                  <label className="block text-sm font-medium text-foreground mb-2">{t('booking.languageLabel')}</label>
                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                    <SelectTrigger className="form-input"><SelectValue /></SelectTrigger>
                    <SelectContent className="glass-card">
                        <SelectItem value="en">{t("booking.langEnglish")}</SelectItem>
                        <SelectItem value="hi">{t("booking.langHindi")}</SelectItem>
                        <SelectItem value="bn">{t("booking.langBengali")}</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              )} />
              
              <Controller name="notes" control={control} render={({ field }) => (
                <div className="mt-6">
                  <label className="block text-sm font-medium text-foreground mb-2">{t("booking.notesLabel")}</label>
                  <Textarea {...field} placeholder={t('booking.schedule.notesPlaceholder')} className="form-input min-h-[100px]" />
                </div>
              )} />
            </div>

            <Controller name="agreedToTerms" control={control} render={({ field }) => (
                <div className="glass p-6 rounded-lg flex items-start space-x-3">
                    <Checkbox id="terms" checked={field.value} onCheckedChange={field.onChange} />
                    <div className="grid gap-1.5 leading-none">
                      <label htmlFor="terms" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                        {t('booking.terms.agreeText')}{" "}
                        <Link href="/terms" className="text-primary hover:underline">{t('booking.terms.termsLink')}</Link>,{" "}
                        <Link href="/privacy" className="text-primary hover:underline">{t('booking.terms.privacyLink')}</Link>
                        {t('booking.terms.refundText')}
                      </label>
                       {errors.agreedToTerms && <p className="text-red-400 text-xs mt-1">{errors.agreedToTerms.message as string}</p>}
                    </div>
                </div>
            )} />
        </div>
    );
};


const BookingSummary = () => {
  const { watch } = useForm();
  const { t } = useLanguage();
  const formData = watch();

  if (!formData.consultationType) return null;
  
  const selectedType = consultationTypes.find(c => c.type === formData.consultationType);

  return (
    <GlassCard className="p-6 sticky top-24">
      <h4 className="text-lg font-semibold text-foreground mb-4">{t('booking.summary.title')}</h4>
      <div className="space-y-2 text-sm">
        {formData.consultationType && (
          <div className="flex justify-between"><span>{t('booking.summary.type')}:</span><span className="font-semibold">{t(selectedType?.titleKey || "")}</span></div>
        )}
        {formData.plan && (
           <div className="flex justify-between"><span>{t('booking.summary.plan')}:</span><span className="font-semibold">{t(formData.plan)}</span></div>
        )}
        {formData.duration > 0 && (
           <div className="flex justify-between"><span>{t('booking.summary.duration')}:</span><span className="font-semibold">{formData.duration} {t('booking.minutes')}</span></div>
        )}
        {formData.scheduledDate && (
             <div className="flex justify-between"><span>{t('booking.summary.dateTime')}:</span><span className="font-semibold text-right">{formData.scheduledDate.toDateString()} at {formData.scheduledTime || "Not set"}</span></div>
        )}
        <hr className="border-primary/20" />
        <div className="flex justify-between text-lg font-bold">
          <span>{t('booking.summary.total')}:</span>
          <span className="text-primary neon-text">₹{formData.price || 0}</span>
        </div>
      </div>
    </GlassCard>
  );
};



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/pages/courses.tsx
================================================================================
import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Link } from "wouter";
import { GlassCard } from "@/components/ui/glass-card";
import { NeonButton } from "@/components/ui/neon-button";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { BookOpen, Users, Clock, Star, Search, Filter, Play, ChevronRight } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
// AutoTranslate import removed for fast loading
import { useLanguage } from "@/contexts/LanguageContext";

export default function Courses() {
  const { t } = useLanguage();
  const [searchTerm, setSearchTerm] = useState("");
  const [levelFilter, setLevelFilter] = useState("all");
  const [languageFilter, setLanguageFilter] = useState("all");
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const { data: courses = [], isLoading } = useQuery({
    queryKey: ["/api/courses"],
  });

  const enrollMutation = useMutation({
    mutationFn: async (courseId: string) => {
      return apiRequest("POST", `/api/courses/${courseId}/enroll`, {});
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/courses"] });
      toast({
        title: "Enrollment Successful!",
        description: "You have been enrolled in the course successfully.",
      });
    },
    onError: (error: any) => {
      toast({
        title: t("enrollmentFailed"),
        description: error.message || t("failedToEnrollInCourse"),
        variant: "destructive",
      });
    },
  });

  if (isLoading) {
    return (
      <div className="min-h-screen pt-16 flex items-center justify-center">
        <div className="animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full" />
      </div>
    );
  }

  const filteredCourses = Array.isArray(courses) ? courses.filter((course: any) => {
    const matchesSearch = course.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         course.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesLevel = levelFilter === "all" || course.level === levelFilter;
    const matchesLanguage = languageFilter === "all" || course.teachingLanguage === languageFilter;
    return matchesSearch && matchesLevel && matchesLanguage;
  }) : [];

  const levelColors = {
    beginner: { bg: "bg-green-500/20", text: "text-green-500", border: "border-green-500/30" },
    intermediate: { bg: "bg-yellow-500/20", text: "text-yellow-500", border: "border-yellow-500/30" },
    expert: { bg: "bg-red-500/20", text: "text-red-500", border: "border-red-500/30" },
  };

  const handleEnroll = (courseId: string) => {
    if (!localStorage.getItem("token")) {
      toast({
        title: t("loginRequired"),
        description: t("pleaseLoginToEnrollInCourses"),
        variant: "destructive",
      });
      return;
    }

    enrollMutation.mutate(courseId);
  };

  return (
    <div className="min-h-screen pt-16 pb-16" data-testid="courses-page">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="text-center mb-16">
          <h1 className="text-5xl md:text-6xl font-bold mb-6 neon-text text-primary animate-float" data-testid="courses-title">
            "Astrology Courses"
          </h1>
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto mb-8">
            "Master the ancient wisdom of Vedic astrology with comprehensive courses designed for all levels. Learn from expert astrologer Arup Shastri with 18+ years of experience."
          </p>
        </div>

        {/* Search and Filters */}
        <GlassCard className="p-6 mb-8">
          <div className="flex flex-col lg:flex-row gap-4 items-center">
            <div className="relative flex-1 w-full">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
              <Input
                placeholder={t("searchCoursesByTitle")}
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 form-input w-full"
                data-testid="search-courses"
              />
            </div>
            
            <div className="flex gap-4 w-full lg:w-auto">
              <Select value={levelFilter} onValueChange={setLevelFilter}>
                <SelectTrigger className="form-input w-full lg:w-40">
                  <Filter className="w-4 h-4 mr-2" />
                  <SelectValue placeholder={t("level")} />
                </SelectTrigger>
                <SelectContent className="glass-card">
                  <SelectItem value="all">{t("allLevels")}</SelectItem>
                  <SelectItem value="beginner">{t("beginner")}</SelectItem>
                  <SelectItem value="intermediate">{t("intermediate")}</SelectItem>
                  <SelectItem value="expert">{t("expert")}</SelectItem>
                </SelectContent>
              </Select>

              <Select value={languageFilter} onValueChange={setLanguageFilter}>
                <SelectTrigger className="form-input w-full lg:w-40">
                  <SelectValue placeholder={t("language")} />
                </SelectTrigger>
                <SelectContent className="glass-card">
                  <SelectItem value="all">{t("allLanguages")}</SelectItem>
                  <SelectItem value="en">{t("english")}</SelectItem>
                  <SelectItem value="hi">{t("hindi")}</SelectItem>
                  <SelectItem value="bn">{t("bengali")}</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </GlassCard>

        {/* Course Statistics */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-12">
          <GlassCard className="p-6 text-center">
            <BookOpen className="w-8 h-8 text-primary neon-border rounded-full p-2 mx-auto mb-3" style={{ 
              filter: 'drop-shadow(0 0 8px hsl(42, 92%, 56%))',
              background: 'rgba(255, 193, 7, 0.1)'
            }} />
            <div className="text-2xl font-bold text-primary mb-2">{Array.isArray(courses) ? courses.length : 0}</div>
            <div className="text-sm text-muted-foreground">{t("totalCourses")}</div>
          </GlassCard>
          <GlassCard className="p-6 text-center">
            <Users className="w-8 h-8 text-secondary neon-border rounded-full p-2 mx-auto mb-3" style={{ 
              filter: 'drop-shadow(0 0 8px hsl(195, 100%, 50%))',
              background: 'rgba(0, 191, 255, 0.1)'
            }} />
            <div className="text-2xl font-bold text-secondary mb-2">
              {Array.isArray(courses) ? courses.reduce((total: number, course: any) => total + (course.currentStudents || 0), 0) : 0}
            </div>
            <div className="text-sm text-muted-foreground">{t("activeStudents")}</div>
          </GlassCard>
          <GlassCard className="p-6 text-center">
            <Clock className="w-8 h-8 text-primary neon-border rounded-full p-2 mx-auto mb-3" style={{ 
              color: 'hsl(42, 92%, 56%)', 
              filter: 'drop-shadow(0 0 8px hsl(42, 92%, 56%))',
              background: 'rgba(255, 193, 7, 0.1)'
            }} />
            <div className="text-2xl font-bold text-primary neon-text mb-2" style={{ 
              color: 'hsl(42, 92%, 56%)', 
              textShadow: '0 0 10px hsl(42, 92%, 56%)' 
            }}>50+</div>
            <div className="text-sm text-muted-foreground">{t("hoursOfContent")}</div>
          </GlassCard>
          <GlassCard className="p-6 text-center">
            <Star className="w-8 h-8 text-yellow-500 neon-border rounded-full p-2 mx-auto mb-3" style={{ 
              filter: 'drop-shadow(0 0 8px #fbbf24)',
              background: 'rgba(251, 191, 36, 0.1)'
            }} />
            <div className="text-2xl font-bold text-yellow-500 mb-2">4.9</div>
            <div className="text-sm text-muted-foreground">{t("averageRating")}</div>
          </GlassCard>
        </div>

        {/* Courses Grid */}
        {!Array.isArray(filteredCourses) || filteredCourses.length === 0 ? (
          <GlassCard className="p-12 text-center">
            <BookOpen className="w-16 h-16 text-muted-foreground mx-auto mb-6" />
            <h3 className="text-2xl font-bold text-foreground mb-4">{t("noCoursesFound")}</h3>
            <p className="text-muted-foreground mb-6">
              {searchTerm ? t("tryAdjustingSearchCriteria") : t("coursesAvailableSoon")}
            </p>
            <Button onClick={() => {
              setSearchTerm("");
              setLevelFilter("all");
              setLanguageFilter("all");
            }} className="glass">
              Clear Filters
            </Button>
          </GlassCard>
        ) : (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {filteredCourses.map((course: any, index: number) => {
              const levelStyle = levelColors[course.level as keyof typeof levelColors];
              const progressPercentage = (course.currentStudents / course.maxStudents) * 100;
              
              return (
                <GlassCard 
                  key={course.id} 
                  className="p-0 overflow-hidden hover:scale-105 transition-transform duration-300"
                  data-testid={`course-card-${index}`}
                >
                  {/* Course Image/Video Placeholder */}
                  <div className="relative h-48 bg-gradient-to-br from-primary/20 to-secondary/20 flex items-center justify-center">
                    <Play className="w-12 h-12 text-primary/60" />
                    <div className="absolute top-4 left-4">
                      <Badge className={`${levelStyle.bg} ${levelStyle.text} ${levelStyle.border}`}>
                        {course.level}
                      </Badge>
                    </div>
                    <div className="absolute top-4 right-4">
                      <Badge variant="outline" className="glass text-xs">
                        {course.teachingLanguage?.toUpperCase()}
                      </Badge>
                    </div>
                  </div>

                  <div className="p-6">
                    {/* Course Title & Description */}
                    <h3 className="text-xl font-bold mb-3 text-foreground" data-testid={`course-title-${index}`}>
                      <AutoTranslate text={course.title} />
                    </h3>
                    <p className="text-muted-foreground mb-4 text-sm line-clamp-3" data-testid={`course-description-${index}`}>
                      <AutoTranslate text={course.description} />
                    </p>

                    {/* Course Info */}
                    <div className="space-y-3 mb-6">
                      <div className="flex items-center justify-between text-sm">
                        <div className="flex items-center space-x-2">
                          <Users className="w-4 h-4 text-muted-foreground" />
                          <span className="text-muted-foreground">
                            {course.currentStudents}/{course.maxStudents} students
                          </span>
                        </div>
                        <div className="flex items-center space-x-1">
                          {Array.from({ length: 5 }).map((_, i) => (
                            <Star key={i} className="w-3 h-3 fill-yellow-500 text-yellow-500" />
                          ))}
                          <span className="text-xs text-muted-foreground ml-1">(4.9)</span>
                        </div>
                      </div>

                      {/* Enrollment Progress */}
                      <div className="space-y-1">
                        <div className="flex justify-between text-xs text-muted-foreground">
                          <span>Enrollment Progress</span>
                          <span>{Math.round(progressPercentage)}%</span>
                        </div>
                        <div className="w-full bg-muted/30 rounded-full h-2">
                          <div 
                            className="bg-gradient-to-r from-primary to-secondary h-2 rounded-full transition-all duration-300"
                            style={{ width: `${progressPercentage}%` }}
                          />
                        </div>
                      </div>

                      {/* Course Features */}
                      <div className="flex flex-wrap gap-2">
                        <Badge variant="outline" className="text-xs">
                          <Clock className="w-3 h-3 mr-1" />
                          Self-paced
                        </Badge>
                        <Badge variant="outline" className="text-xs">
                          Certificate
                        </Badge>
                        <Badge variant="outline" className="text-xs">
                          Lifetime Access
                        </Badge>
                      </div>
                    </div>

                    {/* Modules Preview */}
                    {course.modules && course.modules.length > 0 && (
                      <div className="mb-6">
                        <h4 className="text-sm font-semibold text-foreground mb-2">What you'll learn:</h4>
                        <ul className="space-y-1 text-xs text-muted-foreground">
                          {course.modules.slice(0, 3).map((module: any, moduleIndex: number) => (
                            <li key={moduleIndex} className="flex items-center">
                              <ChevronRight className="w-3 h-3 mr-1 text-primary" />
                              {module.title}
                            </li>
                          ))}
                          {course.modules.length > 3 && (
                            <li className="text-primary text-xs">
                              +{course.modules.length - 3} more modules
                            </li>
                          )}
                        </ul>
                      </div>
                    )}

                    {/* Price & Enroll Button */}
                    <div className="flex items-center justify-between">
                      <div>
                        <div className="text-2xl font-bold text-primary" data-testid={`course-price-${index}`}>
                          ₹{parseFloat(course.price).toLocaleString()}
                        </div>
                        <div className="text-xs text-muted-foreground">One-time payment</div>
                      </div>
                      
                      {course.currentStudents >= course.maxStudents ? (
                        <Button disabled className="opacity-50">
                          Course Full
                        </Button>
                      ) : (
                        <NeonButton
                          onClick={() => handleEnroll(course.id)}
                          disabled={enrollMutation.isPending}
                          size="sm"
                          data-testid={`enroll-button-${index}`}
                        >
                          {enrollMutation.isPending ? t("enrolling") : t("enrollNow")}
                        </NeonButton>
                      )}
                    </div>
                  </div>
                </GlassCard>
              );
            })}
          </div>
        )}

        {/* Call to Action */}
        <div className="mt-16">
          <GlassCard className="p-8 md:p-12 text-center neon-border">
            <h3 className="text-3xl font-bold mb-4 text-primary">
              Ready to Begin Your Astrological Journey?
            </h3>
            <p className="text-muted-foreground mb-8 text-lg max-w-2xl mx-auto">
              Join thousands of students worldwide who have transformed their understanding of the cosmos 
              with expert guidance from Astrologer Arup Shastri.
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Link href="/booking">
                <NeonButton size="lg" className="text-lg px-8 py-4">
                  Book Personal Consultation
                </NeonButton>
              </Link>
              <Link href="/products">
                <Button variant="outline" size="lg" className="glass text-lg px-8 py-4">
                  Explore Remedies
                </Button>
              </Link>
            </div>
          </GlassCard>
        </div>
      </div>
    </div>
  );
}



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/pages/home-tuition.tsx
================================================================================
import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  BookOpen, 
  Users, 
  User, 
  Clock, 
  MapPin, 
  Star,
  Calendar,
  IndianRupee,
  ChevronRight,
  GraduationCap,
  Home
} from "lucide-react";
import { Link } from "wouter";
import { motion } from "framer-motion";


interface HomeTuitionCourse {
  id: string;
  title: string;
  description: string;
  shortDescription: string;
  oneToOnePrice: string;
  groupLearningPrice: string;
  maxGroupSize: number;
  duration: string;
  level: string;
  curriculum: Array<{
    module: string;
    topics: string[];
    duration: string;
  }>;
  prerequisites: string;
  availableSeats: number;
  occupiedSeats: number;
  isActive: boolean;
  applicationDeadline: string | null;
  courseStartDate: string | null;
  courseEndDate: string | null;
  coverageArea: string;
  specialInstructions: string | null;
}

export default function HomeTuition() {
  const [selectedTab, setSelectedTab] = useState("courses");

  const { data: courses = [], isLoading } = useQuery({
    queryKey: ["/api/home-tuition/courses"],
  });

  const getLevelColor = (level: string) => {
    switch (level) {
      case "beginner":
        return "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300";
      case "intermediate":
        return "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300";
      case "advanced":
        return "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300";
      default:
        return "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300";
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-black relative overflow-hidden">
        {/* Cosmic Background */}
        <div className="absolute inset-0 bg-gradient-to-br from-purple-900/20 via-black to-blue-900/20" />
        
        <div className="relative z-10 pt-24 px-6 pb-6">
          <div className="max-w-7xl mx-auto">
            <div className="text-center mb-8">
              <div className="animate-pulse">
                <div className="h-8 bg-gray-300 rounded w-64 mx-auto mb-4"></div>
                <div className="h-4 bg-gray-300 rounded w-96 mx-auto"></div>
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {[1, 2, 3].map((i) => (
                <div key={i} className="animate-pulse">
                  <div className="h-96 bg-gray-300 rounded-lg"></div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-black relative overflow-hidden">
      {/* Cosmic Background Animation */}
      <div className="absolute inset-0 bg-gradient-to-br from-purple-900/20 via-black to-blue-900/20" />
      <div className="absolute inset-0">
        {/* Animated stars */}
        {[...Array(50)].map((_, i) => (
          <motion.div
            key={i}
            className="absolute w-1 h-1 bg-white rounded-full"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
            }}
            animate={{
              opacity: [0.3, 1, 0.3],
              scale: [0.5, 1.2, 0.5],
            }}
            transition={{
              duration: Math.random() * 3 + 2,
              repeat: Infinity,
              delay: Math.random() * 2,
            }}
          />
        ))}
      </div>

      <div className="relative z-10 pt-24 px-6 pb-6">
        <div className="max-w-7xl mx-auto">
          {/* Header */}
          <motion.div 
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            className="text-center mb-12"
          >
            <h1 className="text-4xl md:text-6xl font-bold mb-6">
              <span className="bg-gradient-to-r from-yellow-400 via-yellow-300 to-yellow-500 bg-clip-text text-transparent drop-shadow-[0_0_30px_rgba(255,215,0,0.5)]">
                "Home Tuition"
              </span>
            </h1>
            <p className="text-lg md:text-xl text-gray-300 max-w-3xl mx-auto leading-relaxed">
              Personalized astrology learning at your home with{" "}
              <span className="text-yellow-400 font-semibold">Astrologer Arup Shastri</span>. 
              Choose between one-to-one sessions or group learning for a comprehensive understanding of Vedic astrology.
            </p>
          </motion.div>

          {/* Features Overview */}
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
            className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-12"
          >
            {[
              { icon: Home, title: "At Your Home", desc: "Comfortable learning environment" },
              { icon: User, title: "One-to-One", desc: "Personalized attention" },
              { icon: Users, title: "Group Learning", desc: "Learn with peers" },
              { icon: GraduationCap, title: "Expert Guidance", desc: "18+ years experience" },
            ].map((feature, index) => (
              <Card key={index} className="bg-white/10 backdrop-blur-md border-white/20 hover:bg-white/15 transition-all duration-300">
                <CardContent className="p-6 text-center">
                  <feature.icon className="h-8 w-8 text-yellow-400 mx-auto mb-3" />
                  <h3 className="font-semibold text-white mb-2">{feature.title}</h3>
                  <p className="text-sm text-gray-300">{feature.desc}</p>
                </CardContent>
              </Card>
            ))}
          </motion.div>

          {/* Course Tabs */}
          <Tabs value={selectedTab} onValueChange={setSelectedTab} className="w-full">
            <TabsList className="grid w-full grid-cols-2 mb-8 bg-white/10 backdrop-blur-md">
              <TabsTrigger value="courses" className="data-[state=active]:bg-yellow-500 data-[state=active]:text-black">
                <BookOpen className="w-4 h-4 mr-2" />
                "Available Courses"
              </TabsTrigger>
              <TabsTrigger value="how-it-works" className="data-[state=active]:bg-yellow-500 data-[state=active]:text-black">
                <Clock className="w-4 h-4 mr-2" />
                "How It Works"
              </TabsTrigger>
            </TabsList>

            <TabsContent value="courses" className="space-y-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                {(courses as HomeTuitionCourse[]).map((course: HomeTuitionCourse, index: number) => (
                  <motion.div
                    key={course.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                  >
                    <Card className="bg-white/10 backdrop-blur-md border-white/20 hover:bg-white/15 transition-all duration-300 h-full">
                      <CardHeader>
                        <div className="flex justify-between items-start mb-4">
                          <Badge className={getLevelColor(course.level)}>
                            {course.level.charAt(0).toUpperCase() + course.level.slice(1)}
                          </Badge>
                          <div className="text-right">
                            <p className="text-sm text-gray-300">Available Seats</p>
                            <p className="font-bold text-yellow-400">
                              {course.availableSeats - course.occupiedSeats}
                            </p>
                          </div>
                        </div>
                        <CardTitle className="text-xl text-white mb-2">
                          {course.title}
                        </CardTitle>
                        <p className="text-gray-300 text-sm leading-relaxed">
                          {course.shortDescription}
                        </p>
                      </CardHeader>

                      <CardContent className="space-y-6">
                        {/* Course Details */}
                        <div className="grid grid-cols-2 gap-4">
                          <div className="flex items-center space-x-2">
                            <Clock className="h-4 w-4 text-yellow-400" />
                            <span className="text-sm text-gray-300">{course.duration}</span>
                          </div>
                          <div className="flex items-center space-x-2">
                            <MapPin className="h-4 w-4 text-yellow-400" />
                            <span className="text-sm text-gray-300">{course.coverageArea}</span>
                          </div>
                        </div>

                        {/* Pricing */}
                        <div className="space-y-3">
                          <div className="flex justify-between items-center p-3 bg-black/30 rounded-lg">
                            <div className="flex items-center space-x-2">
                              <User className="h-4 w-4 text-blue-400" />
                              <span className="text-sm text-gray-300">One-to-One</span>
                            </div>
                            <div className="flex items-center space-x-1 text-yellow-400 font-bold">
                              <IndianRupee className="h-4 w-4" />
                              <span>{Number(course.oneToOnePrice).toLocaleString()}</span>
                            </div>
                          </div>
                          
                          <div className="flex justify-between items-center p-3 bg-black/30 rounded-lg">
                            <div className="flex items-center space-x-2">
                              <Users className="h-4 w-4 text-green-400" />
                              <span className="text-sm text-gray-300">
                                Group ({course.maxGroupSize} max)
                              </span>
                            </div>
                            <div className="flex items-center space-x-1 text-yellow-400 font-bold">
                              <IndianRupee className="h-4 w-4" />
                              <span>{Number(course.groupLearningPrice).toLocaleString()}</span>
                            </div>
                          </div>
                        </div>

                        {/* Prerequisites */}
                        <div className="bg-blue-500/20 p-3 rounded-lg">
                          <h4 className="text-sm font-semibold text-blue-300 mb-1">Prerequisites</h4>
                          <p className="text-xs text-gray-300">{course.prerequisites}</p>
                        </div>

                        {/* Application Buttons */}
                        <div className="space-y-3">
                          <Link href={`/home-tuition/apply/one-to-one/${course.id}`}>
                            <Button className="w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white">
                              <User className="w-4 h-4 mr-2" />
                              Apply for One-to-One
                              <ChevronRight className="w-4 h-4 ml-2" />
                            </Button>
                          </Link>
                          
                          <Link href={`/home-tuition/apply/group/${course.id}`}>
                            <Button className="w-full bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white">
                              <Users className="w-4 h-4 mr-2" />
                              Apply for Group Learning
                              <ChevronRight className="w-4 h-4 ml-2" />
                            </Button>
                          </Link>
                        </div>

                        {/* Deadlines */}
                        {course.applicationDeadline && (
                          <div className="flex items-center space-x-2 text-orange-400 bg-orange-500/20 p-2 rounded">
                            <Calendar className="h-4 w-4" />
                            <span className="text-xs">
                              Application Deadline: {new Date(course.applicationDeadline).toLocaleDateString()}
                            </span>
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  </motion.div>
                ))}
              </div>
            </TabsContent>

            <TabsContent value="how-it-works" className="space-y-6">
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6"
              >
                {[
                  {
                    step: "1",
                    title: "Apply Online",
                    description: "Submit your application with personal details and upload your Aadhar card for verification."
                  },
                  {
                    step: "2", 
                    title: "Interview Process",
                    description: "Selected candidates will be interviewed to assess their dedication and learning goals."
                  },
                  {
                    step: "3",
                    title: "Course Selection",
                    description: "Upon selection, choose between one-to-one or group learning format based on your preference."
                  },
                  {
                    step: "4",
                    title: "Home Sessions",
                    description: "Begin your astrology journey with personalized sessions conducted at your home."
                  }
                ].map((step, index) => (
                  <motion.div
                    key={step.step}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                  >
                    <Card className="bg-white/10 backdrop-blur-md border-white/20 hover:bg-white/15 transition-all duration-300 h-full">
                      <CardContent className="p-6 text-center">
                        <div className="w-12 h-12 bg-yellow-500 text-black rounded-full flex items-center justify-center text-xl font-bold mx-auto mb-4">
                          {step.step}
                        </div>
                        <h3 className="font-semibold text-white mb-3">{step.title}</h3>
                        <p className="text-sm text-gray-300 leading-relaxed">{step.description}</p>
                      </CardContent>
                    </Card>
                  </motion.div>
                ))}
              </motion.div>

              {/* Additional Info */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.4 }}
                className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-8"
              >
                <Card className="bg-white/10 backdrop-blur-md border-white/20">
                  <CardHeader>
                    <CardTitle className="text-white flex items-center">
                      <Star className="w-5 h-5 text-yellow-400 mr-2" />
                      Why Choose Home Tuition?
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <ul className="space-y-2 text-gray-300">
                      <li>• Comfortable learning in your own environment</li>
                      <li>• Flexible scheduling based on your availability</li>
                      <li>• Personalized attention and customized teaching</li>
                      <li>• Direct interaction with experienced astrologer</li>
                      <li>• Practical hands-on learning approach</li>
                    </ul>
                  </CardContent>
                </Card>

                <Card className="bg-white/10 backdrop-blur-md border-white/20">
                  <CardHeader>
                    <CardTitle className="text-white flex items-center">
                      <MapPin className="w-5 h-5 text-yellow-400 mr-2" />
                      Service Coverage
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div className="text-gray-300">
                      <p className="mb-2"><strong>Primary Area:</strong> Within 25km of Kolkata city center</p>
                      <p className="mb-2"><strong>Special Arrangements:</strong> Extended coverage for group learning (4+ students)</p>
                      <p className="text-sm text-yellow-400">
                        Contact us for specific location availability
                      </p>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  );
}


================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/pages/products.tsx
================================================================================
import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Link } from "wouter";
import { GlassCard } from "@/components/ui/glass-card";
import { NeonButton } from "@/components/ui/neon-button";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Package, Search, Star, Gem, Scroll, Droplets, BookOpen, Gift, ShoppingCart, Filter } from "lucide-react";
// AutoTranslate import removed for fast loading
import { useLanguage } from "@/contexts/LanguageContext";

export default function Products() {
  const { t } = useLanguage();
  const [searchTerm, setSearchTerm] = useState("");
  const [categoryFilter, setCategoryFilter] = useState("all");
  const [priceFilter, setPriceFilter] = useState("all");

  const { data: products = [], isLoading } = useQuery({
    queryKey: ["/api/products"],
  });

  if (isLoading) {
    return (
      <div className="min-h-screen pt-16 flex items-center justify-center">
        <div className="animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full" />
      </div>
    );
  }

  const filteredProducts = Array.isArray(products) ? products.filter((product: any) => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         product.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = categoryFilter === "all" || product.category === categoryFilter;
    
    let matchesPrice = true;
    if (priceFilter !== "all") {
      const price = parseFloat(product.price);
      switch (priceFilter) {
        case "under-1000":
          matchesPrice = price < 1000;
          break;
        case "1000-5000":
          matchesPrice = price >= 1000 && price <= 5000;
          break;
        case "over-5000":
          matchesPrice = price > 5000;
          break;
      }
    }
    
    return matchesSearch && matchesCategory && matchesPrice;
  }) : [];

  const categories = [
    { 
      value: "all", 
      label: t("allProducts"), 
      icon: Package,
      description: t("browseAllCosmicRemedies")
    },
    { 
      value: "gemstones", 
      label: t("gemstones"), 
      icon: Gem,
      description: t("authenticCertifiedGemstones")
    },
    { 
      value: "yantras", 
      label: t("sacredYantras"), 
      icon: Scroll,
      description: t("energizedGeometricPatterns")
    },
    { 
      value: "malas", 
      label: t("spiritualMalas"), 
      icon: Droplets,
      description: t("rudrakshaGemstoneForMeditation")
    },
    { 
      value: "books", 
      label: t("astrologyBooks"), 
      icon: BookOpen,
      description: t("comprehensiveAncientWisdom")
    },
    { 
      value: "kits", 
      label: t("remedyKits"), 
      icon: Gift,
      description: t("completePersonalizedRemedySolutions")
    },
  ];

  const categoryColors = {
    gemstones: { bg: "bg-purple-500/20", text: "text-purple-500", accent: "from-purple-500 to-pink-500" },
    yantras: { bg: "bg-yellow-500/20", text: "text-yellow-500", accent: "from-yellow-500 to-orange-500" },
    malas: { bg: "bg-green-500/20", text: "text-green-500", accent: "from-green-500 to-emerald-500" },
    books: { bg: "bg-blue-500/20", text: "text-blue-500", accent: "from-blue-500 to-cyan-500" },
    kits: { bg: "bg-red-500/20", text: "text-red-500", accent: "from-red-500 to-rose-500" },
  };

  const getCategoryIcon = (category: string) => {
    const categoryData = categories.find(c => c.value === category);
    return categoryData ? categoryData.icon : Package;
  };

  return (
    <div className="min-h-screen pt-16 pb-16" data-testid="products-page">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="text-center mb-16">
          <h1 className="text-5xl md:text-6xl font-bold mb-6 neon-text text-primary animate-float" data-testid="products-title">
            "Cosmic Remedies"
          </h1>
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto mb-8">
            "Authentic astrological products, gemstones, and spiritual accessories to enhance your cosmic journey. Each item is carefully selected and energized by Astrologer Arup Shastri."
          </p>
        </div>

        {/* Search and Filters */}
        <GlassCard className="p-6 mb-8">
          <div className="flex flex-col lg:flex-row gap-4 items-center">
            <div className="relative flex-1 w-full">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
              <Input
                placeholder={t("searchProductsByName")}
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 form-input w-full"
                data-testid="search-products"
              />
            </div>
            
            <div className="flex gap-4 w-full lg:w-auto">
              <Select value={categoryFilter} onValueChange={setCategoryFilter}>
                <SelectTrigger className="form-input w-full lg:w-48">
                  <Filter className="w-4 h-4 mr-2" />
                  <SelectValue placeholder={t("category")} />
                </SelectTrigger>
                <SelectContent className="glass-card">
                  {categories.map((category) => (
                    <SelectItem key={category.value} value={category.value}>
                      {category.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              <Select value={priceFilter} onValueChange={setPriceFilter}>
                <SelectTrigger className="form-input w-full lg:w-40">
                  <SelectValue placeholder={t("price")} />
                </SelectTrigger>
                <SelectContent className="glass-card">
                  <SelectItem value="all">{t("allPrices")}</SelectItem>
                  <SelectItem value="under-1000">{t("under1000")}</SelectItem>
                  <SelectItem value="1000-5000">{t("from1000To5000")}</SelectItem>
                  <SelectItem value="over-5000">{t("over5000")}</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        </GlassCard>

        {/* Category Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
          {categories.slice(1).map((category, index) => {
            const CategoryIcon = category.icon;
            const colors = categoryColors[category.value as keyof typeof categoryColors];
            const productCount = Array.isArray(products) ? products.filter((p: any) => p.category === category.value).length : 0;
            
            return (
              <GlassCard 
                key={category.value}
                className="p-6 hover:scale-105 transition-transform cursor-pointer"
                onClick={() => setCategoryFilter(category.value)}
                data-testid={`category-${category.value}`}
              >
                <div className={`w-16 h-16 rounded-full ${colors.bg} flex items-center justify-center mx-auto mb-4`}>
                  <CategoryIcon className={`w-8 h-8 ${colors.text}`} />
                </div>
                <h3 className="text-lg font-bold text-center mb-2 text-foreground">
                  {category.label}
                </h3>
                <p className="text-sm text-muted-foreground text-center mb-4">
                  {category.description}
                </p>
                <div className="text-center">
                  <Badge variant="outline" className="text-xs">
                    {productCount} {t("products")}
                  </Badge>
                </div>
              </GlassCard>
            );
          })}
        </div>

        {/* Featured Product Banner */}
        <GlassCard className="p-8 md:p-12 mb-12 neon-border">
          <div className="text-center">
            <Gift className="w-16 h-16 text-primary mx-auto mb-6" />
            <h3 className="text-3xl font-bold mb-4 text-primary">
              Complete Remedy Kit
            </h3>
            <p className="text-muted-foreground mb-6 max-w-2xl mx-auto">
              Get a personalized remedy kit based on your birth chart analysis. Includes gemstones, yantra, 
              and detailed guidance tailored specifically for you.
            </p>
            <div className="flex items-center justify-center space-x-4 mb-6">
              <div className="text-3xl font-bold text-primary">₹9,999</div>
              <div className="text-lg text-muted-foreground line-through">₹15,000</div>
              <Badge className="bg-red-500/20 text-red-500">33% OFF</Badge>
            </div>
            <Link href="/booking">
              <NeonButton size="lg" className="text-lg px-8 py-4">
                Order Custom Kit
              </NeonButton>
            </Link>
          </div>
        </GlassCard>

        {/* Products Grid */}
        {filteredProducts.length === 0 ? (
          <GlassCard className="p-12 text-center">
            <Package className="w-16 h-16 text-muted-foreground mx-auto mb-6" />
            <h3 className="text-2xl font-bold text-foreground mb-4">{t("noProductsFound")}</h3>
            <p className="text-muted-foreground mb-6">
              {searchTerm ? t("tryAdjustingSearchCriteria") : t("productsAvailableSoon")}
            </p>
            <Button onClick={() => {
              setSearchTerm("");
              setCategoryFilter("all");
              setPriceFilter("all");
            }} className="glass">
              Clear Filters
            </Button>
          </GlassCard>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {filteredProducts.map((product: any, index: number) => {
              const CategoryIcon = getCategoryIcon(product.category);
              const colors = categoryColors[product.category as keyof typeof categoryColors];
              
              return (
                <GlassCard 
                  key={product.id} 
                  className="p-0 overflow-hidden hover:scale-105 transition-transform duration-300"
                  data-testid={`product-card-${index}`}
                >
                  {/* Product Image */}
                  <div className={`relative h-48 bg-gradient-to-br ${colors?.accent || 'from-primary to-secondary'} flex items-center justify-center`}>
                    <CategoryIcon className="w-16 h-16 text-white/80" />
                    <div className="absolute top-4 right-4">
                      <Badge className={colors?.bg ? `${colors.bg} ${colors.text}` : "bg-primary/20 text-primary"}>
                        {product.category}
                      </Badge>
                    </div>
                    {product.stock && product.stock <= 5 && (
                      <div className="absolute top-4 left-4">
                        <Badge variant="destructive" className="text-xs">
                          Only {product.stock} left
                        </Badge>
                      </div>
                    )}
                  </div>

                  <div className="p-6">
                    {/* Product Info */}
                    <h3 className="text-lg font-bold mb-2 text-foreground" data-testid={`product-name-${index}`}>
                      <AutoTranslate text={product.name} />
                    </h3>
                    <p className="text-muted-foreground mb-4 text-sm line-clamp-3" data-testid={`product-description-${index}`}>
                      <AutoTranslate text={product.description} />
                    </p>

                    {/* Specifications */}
                    {product.specifications && Object.keys(product.specifications).length > 0 && (
                      <div className="mb-4 space-y-1">
                        {Object.entries(product.specifications).slice(0, 2).map(([key, value]) => (
                          <div key={key} className="flex justify-between text-xs">
                            <span className="text-muted-foreground capitalize">{key}:</span>
                            <span className="text-foreground">{value as string}</span>
                          </div>
                        ))}
                      </div>
                    )}

                    {/* Ratings */}
                    <div className="flex items-center space-x-1 mb-4">
                      {Array.from({ length: 5 }).map((_, i) => (
                        <Star key={i} className="w-3 h-3 fill-yellow-500 text-yellow-500" />
                      ))}
                      <span className="text-xs text-muted-foreground ml-1">(4.8)</span>
                    </div>

                    {/* Price & Add to Cart */}
                    <div className="flex items-center justify-between">
                      <div>
                        <div className="text-xl font-bold text-primary" data-testid={`product-price-${index}`}>
                          ₹{parseFloat(product.price).toLocaleString()}
                        </div>
                        <div className="text-xs text-muted-foreground">
                          {product.currency !== "INR" && `${product.currency} pricing available`}
                        </div>
                      </div>
                      
                      <NeonButton size="sm" data-testid={`add-to-cart-${index}`}>
                        <ShoppingCart className="w-4 h-4 mr-1" />
                        Add to Cart
                      </NeonButton>
                    </div>

                    {/* Quick Features */}
                    <div className="flex flex-wrap gap-1 mt-4">
                      <Badge variant="outline" className="text-xs">Authentic</Badge>
                      <Badge variant="outline" className="text-xs">Energized</Badge>
                      {product.category === "gemstones" && (
                        <Badge variant="outline" className="text-xs">Certified</Badge>
                      )}
                    </div>
                  </div>
                </GlassCard>
              );
            })}
          </div>
        )}

        {/* Trust Indicators */}
        <div className="mt-16">
          <GlassCard className="p-8">
            <h3 className="text-2xl font-bold text-center mb-8 text-primary">
              Why Choose Our Products?
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              <div className="text-center">
                <div className="w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Star className="w-8 h-8 text-primary" />
                </div>
                <h4 className="font-semibold text-foreground mb-2">Authentic & Certified</h4>
                <p className="text-sm text-muted-foreground">
                  All gemstones come with authentic certificates and our products are carefully sourced.
                </p>
              </div>
              <div className="text-center">
                <div className="w-16 h-16 bg-secondary/20 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Gem className="w-8 h-8 text-secondary" />
                </div>
                <h4 className="font-semibold text-foreground mb-2">Energized by Expert</h4>
                <p className="text-sm text-muted-foreground">
                  Every product is personally energized and blessed by Astrologer Arup Shastri.
                </p>
              </div>
              <div className="text-center">
                <div className="w-16 h-16 bg-accent/20 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Package className="w-8 h-8 text-accent" />
                </div>
                <h4 className="font-semibold text-foreground mb-2">Global Shipping</h4>
                <p className="text-sm text-muted-foreground">
                  Secure packaging and worldwide shipping with tracking for all orders.
                </p>
              </div>
            </div>
          </GlassCard>
        </div>

        {/* Call to Action */}
        <div className="mt-16">
          <GlassCard className="p-8 md:p-12 text-center neon-border">
            <h3 className="text-3xl font-bold mb-4 text-primary">
              Need Personalized Guidance?
            </h3>
            <p className="text-muted-foreground mb-8 text-lg max-w-2xl mx-auto">
              Not sure which products are right for you? Book a consultation with Astrologer Arup Shastri 
              to get personalized recommendations based on your birth chart.
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Link href="/booking">
                <NeonButton size="lg" className="text-lg px-8 py-4">
                  Book Consultation
                </NeonButton>
              </Link>
              <Link href="/courses">
                <NeonButton variant="secondary" size="lg" className="text-lg px-8 py-4">
                  Learn Astrology
                </NeonButton>
              </Link>
            </div>
          </GlassCard>
        </div>
      </div>
    </div>
  );
}



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/pages/consultation.tsx
================================================================================
import { useState, useEffect } from "react";
import { useRoute, useLocation } from "wouter";
import { useQuery } from "@tanstack/react-query";
import { GlassCard } from "@/components/ui/glass-card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Video, MessageSquare, Phone, Clock, User, Calendar, FileText, Settings } from "lucide-react";
import VideoCall from "@/components/consultation/video-call";
import Chat from "@/components/consultation/chat";
import { useToast } from "@/hooks/use-toast";


export default function Consultation() {
  const [match, params] = useRoute("/consultation/:id");
  const [, setLocation] = useLocation();
  const [activeTab, setActiveTab] = useState("details");
  const [consultationStarted, setConsultationStarted] = useState(false);
  const [timeRemaining, setTimeRemaining] = useState(0);
  const { toast } = useToast();

  const consultationId = params?.id;

  const { data: consultation, isLoading, error } = useQuery({
    queryKey: ["/api/consultations", consultationId],
    enabled: !!consultationId,
  });

  const { data: messages } = useQuery({
    queryKey: ["/api/consultations", consultationId, "messages"],
    enabled: !!consultationId && consultationStarted,
    refetchInterval: consultationStarted ? 1000 : false,
  });

  const { data: user } = useQuery({
    queryKey: ["/api/profile"],
    enabled: !!localStorage.getItem("token"),
  });

  useEffect(() => {
    if (!localStorage.getItem("token")) {
      toast({
        title: "Authentication Required",
        description: "Please login to access this consultation",
        variant: "destructive",
      });
      setLocation("/login");
      return;
    }
  }, [setLocation, toast]);

  useEffect(() => {
    if (consultation && consultationStarted) {
      const startTime = new Date().getTime();
      const duration = consultation.duration * 60 * 1000; // Convert to milliseconds
      
      const timer = setInterval(() => {
        const now = new Date().getTime();
        const elapsed = now - startTime;
        const remaining = Math.max(0, duration - elapsed);
        
        setTimeRemaining(remaining);
        
        if (remaining <= 5 * 60 * 1000 && remaining > 4 * 60 * 1000) {
          // Alert 5 minutes before end
          toast({
            title: "5 Minutes Remaining",
            description: "Your consultation will end in 5 minutes",
          });
        }
        
        if (remaining <= 0) {
          clearInterval(timer);
          handleConsultationEnd();
        }
      }, 1000);

      return () => clearInterval(timer);
    }
  }, [consultation, consultationStarted, toast]);

  const handleConsultationEnd = () => {
    setConsultationStarted(false);
    toast({
      title: "Consultation Ended",
      description: "Thank you for your consultation. You will receive a summary soon.",
    });
  };

  const formatTime = (milliseconds: number) => {
    const minutes = Math.floor(milliseconds / 60000);
    const seconds = Math.floor((milliseconds % 60000) / 1000);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      scheduled: { variant: "default" as const, label: "Scheduled" },
      ongoing: { variant: "secondary" as const, label: "In Progress" },
      completed: { variant: "outline" as const, label: "Completed" },
      cancelled: { variant: "destructive" as const, label: "Cancelled" },
    };
    
    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.scheduled;
    return <Badge variant={config.variant}>{config.label}</Badge>;
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "video":
        return <Video className="w-5 h-5" />;
      case "audio":
        return <Phone className="w-5 h-5" />;
      case "chat":
        return <MessageSquare className="w-5 h-5" />;
      default:
        return <User className="w-5 h-5" />;
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen pt-16 flex items-center justify-center">
        <div className="animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full" />
      </div>
    );
  }

  if (error || !consultation) {
    return (
      <div className="min-h-screen pt-16 flex items-center justify-center">
        <GlassCard className="p-8 text-center max-w-md">
          <h2 className="text-2xl font-bold text-foreground mb-4">Consultation Not Found</h2>
          <p className="text-muted-foreground mb-6">
            The consultation you're looking for doesn't exist or you don't have access to it.
          </p>
          <Button onClick={() => setLocation("/")} className="neon-button">
            Go Home
          </Button>
        </GlassCard>
      </div>
    );
  }

  const canStartConsultation = () => {
    const scheduledTime = new Date(consultation.scheduledAt);
    const now = new Date();
    const timeDiff = scheduledTime.getTime() - now.getTime();
    
    // Allow starting 10 minutes early
    return timeDiff <= 10 * 60 * 1000 && consultation.status === "scheduled";
  };

  return (
    <div className="min-h-screen pt-16 pb-16" data-testid="consultation-page">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <GlassCard className="p-6 mb-8">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                {getTypeIcon(consultation.type)}
                <h1 className="text-2xl font-bold text-foreground capitalize" data-testid="consultation-title">
                  {consultation.type} Consultation
                </h1>
              </div>
              {getStatusBadge(consultation.status)}
            </div>
            
            {consultationStarted && timeRemaining > 0 && (
              <div className="flex items-center space-x-2">
                <Clock className="w-5 h-5 text-primary" />
                <span className="text-lg font-bold text-primary">
                  {formatTime(timeRemaining)}
                </span>
              </div>
            )}
          </div>

          {/* Quick Info */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
            <div className="flex items-center space-x-2">
              <Calendar className="w-4 h-4 text-muted-foreground" />
              <span className="text-sm text-muted-foreground">
                {new Date(consultation.scheduledAt).toLocaleString()}
              </span>
            </div>
            <div className="flex items-center space-x-2">
              <Clock className="w-4 h-4 text-muted-foreground" />
              <span className="text-sm text-muted-foreground">
                Duration: {consultation.duration} minutes
              </span>
            </div>
            <div className="flex items-center space-x-2">
              <span className="text-sm font-semibold text-primary">
                ₹{consultation.price}
              </span>
              <Badge variant="outline" className="text-xs">
                {consultation.plan}
              </Badge>
            </div>
          </div>
        </GlassCard>

        {/* Main Content */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Left Column - Main Content */}
          <div className="lg:col-span-2">
            <Tabs value={activeTab} onValueChange={setActiveTab}>
              <TabsList className="glass-card mb-6">
                <TabsTrigger value="details" className="text-sm">
                  <FileText className="w-4 h-4 mr-2" />
                  Details
                </TabsTrigger>
                {(consultationStarted || consultation.type === "chat") && (
                  <TabsTrigger value="chat" className="text-sm">
                    <MessageSquare className="w-4 h-4 mr-2" />
                    Chat
                  </TabsTrigger>
                )}
                {consultationStarted && consultation.type === "video" && (
                  <TabsTrigger value="video" className="text-sm">
                    <Video className="w-4 h-4 mr-2" />
                    Video
                  </TabsTrigger>
                )}
                <TabsTrigger value="settings" className="text-sm">
                  <Settings className="w-4 h-4 mr-2" />
                  Settings
                </TabsTrigger>
              </TabsList>

              <TabsContent value="details">
                <GlassCard className="p-6">
                  <h3 className="text-xl font-semibold text-foreground mb-4">"Consultation Details"</h3>
                  
                  <div className="space-y-4">
                    <div>
                      <h4 className="font-semibold text-foreground mb-2">"Type & Plan"</h4>
                      <p className="text-muted-foreground capitalize">
                        {consultation.type} consultation - {consultation.plan}
                      </p>
                    </div>

                    <div>
                      <h4 className="font-semibold text-foreground mb-2">"Scheduled Time"</h4>
                      <p className="text-muted-foreground">
                        {new Date(consultation.scheduledAt).toLocaleString()}
                      </p>
                    </div>

                    {consultation.notes && (
                      <div>
                        <h4 className="font-semibold text-foreground mb-2">"Your Notes"</h4>
                        <p className="text-muted-foreground">{consultation.notes}</p>
                      </div>
                    )}

                    <div>
                      <h4 className="font-semibold text-foreground mb-2">"Language"</h4>
                      <p className="text-muted-foreground capitalize">
                        {consultation.language === "en" ? "English" : 
                         consultation.language === "hi" ? "Hindi" : 
                         consultation.language === "bn" ? "Bengali" : consultation.language}
                      </p>
                    </div>

                    <div>
                      <h4 className="font-semibold text-foreground mb-2">"Payment Status"</h4>
                      <Badge variant={consultation.paymentStatus === "paid" ? "default" : "secondary"}>
                        {consultation.paymentStatus}
                      </Badge>
                    </div>
                  </div>

                  {canStartConsultation() && !consultationStarted && (
                    <div className="mt-6 p-4 glass rounded-lg">
                      <h4 className="font-semibold text-foreground mb-2">"Ready to Start"</h4>
                      <p className="text-muted-foreground mb-4">
                        "Your consultation time is approaching. You can start your session now."
                      </p>
                      <Button
                        onClick={() => setConsultationStarted(true)}
                        className="neon-button"
                        data-testid="start-consultation-button"
                      >
                        "Start Consultation"
                      </Button>
                    </div>
                  )}
                </GlassCard>
              </TabsContent>

              <TabsContent value="chat">
                <Chat 
                  consultationId={consultationId!}
                  messages={messages || []}
                  isActive={consultationStarted || consultation.type === "chat"}
                />
              </TabsContent>

              <TabsContent value="video">
                {consultation.type === "video" && consultationStarted && (
                  <VideoCall
                    consultationId={consultationId!}
                    isAstrologer={user?.isAdmin || false}
                    onEndCall={handleConsultationEnd}
                  />
                )}
              </TabsContent>

              <TabsContent value="settings">
                <GlassCard className="p-6">
                  <h3 className="text-xl font-semibold text-foreground mb-4">Settings</h3>
                  
                  <div className="space-y-4">
                    <div>
                      <h4 className="font-semibold text-foreground mb-2">Audio Settings</h4>
                      <div className="space-y-2">
                        <Button variant="outline" className="glass w-full justify-start">
                          Test Microphone
                        </Button>
                        <Button variant="outline" className="glass w-full justify-start">
                          Test Speakers
                        </Button>
                      </div>
                    </div>

                    {consultation.type === "video" && (
                      <div>
                        <h4 className="font-semibold text-foreground mb-2">Video Settings</h4>
                        <div className="space-y-2">
                          <Button variant="outline" className="glass w-full justify-start">
                            Test Camera
                          </Button>
                          <Button variant="outline" className="glass w-full justify-start">
                            Video Quality: Auto
                          </Button>
                        </div>
                      </div>
                    )}

                    <div>
                      <h4 className="font-semibold text-foreground mb-2">Notifications</h4>
                      <div className="space-y-2">
                        <label className="flex items-center space-x-2">
                          <input type="checkbox" className="rounded" defaultChecked />
                          <span className="text-sm text-muted-foreground">Sound notifications</span>
                        </label>
                        <label className="flex items-center space-x-2">
                          <input type="checkbox" className="rounded" defaultChecked />
                          <span className="text-sm text-muted-foreground">Chat message alerts</span>
                        </label>
                      </div>
                    </div>
                  </div>
                </GlassCard>
              </TabsContent>
            </Tabs>
          </div>

          {/* Right Column - Sidebar */}
          <div className="space-y-6">
            {/* Astrologer Info */}
            <GlassCard className="p-6">
              <h3 className="text-lg font-semibold text-foreground mb-4">Your Astrologer</h3>
              <div className="flex items-center space-x-4 mb-4">
                <div className="w-12 h-12 rounded-full bg-primary/20 flex items-center justify-center">
                  <User className="w-6 h-6 text-primary" />
                </div>
                <div>
                  <h4 className="font-semibold text-foreground">Arup Shastri</h4>
                  <p className="text-sm text-muted-foreground">Expert Vedic Astrologer</p>
                </div>
              </div>
              <p className="text-sm text-muted-foreground mb-4">
                18+ years of experience in Vedic astrology, palmistry, and cosmic guidance.
              </p>
              <div className="flex items-center space-x-1">
                {Array.from({ length: 5 }).map((_, i) => (
                  <span key={i} className="text-yellow-500">⭐</span>
                ))}
                <span className="text-sm text-muted-foreground ml-2">(4.9/5)</span>
              </div>
            </GlassCard>

            {/* Quick Actions */}
            <GlassCard className="p-6">
              <h3 className="text-lg font-semibold text-foreground mb-4">Quick Actions</h3>
              <div className="space-y-3">
                <Button variant="outline" className="glass w-full justify-start text-sm">
                  <FileText className="w-4 h-4 mr-2" />
                  Download Report
                </Button>
                <Button variant="outline" className="glass w-full justify-start text-sm">
                  <Calendar className="w-4 h-4 mr-2" />
                  Reschedule
                </Button>
                <Button variant="outline" className="glass w-full justify-start text-sm">
                  <MessageSquare className="w-4 h-4 mr-2" />
                  Contact Support
                </Button>
              </div>
            </GlassCard>

            {/* Consultation Guidelines */}
            <GlassCard className="p-6">
              <h3 className="text-lg font-semibold text-foreground mb-4">Guidelines</h3>
              <ul className="space-y-2 text-sm text-muted-foreground">
                <li>• Ensure stable internet connection</li>
                <li>• Be in a quiet environment</li>
                <li>• Have your questions ready</li>
                <li>• Recording is not permitted</li>
                <li>• Consultation is strictly confidential</li>
              </ul>
            </GlassCard>
          </div>
        </div>
      </div>
    </div>
  );
}



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/pages/consultation-session.tsx
================================================================================
import { useState, useEffect, useRef } from "react";
import { useQuery } from "@tanstack/react-query";
import { useLocation } from "wouter";
import { GlassCard } from "@/components/ui/glass-card";
import { NeonButton } from "@/components/ui/neon-button";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { 
  Video, 
  VideoOff, 
  Mic, 
  MicOff, 
  Phone, 
  MessageSquare,
  Clock,
  AlertTriangle,
  Settings,
  Users
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";

interface ConsultationTimer {
  totalDuration: number; // in seconds
  remainingTime: number; // in seconds
  isActive: boolean;
  isPaused: boolean;
  warnings: {
    fifteenMin: boolean;
    fiveMin: boolean;
    oneMin: boolean;
  };
}

export default function ConsultationSession() {
  const [, setLocation] = useLocation();
  const { toast } = useToast();
  const [sessionId, setSessionId] = useState<string>("");
  const [timer, setTimer] = useState<ConsultationTimer>({
    totalDuration: 3600, // Default 60 minutes
    remainingTime: 3600,
    isActive: false,
    isPaused: false,
    warnings: {
      fifteenMin: false,
      fiveMin: false,
      oneMin: false
    }
  });
  const [mediaControls, setMediaControls] = useState({
    videoEnabled: true,
    audioEnabled: true,
    screenShare: false
  });
  
  const intervalRef = useRef<NodeJS.Timeout>();
  const audioWarningRef = useRef<HTMLAudioElement | null>(null);

  // Get consultation session data
  const { data: sessionData } = useQuery({
    queryKey: ['/api/consultation-session', sessionId],
    enabled: !!sessionId
  });

  // Initialize session from URL params or consultation data
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const id = urlParams.get('session');
    if (id) {
      setSessionId(id);
    }
  }, []);

  // Timer countdown logic
  useEffect(() => {
    if (timer.isActive && !timer.isPaused && timer.remainingTime > 0) {
      intervalRef.current = setInterval(() => {
        setTimer(prev => {
          const newRemainingTime = prev.remainingTime - 1;
          const newTimer = { ...prev, remainingTime: newRemainingTime };
          
          // Check for warning thresholds
          const fifteenMinutes = 15 * 60;
          const fiveMinutes = 5 * 60;
          const oneMinute = 60;
          
          // 15-minute warning
          if (newRemainingTime === fifteenMinutes && !prev.warnings.fifteenMin) {
            newTimer.warnings.fifteenMin = true;
            showTimeWarning("15 minutes remaining in your consultation");
          }
          
          // 5-minute warning
          if (newRemainingTime === fiveMinutes && !prev.warnings.fiveMin) {
            newTimer.warnings.fiveMin = true;
            showTimeWarning("5 minutes remaining - please wrap up your consultation");
          }
          
          // 1-minute warning
          if (newRemainingTime === oneMinute && !prev.warnings.oneMin) {
            newTimer.warnings.oneMin = true;
            showTimeWarning("1 minute remaining - consultation ending soon", "destructive");
          }
          
          // Session auto-end
          if (newRemainingTime <= 0) {
            endSession();
            return { ...prev, remainingTime: 0, isActive: false };
          }
          
          return newTimer;
        });
      }, 1000);
    } else {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    }
    
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [timer.isActive, timer.isPaused, timer.remainingTime]);

  // Initialize timer with consultation duration
  useEffect(() => {
    if (sessionData && typeof sessionData === 'object' && sessionData !== null && 'session' in sessionData) {
      const session = (sessionData as any).session;
      if (session && session.duration) {
        const durationInSeconds = session.duration * 60; // Convert minutes to seconds
        setTimer(prev => ({
          ...prev,
          totalDuration: durationInSeconds,
          remainingTime: durationInSeconds
        }));
      }
    }
  }, [sessionData]);

  const showTimeWarning = (message: string, variant: "default" | "destructive" = "default") => {
    toast({
      title: "Time Alert",
      description: message,
      variant,
    });
    
    // Play warning sound
    if (audioWarningRef.current) {
      audioWarningRef.current.play();
    }
  };

  const startTimer = () => {
    setTimer(prev => ({ ...prev, isActive: true, isPaused: false }));
    toast({
      title: "Consultation Started",
      description: "Timer is now active",
    });
  };

  const pauseTimer = () => {
    setTimer(prev => ({ ...prev, isPaused: !prev.isPaused }));
    toast({
      title: timer.isPaused ? "Timer Resumed" : "Timer Paused",
      description: timer.isPaused ? "Consultation timer resumed" : "Consultation timer paused",
    });
  };

  const extendTimer = (additionalMinutes: number) => {
    const additionalSeconds = additionalMinutes * 60;
    setTimer(prev => ({
      ...prev,
      totalDuration: prev.totalDuration + additionalSeconds,
      remainingTime: prev.remainingTime + additionalSeconds
    }));
    toast({
      title: "Time Extended",
      description: `Added ${additionalMinutes} minutes to consultation`,
    });
  };

  const endSession = () => {
    setTimer(prev => ({ ...prev, isActive: false, isPaused: false }));
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
    }
    
    toast({
      title: "Consultation Ended",
      description: "Thank you for your session with Astrologer Arup Shastri",
    });
    
    // Redirect to feedback page after 3 seconds
    setTimeout(() => {
      setLocation('/consultation-feedback');
    }, 3000);
  };

  const formatTime = (seconds: number): string => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    
    if (hours > 0) {
      return `${hours}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }
    return `${minutes}:${secs.toString().padStart(2, '0')}`;
  };

  const getTimerColor = (): string => {
    if (timer.remainingTime <= 60) return "text-red-400"; // Last minute
    if (timer.remainingTime <= 300) return "text-yellow-400"; // Last 5 minutes
    if (timer.remainingTime <= 900) return "text-orange-400"; // Last 15 minutes
    return "text-primary"; // Normal
  };

  const getProgressPercentage = (): number => {
    return ((timer.totalDuration - timer.remainingTime) / timer.totalDuration) * 100;
  };

  return (
    <div className="min-h-screen cosmic-bg">
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-6xl mx-auto space-y-6">
          
          {/* Session Header */}
          <GlassCard className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-3xl font-bold neon-text mb-2">Live Consultation</h1>
                <p className="text-muted-foreground">
                  Session with Astrologer Arup Shastri • {(sessionData as any)?.session?.type || 'General Consultation'}
                </p>
              </div>
              <div className="flex items-center space-x-4">
                <Badge variant="outline" className="text-green-400 border-green-400">
                  <div className="w-2 h-2 bg-green-400 rounded-full mr-2 animate-pulse" />
                  LIVE
                </Badge>
                <Users className="w-5 h-5 text-muted-foreground" />
                <span className="text-sm text-muted-foreground">2 participants</span>
              </div>
            </div>
          </GlassCard>

          <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
            
            {/* Video/Audio Section */}
            <div className="lg:col-span-3">
              <GlassCard className="p-6 h-96">
                <div className="relative w-full h-full bg-black/20 rounded-lg flex items-center justify-center">
                  {/* Video placeholder - integrate with your video service */}
                  <div className="text-center">
                    <Video className="w-16 h-16 text-primary mx-auto mb-4" />
                    <p className="text-lg text-muted-foreground">Video consultation area</p>
                    <p className="text-sm text-muted-foreground">Integrate with Jitsi Meet, Zoom, or your preferred video service</p>
                  </div>
                </div>
                
                {/* Media Controls */}
                <div className="flex items-center justify-center mt-4 space-x-4">
                  <Button
                    variant={mediaControls.audioEnabled ? "default" : "destructive"}
                    size="lg"
                    onClick={() => setMediaControls(prev => ({ ...prev, audioEnabled: !prev.audioEnabled }))}
                    className="rounded-full p-4"
                    data-testid="toggle-audio"
                  >
                    {mediaControls.audioEnabled ? <Mic className="w-5 h-5" /> : <MicOff className="w-5 h-5" />}
                  </Button>
                  
                  <Button
                    variant={mediaControls.videoEnabled ? "default" : "destructive"}
                    size="lg"
                    onClick={() => setMediaControls(prev => ({ ...prev, videoEnabled: !prev.videoEnabled }))}
                    className="rounded-full p-4"
                    data-testid="toggle-video"
                  >
                    {mediaControls.videoEnabled ? <Video className="w-5 h-5" /> : <VideoOff className="w-5 h-5" />}
                  </Button>
                  
                  <Button
                    variant="destructive"
                    size="lg"
                    onClick={endSession}
                    className="rounded-full p-4"
                    data-testid="end-call"
                  >
                    <Phone className="w-5 h-5 rotate-180" />
                  </Button>
                </div>
              </GlassCard>
            </div>

            {/* Timer & Controls Sidebar */}
            <div className="space-y-6">
              
              {/* Consultation Timer */}
              <GlassCard className="p-6 text-center">
                <div className="flex items-center justify-center mb-4">
                  <Clock className="w-6 h-6 text-primary mr-2" />
                  <h3 className="text-lg font-semibold">Session Timer</h3>
                </div>
                
                {/* Timer Display */}
                <div className={`text-4xl font-mono font-bold mb-4 ${getTimerColor()}`} data-testid="timer-display">
                  {formatTime(timer.remainingTime)}
                </div>
                
                {/* Progress Bar */}
                <div className="w-full bg-black/20 rounded-full h-2 mb-4">
                  <div 
                    className="bg-gradient-to-r from-primary to-pink-500 h-2 rounded-full transition-all duration-1000"
                    style={{ width: `${getProgressPercentage()}%` }}
                  />
                </div>
                
                <div className="text-sm text-muted-foreground mb-4">
                  {Math.floor(timer.remainingTime / 60)} minutes remaining
                </div>

                {/* Timer Controls */}
                <div className="space-y-2">
                  {!timer.isActive ? (
                    <NeonButton 
                      onClick={startTimer} 
                      className="w-full"
                      data-testid="start-timer"
                    >
                      Start Session
                    </NeonButton>
                  ) : (
                    <Button
                      variant="outline"
                      onClick={pauseTimer}
                      className="w-full"
                      data-testid="pause-timer"
                    >
                      {timer.isPaused ? "Resume" : "Pause"}
                    </Button>
                  )}
                  
                  {/* Quick Extension Buttons */}
                  <div className="grid grid-cols-2 gap-2 mt-2">
                    <Button
                      variant="outline" 
                      size="sm"
                      onClick={() => extendTimer(15)}
                      data-testid="extend-15min"
                    >
                      +15min
                    </Button>
                    <Button
                      variant="outline"
                      size="sm" 
                      onClick={() => extendTimer(30)}
                      data-testid="extend-30min"
                    >
                      +30min
                    </Button>
                  </div>
                </div>
              </GlassCard>

              {/* Session Info */}
              <GlassCard className="p-4">
                <h4 className="font-semibold mb-3">Session Details</h4>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Type:</span>
                    <span className="capitalize">{(sessionData as any)?.session?.type || 'General'}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Duration:</span>
                    <span>{(sessionData as any)?.session?.duration || 60} minutes</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Mode:</span>
                    <span className="capitalize">{(sessionData as any)?.session?.type || 'Video Call'}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-muted-foreground">Language:</span>
                    <span>English</span>
                  </div>
                </div>
              </GlassCard>

              {/* Quick Chat */}
              <GlassCard className="p-4">
                <div className="flex items-center justify-between mb-3">
                  <h4 className="font-semibold">Quick Chat</h4>
                  <MessageSquare className="w-4 h-4 text-primary" />
                </div>
                <div className="text-sm text-muted-foreground">
                  Chat functionality can be integrated here for text communication during the session.
                </div>
              </GlassCard>
            </div>
          </div>

          {/* Warning Messages */}
          {timer.remainingTime <= 300 && timer.isActive && (
            <GlassCard className="p-4 border-yellow-500/20 bg-yellow-500/5">
              <div className="flex items-center space-x-3">
                <AlertTriangle className="w-5 h-5 text-yellow-400" />
                <div>
                  <h4 className="font-semibold text-yellow-400">Time Running Low</h4>
                  <p className="text-sm text-muted-foreground">
                    Please prepare to conclude your consultation.
                  </p>
                </div>
              </div>
            </GlassCard>
          )}

        </div>
      </div>

      {/* Audio element for warning sounds */}
      <audio ref={audioWarningRef} preload="auto">
        <source src="data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+L2um4gCaWqd1dqhY1uTUlQp9jkrIJaT1Bc" />
      </audio>

    </div>
  );
}


================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/pages/payment/success.tsx
================================================================================
import { useEffect, useState } from "react";
import { useLocation } from "wouter";
import { useQuery } from "@tanstack/react-query";
import { GlassCard } from "@/components/ui/glass-card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { 
  CheckCircle, 
  Download, 
  Calendar, 
  ArrowRight, 
  Home,
  Receipt,
  Share2,
  Clock
} from "lucide-react";


export default function PaymentSuccess() {
  const [, setLocation] = useLocation();
  const [transactionId, setTransactionId] = useState<string>("");
  const [orderDetails, setOrderDetails] = useState<any>(null);

  // Get transaction ID from URL params
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const txnId = urlParams.get('transactionId') || urlParams.get('merchantTransactionId');
    if (txnId) {
      setTransactionId(txnId);
    }
    
    // Clear cart after successful payment
    localStorage.removeItem('cart');
  }, []);

  const { data: paymentDetails, isLoading } = useQuery({
    queryKey: ["/api/payments/details", transactionId],
    enabled: !!transactionId,
  });

  useEffect(() => {
    if (paymentDetails) {
      setOrderDetails(paymentDetails);
    }
  }, [paymentDetails]);

  if (isLoading) {
    return (
      <div className="min-h-screen pt-16 flex items-center justify-center">
        <div className="animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full" />
      </div>
    );
  }

  return (
    <div className="min-h-screen pt-16 pb-16" data-testid="payment-success">
      <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Success Animation */}
        <div className="text-center mb-8">
          <div className="w-24 h-24 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-6 animate-pulse">
            <CheckCircle className="w-12 h-12 text-white" />
          </div>
          <h1 className="text-3xl font-bold neon-text text-primary mb-2">
            "Payment Successful!"
          </h1>
          <p className="text-muted-foreground">
            "Thank you for your payment. Your order has been confirmed."
          </p>
        </div>

        {/* Payment Details */}
        <GlassCard className="p-6 mb-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-foreground">"Payment Details"</h3>
            <Badge variant="default" className="bg-green-500">
              <CheckCircle className="w-3 h-3 mr-1" />
              "Completed"
            </Badge>
          </div>

          <div className="space-y-4">
            <div className="flex justify-between items-center">
              <span className="text-muted-foreground">Transaction ID</span>
              <span className="font-mono text-sm text-foreground">{transactionId}</span>
            </div>
            
            <div className="flex justify-between items-center">
              <span className="text-muted-foreground">Payment Method</span>
              <span className="text-foreground">PhonePe UPI</span>
            </div>
            
            <div className="flex justify-between items-center">
              <span className="text-muted-foreground">Amount Paid</span>
              <span className="text-lg font-semibold text-primary">
                ₹{orderDetails?.totalAmount?.toLocaleString() || '0'}
              </span>
            </div>
            
            <div className="flex justify-between items-center">
              <span className="text-muted-foreground">Payment Date</span>
              <span className="text-foreground">
                {new Date().toLocaleDateString('en-IN', {
                  day: 'numeric',
                  month: 'short',
                  year: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </span>
            </div>
          </div>
        </GlassCard>

        {/* Order Summary */}
        {orderDetails?.items && (
          <GlassCard className="p-6 mb-6">
            <h3 className="text-lg font-semibold text-foreground mb-4">Order Summary</h3>
            <div className="space-y-3">
              {orderDetails.items.map((item: any, index: number) => (
                <div key={index} className="flex justify-between items-start">
                  <div className="flex-1">
                    <p className="font-medium text-foreground">{item.name}</p>
                    {item.description && (
                      <p className="text-sm text-muted-foreground">{item.description}</p>
                    )}
                    {item.duration && (
                      <div className="flex items-center text-sm text-primary mt-1">
                        <Clock className="w-3 h-3 mr-1" />
                        {item.duration} minutes
                      </div>
                    )}
                  </div>
                  <div className="text-right">
                    <p className="font-semibold text-foreground">
                      ₹{(item.price * (item.quantity || 1)).toLocaleString()}
                    </p>
                    {item.quantity && item.quantity > 1 && (
                      <p className="text-sm text-muted-foreground">Qty: {item.quantity}</p>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </GlassCard>
        )}

        {/* Next Steps */}
        <GlassCard className="p-6 mb-6">
          <h3 className="text-lg font-semibold text-foreground mb-4">What's Next?</h3>
          <div className="space-y-3">
            <div className="flex items-center text-muted-foreground">
              <CheckCircle className="w-4 h-4 text-green-500 mr-3" />
              <span>Payment confirmation sent to your email</span>
            </div>
            <div className="flex items-center text-muted-foreground">
              <CheckCircle className="w-4 h-4 text-green-500 mr-3" />
              <span>Order details updated in your account</span>
            </div>
            {orderDetails?.items?.some((item: any) => item.type === 'consultation') && (
              <div className="flex items-center text-muted-foreground">
                <Calendar className="w-4 h-4 text-primary mr-3" />
                <span>Consultation will be scheduled shortly</span>
              </div>
            )}
            {orderDetails?.items?.some((item: any) => item.type === 'course') && (
              <div className="flex items-center text-muted-foreground">
                <Download className="w-4 h-4 text-primary mr-3" />
                <span>Course access will be activated within 24 hours</span>
              </div>
            )}
          </div>
        </GlassCard>

        {/* Action Buttons */}
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
          <Button
            onClick={() => setLocation("/dashboard")}
            className="neon-button"
            data-testid="view-orders-button"
          >
            <Receipt className="w-4 h-4 mr-2" />
            View My Orders
          </Button>
          
          <Button
            onClick={() => setLocation("/")}
            variant="outline"
            className="glass"
            data-testid="continue-shopping-button"
          >
            <Home className="w-4 h-4 mr-2" />
            Continue Shopping
          </Button>
        </div>

        {/* Share Success */}
        <div className="text-center mt-8">
          <p className="text-sm text-muted-foreground mb-4">
            Share your experience with Jai Guru Astro Remedy
          </p>
          <div className="flex justify-center space-x-4">
            <Button size="sm" variant="ghost" className="text-primary">
              <Share2 className="w-4 h-4 mr-1" />
              Share
            </Button>
          </div>
        </div>

        {/* Support Info */}
        <div className="text-center mt-8 p-4 bg-primary/10 rounded-lg">
          <p className="text-sm text-muted-foreground">
            Need help? Contact our support team at{" "}
            <span className="text-primary">support@jaiguruastroremedy.com</span>
          </p>
        </div>
      </div>
    </div>
  );
}


================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/pages/payment/failed.tsx
================================================================================
import { useEffect, useState } from "react";
import { useLocation } from "wouter";
import { GlassCard } from "@/components/ui/glass-card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { 
  XCircle, 
  RefreshCw, 
  Home, 
  MessageCircle,
  AlertTriangle,
  CreditCard,
  HelpCircle
} from "lucide-react";


export default function PaymentFailed() {
  const [, setLocation] = useLocation();
  const [errorDetails, setErrorDetails] = useState<any>(null);

  useEffect(() => {
    // Get error details from URL params or localStorage
    const urlParams = new URLSearchParams(window.location.search);
    const error = urlParams.get('error');
    const message = urlParams.get('message');
    
    if (error || message) {
      setErrorDetails({
        error: error || 'PAYMENT_FAILED',
        message: message || 'Payment could not be processed'
      });
    }
  }, []);

  const commonReasons = [
    {
      title: "Insufficient Balance",
      description: "Your account doesn't have enough balance",
      icon: CreditCard,
      solution: "Add money to your UPI account or use a different payment method"
    },
    {
      title: "Network Issues",
      description: "Poor internet connection during payment",
      icon: RefreshCw,
      solution: "Check your internet connection and try again"
    },
    {
      title: "Bank Server Issues",
      description: "Your bank's server was temporarily unavailable",
      icon: AlertTriangle,
      solution: "Wait a few minutes and retry the payment"
    },
    {
      title: "Incorrect UPI PIN",
      description: "Wrong UPI PIN entered multiple times",
      icon: XCircle,
      solution: "Double-check your UPI PIN and try again"
    }
  ];

  const handleRetryPayment = () => {
    // Redirect back to checkout
    setLocation("/checkout");
  };

  return (
    <div className="min-h-screen pt-16 pb-16" data-testid="payment-failed">
      <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Failed Animation */}
        <div className="text-center mb-8">
          <div className="w-24 h-24 bg-red-500 rounded-full flex items-center justify-center mx-auto mb-6 animate-pulse">
            <XCircle className="w-12 h-12 text-white" />
          </div>
          <h1 className="text-3xl font-bold text-red-400 mb-2">
            "Payment Failed"
          </h1>
          <p className="text-muted-foreground">
            "Your payment could not be processed. Don't worry, no money was deducted."
          </p>
        </div>

        {/* Error Details */}
        {errorDetails && (
          <GlassCard className="p-6 mb-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-foreground">"Error Details"</h3>
              <Badge variant="destructive">
                <XCircle className="w-3 h-3 mr-1" />
                "Failed"
              </Badge>
            </div>

            <div className="space-y-3">
              <div className="flex justify-between items-center">
                <span className="text-muted-foreground">Error Code</span>
                <span className="font-mono text-sm text-foreground">{errorDetails.error}</span>
              </div>
              
              <div className="flex justify-between items-start">
                <span className="text-muted-foreground">Reason</span>
                <span className="text-foreground text-right max-w-xs">{errorDetails.message}</span>
              </div>
              
              <div className="flex justify-between items-center">
                <span className="text-muted-foreground">Time</span>
                <span className="text-foreground">
                  {new Date().toLocaleDateString('en-IN', {
                    day: 'numeric',
                    month: 'short',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                  })}
                </span>
              </div>
            </div>
          </GlassCard>
        )}

        {/* Common Reasons */}
        <GlassCard className="p-6 mb-6">
          <h3 className="text-lg font-semibold text-foreground mb-4">Common Reasons & Solutions</h3>
          <div className="space-y-4">
            {commonReasons.map((reason, index) => (
              <div key={index} className="flex items-start space-x-3 p-3 glass rounded-lg">
                <div className="w-10 h-10 bg-primary/20 rounded-lg flex items-center justify-center flex-shrink-0">
                  <reason.icon className="w-5 h-5 text-primary" />
                </div>
                <div className="flex-1">
                  <h4 className="font-medium text-foreground mb-1">{reason.title}</h4>
                  <p className="text-sm text-muted-foreground mb-2">{reason.description}</p>
                  <p className="text-xs text-primary">{reason.solution}</p>
                </div>
              </div>
            ))}
          </div>
        </GlassCard>

        {/* Quick Actions */}
        <GlassCard className="p-6 mb-6">
          <h3 className="text-lg font-semibold text-foreground mb-4">Quick Actions</h3>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <Button
              onClick={handleRetryPayment}
              className="neon-button"
              data-testid="retry-payment-button"
            >
              <RefreshCw className="w-4 h-4 mr-2" />
              Retry Payment
            </Button>
            
            <Button
              onClick={() => setLocation("/")}
              variant="outline"
              className="glass"
              data-testid="back-to-home-button"
            >
              <Home className="w-4 h-4 mr-2" />
              Back to Home
            </Button>
          </div>
        </GlassCard>

        {/* Payment Tips */}
        <GlassCard className="p-6 mb-6">
          <h3 className="text-lg font-semibold text-foreground mb-4">Payment Tips</h3>
          <div className="space-y-3">
            <div className="flex items-center text-muted-foreground">
              <HelpCircle className="w-4 h-4 text-primary mr-3 flex-shrink-0" />
              <span className="text-sm">Ensure stable internet connection during payment</span>
            </div>
            <div className="flex items-center text-muted-foreground">
              <HelpCircle className="w-4 h-4 text-primary mr-3 flex-shrink-0" />
              <span className="text-sm">Check your UPI app balance before making payment</span>
            </div>
            <div className="flex items-center text-muted-foreground">
              <HelpCircle className="w-4 h-4 text-primary mr-3 flex-shrink-0" />
              <span className="text-sm">Try using a different UPI app if payment keeps failing</span>
            </div>
            <div className="flex items-center text-muted-foreground">
              <HelpCircle className="w-4 h-4 text-primary mr-3 flex-shrink-0" />
              <span className="text-sm">Contact your bank if the issue persists</span>
            </div>
          </div>
        </GlassCard>

        {/* Alternative Payment Methods */}
        <GlassCard className="p-6 mb-6">
          <h3 className="text-lg font-semibold text-foreground mb-4">Try Alternative Methods</h3>
          <p className="text-muted-foreground text-sm mb-4">
            If UPI payment is not working, you can try these alternatives:
          </p>
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
            <div className="text-center p-3 glass rounded-lg">
              <CreditCard className="w-6 h-6 text-primary mx-auto mb-2" />
              <p className="text-sm text-foreground font-medium">Debit/Credit Card</p>
            </div>
            <div className="text-center p-3 glass rounded-lg">
              <CreditCard className="w-6 h-6 text-primary mx-auto mb-2" />
              <p className="text-sm text-foreground font-medium">Net Banking</p>
            </div>
            <div className="text-center p-3 glass rounded-lg">
              <CreditCard className="w-6 h-6 text-primary mx-auto mb-2" />
              <p className="text-sm text-foreground font-medium">UPI QR Code</p>
            </div>
          </div>
        </GlassCard>

        {/* Support Contact */}
        <div className="text-center">
          <div className="p-6 bg-primary/10 rounded-lg">
            <MessageCircle className="w-8 h-8 text-primary mx-auto mb-3" />
            <h3 className="font-semibold text-foreground mb-2">Need Help?</h3>
            <p className="text-sm text-muted-foreground mb-4">
              Our support team is available 24/7 to assist you
            </p>
            <div className="flex flex-col sm:flex-row gap-3 justify-center">
              <Button size="sm" variant="outline" className="glass">
                <MessageCircle className="w-4 h-4 mr-2" />
                Live Chat
              </Button>
              <Button size="sm" variant="outline" className="glass">
                Email: support@jaiguruastroremedy.com
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/pages/auth/login.tsx
================================================================================
import { useState } from "react";
import { Link, useLocation } from "wouter";
import { useMutation } from "@tanstack/react-query";
import { GlassCard } from "@/components/ui/glass-card";
import { NeonButton } from "@/components/ui/neon-button";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Eye, EyeOff, User, Lock, Mail, Phone, Smartphone, Shield, AlertCircle } from "lucide-react";
import { AnimatedLogo } from "@/components/ui/animated-logo";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
// AutoTranslate import removed for fast loading
// Import comprehensive global phone codes for all countries worldwide
import { globalPhoneCodes } from '@/data/global-phone-codes';

export default function Login() {
  const [, setLocation] = useLocation();
  const [showPassword, setShowPassword] = useState(false);
  const [rememberMe, setRememberMe] = useState(false);
  const [loginMethod, setLoginMethod] = useState("mobile_otp"); // mobile_otp, userid_password, mobile_password
  const [otpSent, setOtpSent] = useState(false);
  const [formData, setFormData] = useState({
    // Mobile + OTP
    countryCode: "+91",
    phoneNumber: "",
    otp: "",
    
    // User ID + Password
    userId: "",
    
    // Mobile + Password  
    password: "",
  });
  const { toast } = useToast();

  // Send OTP Mutation for Mobile + OTP login
  const sendLoginOtpMutation = useMutation({
    mutationFn: async (phoneData: { countryCode: string; phoneNumber: string }) => {
      const response = await apiRequest("POST", "/api/auth/send-otp", { 
        ...phoneData, 
        purpose: "login" 
      });
      return response.json();
    },
    onSuccess: () => {
      setOtpSent(true);
      toast({
        title: "OTP Sent",
        description: "Please check your phone for the login verification code",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Failed to Send OTP",
        description: error.message || "Unable to send verification code. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Main Login Mutation for all three methods
  const loginMutation = useMutation({
    mutationFn: async (loginData: any) => {
      let endpoint = "";
      let payload = {};

      switch (loginMethod) {
        case "mobile_otp":
          endpoint = "/api/auth/login-mobile-otp";
          payload = {
            countryCode: loginData.countryCode,
            phoneNumber: loginData.phoneNumber,
            otp: loginData.otp,
          };
          break;
        case "userid_password":
          endpoint = "/api/auth/login-userid-password";
          payload = {
            userId: loginData.userId,
            password: loginData.password,
          };
          break;
        case "mobile_password":
          endpoint = "/api/auth/login-mobile-password";
          payload = {
            countryCode: loginData.countryCode,
            phoneNumber: loginData.phoneNumber,
            password: loginData.password,
          };
          break;
      }

      const response = await apiRequest("POST", endpoint, payload);
      return response.json();
    },
    onSuccess: (data) => {
      localStorage.setItem("token", data.token);
      toast({
        title: "Login Successful",
        description: `Welcome back, ${data.user.fullName || data.user.username}!`,
      });
      
      // Redirect based on user role
      if (data.user.isAdmin) {
        setLocation("/admin/dashboard");
      } else {
        setLocation("/");
      }
    },
    onError: (error: any) => {
      toast({
        title: "Login Failed",
        description: error.message || "Invalid credentials. Please try again.",
        variant: "destructive",
      });
    },
  });

  const sendOtp = () => {
    if (!formData.phoneNumber) {
      toast({
        title: "Phone Number Required",
        description: "Please enter your phone number first",
        variant: "destructive",
      });
      return;
    }
    sendLoginOtpMutation.mutate({
      countryCode: formData.countryCode,
      phoneNumber: formData.phoneNumber,
    });
  };

  const validateForm = () => {
    switch (loginMethod) {
      case "mobile_otp":
        if (!formData.phoneNumber || !formData.otp) {
          toast({
            title: "Validation Error",
            description: "Please enter your phone number and OTP",
            variant: "destructive",
          });
          return false;
        }
        break;
      case "userid_password":
        if (!formData.userId || !formData.password) {
          toast({
            title: "Validation Error",
            description: "Please enter your User ID and password",
            variant: "destructive",
          });
          return false;
        }
        break;
      case "mobile_password":
        if (!formData.phoneNumber || !formData.password) {
          toast({
            title: "Validation Error",
            description: "Please enter your phone number and password",
            variant: "destructive",
          });
          return false;
        }
        break;
    }
    return true;
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) return;

    loginMutation.mutate(formData);
  };

  return (
    <div className="min-h-screen pt-16 pb-16 flex items-center justify-center" data-testid="login-page">
      <div className="max-w-md w-full mx-4">
        <GlassCard className="p-8">
          {/* Header */}
          <div className="text-center mb-8">
            <AnimatedLogo />
            <h1 className="text-3xl font-bold neon-text text-primary mb-2" data-testid="login-title">
              Sign In to Your Account
            </h1>
            <p className="text-muted-foreground">
              Choose your preferred login method to access your cosmic journey
            </p>
          </div>

          {/* Login Method Selection */}
          <div className="mb-6">
            <Label className="text-foreground mb-3 block">Choose Login Method</Label>
            <div className="grid grid-cols-1 gap-3">
              <Button
                type="button"
                variant={loginMethod === "mobile_otp" ? "default" : "outline"}
                onClick={() => {
                  setLoginMethod("mobile_otp");
                  setOtpSent(false);
                  setFormData({ ...formData, otp: "" });
                }}
                className={`w-full text-left justify-start space-x-2 ${
                  loginMethod === "mobile_otp" ? "bg-primary shadow-md" : "glass"
                }`}
                data-testid="mobile-otp-method"
              >
                <Smartphone className="w-4 h-4" />
                <div>
                  <div className="font-medium">Mobile + OTP</div>
                  <div className="text-xs opacity-70">Most secure option</div>
                </div>
              </Button>
              
              <Button
                type="button"
                variant={loginMethod === "userid_password" ? "default" : "outline"}
                onClick={() => setLoginMethod("userid_password")}
                className={`w-full text-left justify-start space-x-2 ${
                  loginMethod === "userid_password" ? "bg-primary shadow-md" : "glass"
                }`}
                data-testid="uuid-password-method"
              >
                <User className="w-4 h-4" />
                <div>
                  <div className="font-medium">User ID + Password</div>
                  <div className="text-xs opacity-70">Primary identifier authentication</div>
                </div>
              </Button>
              
              <Button
                type="button"
                variant={loginMethod === "mobile_password" ? "default" : "outline"}
                onClick={() => setLoginMethod("mobile_password")}
                className={`w-full text-left justify-start space-x-2 ${
                  loginMethod === "mobile_password" ? "bg-primary shadow-md" : "glass"
                }`}
                data-testid="mobile-password-method"
              >
                <Phone className="w-4 h-4" />
                <div>
                  <div className="font-medium">Mobile + Password</div>
                  <div className="text-xs opacity-70">Alternative login</div>
                </div>
              </Button>
            </div>
          </div>

          {/* Login Form */}
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Mobile + OTP Form */}
            {loginMethod === "mobile_otp" && (
              <div className="space-y-4">
                <div className="grid grid-cols-3 gap-3">
                  <div className="space-y-2">
                    <Label className="text-foreground">Country Code *</Label>
                    <Select
                      value={formData.countryCode}
                      onValueChange={(value) => setFormData({ ...formData, countryCode: value })}
                    >
                      <SelectTrigger className="form-input text-xs">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="glass-card max-h-60 overflow-y-auto">
                        {globalPhoneCodes.map((code) => (
                          <SelectItem key={code.value} value={code.value} className="text-xs">
                            {code.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="col-span-2 space-y-2">
                    <Label htmlFor="phoneNumber" className="text-foreground">
                      Phone Number *
                    </Label>
                    <div className="relative">
                      <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                      <Input
                        id="phoneNumber"
                        value={formData.phoneNumber}
                        onChange={(e) => setFormData({ ...formData, phoneNumber: e.target.value })}
                        placeholder="Your phone number"
                        className="form-input pl-10"
                        required
                        data-testid="phone-input"
                      />
                    </div>
                  </div>
                </div>

                {/* OTP Section */}
                <div className="glass p-4 rounded-lg space-y-4">
                  <div className="flex items-center space-x-2">
                    <Shield className="w-4 h-4 text-primary" />
                    <span className="text-sm font-medium text-foreground">Secure Login Verification</span>
                  </div>
                  
                  {!otpSent ? (
                    <Button
                      type="button"
                      onClick={sendOtp}
                      disabled={!formData.phoneNumber || sendLoginOtpMutation.isPending}
                      className="w-full bg-primary text-primary-foreground hover:bg-primary/90 font-medium"
                      data-testid="send-login-otp-button"
                    >
                      {sendLoginOtpMutation.isPending ? "Sending..." : "Send Login Code"}
                    </Button>
                  ) : (
                    <div className="space-y-3">
                      <div className="space-y-2">
                        <Label htmlFor="otp" className="text-foreground">
                          Enter Login Code *
                        </Label>
                        <Input
                          id="otp"
                          value={formData.otp}
                          onChange={(e) => setFormData({ ...formData, otp: e.target.value })}
                          placeholder="6-digit code"
                          className="form-input"
                          maxLength={6}
                          data-testid="login-otp-input"
                        />
                      </div>
                      <Button
                        type="button"
                        variant="outline"
                        onClick={() => setOtpSent(false)}
                        className="w-full glass text-xs"
                        data-testid="resend-login-otp-button"
                      >
                        Resend Code
                      </Button>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* User ID + Password Form */}
            {loginMethod === "userid_password" && (
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="userId" className="text-foreground">
                    User ID *
                  </Label>
                  <div className="relative">
                    <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                    <Input
                      id="userId"
                      type="text"
                      value={formData.userId}
                      onChange={(e) => setFormData({ ...formData, userId: e.target.value })}
                      placeholder="Enter your User ID"
                      className="form-input pl-10"
                      required
                      data-testid="uuid-input"
                    />
                  </div>
                  <p className="text-xs text-muted-foreground">
                    Your unique User ID provided during registration
                  </p>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="password" className="text-foreground">
                    Password *
                  </Label>
                  <div className="relative">
                    <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                    <Input
                      id="password"
                      type={showPassword ? "text" : "password"}
                      value={formData.password}
                      onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                      placeholder="Enter your password"
                      className="form-input pl-10 pr-10"
                      required
                      data-testid="password-input"
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      className="absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0"
                      onClick={() => setShowPassword(!showPassword)}
                      data-testid="toggle-password"
                    >
                      {showPassword ? (
                        <EyeOff className="w-4 h-4 text-muted-foreground" />
                      ) : (
                        <Eye className="w-4 h-4 text-muted-foreground" />
                      )}
                    </Button>
                  </div>
                </div>
              </div>
            )}

            {/* Mobile + Password Form */}
            {loginMethod === "mobile_password" && (
              <div className="space-y-4">
                <div className="grid grid-cols-3 gap-3">
                  <div className="space-y-2">
                    <Label className="text-foreground">Country Code *</Label>
                    <Select
                      value={formData.countryCode}
                      onValueChange={(value) => setFormData({ ...formData, countryCode: value })}
                    >
                      <SelectTrigger className="form-input text-xs">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="glass-card max-h-60 overflow-y-auto">
                        {globalPhoneCodes.map((code) => (
                          <SelectItem key={code.value} value={code.value} className="text-xs">
                            {code.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="col-span-2 space-y-2">
                    <Label htmlFor="phoneNumber" className="text-foreground">
                      Phone Number *
                    </Label>
                    <div className="relative">
                      <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                      <Input
                        id="phoneNumber"
                        value={formData.phoneNumber}
                        onChange={(e) => setFormData({ ...formData, phoneNumber: e.target.value })}
                        placeholder="Your phone number"
                        className="form-input pl-10"
                        required
                        data-testid="phone-input"
                      />
                    </div>
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="password" className="text-foreground">
                    Password *
                  </Label>
                  <div className="relative">
                    <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                    <Input
                      id="password"
                      type={showPassword ? "text" : "password"}
                      value={formData.password}
                      onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                      placeholder="Enter your password"
                      className="form-input pl-10 pr-10"
                      required
                      data-testid="password-input"
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      className="absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0"
                      onClick={() => setShowPassword(!showPassword)}
                      data-testid="toggle-password"
                    >
                      {showPassword ? (
                        <EyeOff className="w-4 h-4 text-muted-foreground" />
                      ) : (
                        <Eye className="w-4 h-4 text-muted-foreground" />
                      )}
                    </Button>
                  </div>
                </div>
              </div>
            )}

            {/* Remember Me & Recovery Options */}
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="remember"
                  checked={rememberMe}
                  onCheckedChange={(checked) => setRememberMe(!!checked)}
                  data-testid="remember-checkbox"
                />
                <Label htmlFor="remember" className="text-sm text-muted-foreground cursor-pointer">
                  Remember me
                </Label>
              </div>
              <div className="flex flex-col space-y-1">
                {loginMethod !== "mobile_otp" && (
                  <Link href="/forgot-password">
                    <Button variant="link" className="text-primary p-0 h-auto text-xs">
                      Forgot password?
                    </Button>
                  </Link>
                )}
                <Link href="/account-recovery">
                  <Button variant="link" className="text-secondary p-0 h-auto text-xs">
                    Lost mobile access?
                  </Button>
                </Link>
              </div>
            </div>

            {/* Security Notice based on login method */}
            <div className="glass p-3 rounded-lg">
              <div className="flex items-start space-x-2">
                <AlertCircle className="w-4 h-4 text-yellow-500 mt-0.5" />
                <div className="text-xs text-muted-foreground">
                  {loginMethod === "mobile_otp" && (
                    <span>Most secure login method. OTP expires in 10 minutes.</span>
                  )}
                  {loginMethod === "userid_password" && (
                    <span>Use your unique User ID provided during registration.</span>
                  )}
                  {loginMethod === "mobile_password" && (
                    <span>Alternative login using your registered mobile number.</span>
                  )}
                </div>
              </div>
            </div>

            {/* Submit Button */}
            <NeonButton
              type="submit"
              className="w-full"
              disabled={loginMutation.isPending}
              data-testid="login-submit-button"
            >
              {loginMutation.isPending ? "Signing In..." : "Sign In"}
            </NeonButton>
          </form>

          {/* Method Switch Shortcuts */}
          <div className="relative my-6">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-primary/20" />
            </div>
            <div className="relative flex justify-center text-sm">
              <span className="bg-card px-4 text-muted-foreground">Quick Switch</span>
            </div>
          </div>

          <div className="grid grid-cols-3 gap-2 text-xs">
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={() => setLoginMethod("mobile_otp")}
              className={`glass ${loginMethod === "mobile_otp" ? "ring-1 ring-primary" : ""}`}
              data-testid="switch-mobile-otp"
            >
              📱 OTP
            </Button>
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={() => setLoginMethod("userid_password")}
              className={`glass ${loginMethod === "userid_password" ? "ring-1 ring-primary" : ""}`}
              data-testid="switch-userid"
            >
              👤 User ID
            </Button>
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={() => setLoginMethod("mobile_password")}
              className={`glass ${loginMethod === "mobile_password" ? "ring-1 ring-primary" : ""}`}
              data-testid="switch-mobile-pass"
            >
              📞 Mobile
            </Button>
          </div>

          {/* Register Link */}
          <div className="text-center mt-6">
            <p className="text-muted-foreground text-sm">
              Don't have an account?{" "}
              <Link href="/register">
                <Button variant="link" className="text-primary p-0 h-auto text-sm" data-testid="register-link">
                  Create account
                </Button>
              </Link>
            </p>
          </div>

        </GlassCard>

      </div>
    </div>
  );
}



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/pages/auth/register.tsx
================================================================================
import { useState } from "react";
import { Link, useLocation } from "wouter";
import { useMutation } from "@tanstack/react-query";
import { GlassCard } from "@/components/ui/glass-card";
import { NeonButton } from "@/components/ui/neon-button";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Eye, EyeOff, User, Mail, Phone, Lock, Calendar, MapPin, Shield, Smartphone, FileText, AlertTriangle } from "lucide-react";
import { AnimatedLogo } from "@/components/ui/animated-logo";
import { useToast } from "@/hooks/use-toast";
// AutoTranslate import removed for fast loading
import { apiRequest } from "@/lib/queryClient";
// Import comprehensive global phone codes for all countries worldwide (196+ countries)
import { globalPhoneCodes } from '@/data/global-phone-codes';

export default function Register() {
  const [, setLocation] = useLocation();
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [step, setStep] = useState(1);
  const [otpSent, setOtpSent] = useState(false);
  const [otpVerified, setOtpVerified] = useState(false);
  const [registrationComplete, setRegistrationComplete] = useState(false);
  const [userUuid, setUserUuid] = useState("");
  const [formData, setFormData] = useState({
    // Basic Info
    username: "",
    email: "",
    password: "",
    confirmPassword: "",
    fullName: "",
    
    // Contact Info
    countryCode: "+91",
    phoneNumber: "",
    whatsappNumber: "",
    
    // OTP Verification
    otp: "",
    
    // Birth Details
    dateOfBirth: "",
    timeOfBirth: "",
    placeOfBirth: "",
    
    // Preferences
    preferredLanguage: "en",
    
    // Legal Agreements (Required for legal security)
    agreedToTerms: false,
    agreedToPrivacy: false,
    agreedToDisclaimer: false,
    agreedToReturnPolicy: false,
    dataProcessingConsent: false,
    marketingConsent: false,
  });
  const { toast } = useToast();

  const registerMutation = useMutation({
    mutationFn: async (registerData: any) => {
      const response = await apiRequest("POST", "/api/auth/register", registerData);
      return response.json();
    },
    onSuccess: (data) => {
      localStorage.setItem("token", data.token);
      setUserUuid(data.user.id || data.user.uuid); // Store the UUID for display
      setRegistrationComplete(true); // Show success screen instead of redirect
      toast({
        title: "Registration Successful!",
        description: `Welcome to Jai Guru Astro Remedy, ${data.user.fullName}!`,
      });
    },
    onError: (error: any) => {
      toast({
        title: "Registration Failed",
        description: error.message || "Failed to create account. Please try again.",
        variant: "destructive",
      });
    },
  });

  // OTP Sending Mutation
  const sendOtpMutation = useMutation({
    mutationFn: async (phoneData: { countryCode: string; phoneNumber: string }) => {
      const response = await apiRequest("POST", "/api/auth/send-otp", {
        ...phoneData,
        purpose: "registration"
      });
      return response.json();
    },
    onSuccess: () => {
      setOtpSent(true);
      toast({
        title: "OTP Sent",
        description: "Please check your phone for the verification code",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Failed to Send OTP",
        description: error.message || "Unable to send verification code. Please try again.",
        variant: "destructive",
      });
    },
  });

  // OTP Verification Mutation
  const verifyOtpMutation = useMutation({
    mutationFn: async (otpData: { countryCode: string; phoneNumber: string; otp: string }) => {
      const response = await apiRequest("POST", "/api/auth/verify-otp", otpData);
      return response.json();
    },
    onSuccess: () => {
      setOtpVerified(true);
      toast({
        title: "Phone Verified",
        description: "Your phone number has been successfully verified",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Invalid OTP",
        description: error.message || "The verification code is incorrect. Please try again.",
        variant: "destructive",
      });
    },
  });

  const languages = [
    { value: "en", label: "English" },
    { value: "hi", label: "हिंदी (Hindi)" },
    { value: "bn", label: "বাংলা (Bengali)" },
    { value: "es", label: "Español (Spanish)" },
    { value: "fr", label: "Français (French)" },
    { value: "de", label: "Deutsch (German)" },
    { value: "zh", label: "中文 (Chinese)" },
    { value: "ja", label: "日本語 (Japanese)" },
    { value: "ko", label: "한국어 (Korean)" },
    { value: "ar", label: "العربية (Arabic)" },
  ];

  const validateStep1 = () => {
    if (!formData.username || !formData.password || !formData.confirmPassword || !formData.fullName || !formData.phoneNumber) {
      toast({
        title: "Validation Error",
        description: "Please fill in all required fields (email is optional for recovery)",
        variant: "destructive",
      });
      return false;
    }

    if (formData.password !== formData.confirmPassword) {
      toast({
        title: "Password Mismatch",
        description: "Passwords do not match",
        variant: "destructive",
      });
      return false;
    }

    if (formData.password.length < 6) {
      toast({
        title: "Weak Password",
        description: "Password must be at least 6 characters long",
        variant: "destructive",
      });
      return false;
    }

    return true;
  };

  const validateStep2 = () => {
    if (!formData.phoneNumber) {
      toast({
        title: "Validation Error",
        description: "Phone number is required",
        variant: "destructive",
      });
      return false;
    }
    if (!otpVerified) {
      toast({
        title: "Phone Verification Required",
        description: "Please verify your phone number with OTP",
        variant: "destructive",
      });
      return false;
    }
    return true;
  };

  const validateStep3 = () => {
    const requiredAgreements = [
      formData.agreedToTerms,
      formData.agreedToPrivacy,
      formData.agreedToDisclaimer,
      formData.agreedToReturnPolicy,
      formData.dataProcessingConsent
    ];

    if (!requiredAgreements.every(Boolean)) {
      toast({
        title: "Legal Agreements Required",
        description: "All legal agreements must be accepted to proceed. This is required for your legal protection and ours.",
        variant: "destructive",
      });
      return false;
    }
    return true;
  };

  const sendOtp = () => {
    if (!formData.phoneNumber) {
      toast({
        title: "Phone Number Required",
        description: "Please enter your phone number first",
        variant: "destructive",
      });
      return;
    }
    sendOtpMutation.mutate({
      countryCode: formData.countryCode,
      phoneNumber: formData.phoneNumber,
    });
  };

  const verifyOtp = () => {
    if (!formData.otp) {
      toast({
        title: "OTP Required",
        description: "Please enter the verification code",
        variant: "destructive",
      });
      return;
    }
    verifyOtpMutation.mutate({
      countryCode: formData.countryCode,
      phoneNumber: formData.phoneNumber,
      otp: formData.otp,
    });
  };

  const handleNext = () => {
    if (step === 1 && validateStep1()) {
      setStep(2);
    } else if (step === 2 && validateStep2()) {
      setStep(3);
    } else if (step === 3 && validateStep3()) {
      setStep(4);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateStep3()) return;

    const registerData = {
      step: 4,
      agreements: {
        terms: formData.agreedToTerms,
        privacy: formData.agreedToPrivacy,
        disclaimer: formData.agreedToDisclaimer,
        returnPolicy: formData.agreedToReturnPolicy,
        dataProcessing: formData.dataProcessingConsent,
        marketing: formData.marketingConsent,
      },
      username: formData.username,
      email: formData.email || "",
      password: formData.password,
      fullName: formData.fullName,
      phoneNumber: formData.phoneNumber,
      countryCode: formData.countryCode,
      whatsappNumber: formData.whatsappNumber || formData.phoneNumber,
      dateOfBirth: formData.dateOfBirth,
      timeOfBirth: formData.timeOfBirth,
      placeOfBirth: formData.placeOfBirth,
      preferredLanguage: formData.preferredLanguage,
    };

    registerMutation.mutate(registerData);
  };

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast({
        title: "Copied!",
        description: "UUID copied to clipboard",
      });
    } catch (err) {
      toast({
        title: "Copy Failed",
        description: "Unable to copy to clipboard",
        variant: "destructive",
      });
    }
  };

  // Show success screen with UUID display
  if (registrationComplete) {
    return (
      <div className="min-h-screen pt-16 pb-16 flex items-center justify-center" data-testid="registration-success">
        <div className="max-w-md w-full mx-4">
          <GlassCard className="p-8 text-center space-y-6">
            {/* Success Icon */}
            <div className="w-20 h-20 rounded-full bg-green-500/20 border border-green-500/30 flex items-center justify-center neon-border mx-auto">
              <Shield className="w-10 h-10 text-green-400" />
            </div>

            <div className="space-y-4">
              <h1 className="text-2xl font-bold neon-text text-primary">
                Registration Complete!
              </h1>
              <p className="text-muted-foreground">
                Your account has been successfully created. Save your UUID for future logins.
              </p>
            </div>

            {/* UUID Display Section */}
            <div className="bg-gray-800/40 backdrop-blur-sm p-4 rounded-lg border border-cyan-400/30 space-y-3">
              <h3 className="font-semibold text-cyan-400 flex items-center gap-2">
                <User className="w-4 h-4" />
                Your Unique UUID
              </h3>
              <div className="bg-gray-900/60 p-3 rounded border break-all text-sm font-mono text-white">
                {userUuid}
              </div>
              <Button
                onClick={() => copyToClipboard(userUuid)}
                className="w-full glass"
                size="sm"
              >
                📋 Copy UUID to Clipboard
              </Button>
              <p className="text-xs text-yellow-400 flex items-start gap-2">
                <AlertTriangle className="w-4 h-4 mt-0.5 flex-shrink-0" />
                <span>Save this UUID! You'll need it to login using the "UUID + Password" method.</span>
              </p>
            </div>

            {/* Action Buttons */}
            <div className="space-y-3">
              <NeonButton
                onClick={() => setLocation("/")}
                className="w-full"
              >
                Continue to Dashboard
              </NeonButton>
              <Button
                variant="outline"
                onClick={() => setLocation("/login")}
                className="w-full glass"
              >
                Go to Login Page
              </Button>
            </div>
          </GlassCard>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen pt-16 pb-16 flex items-center justify-center" data-testid="register-page">
      <div className="max-w-md w-full mx-4">
        <GlassCard className="p-8">
          {/* Header */}
          <div className="text-center mb-8">
            <AnimatedLogo />
            <h1 className="text-3xl font-bold neon-text text-primary mb-2" data-testid="register-title">
              Create Account
            </h1>
            <p className="text-muted-foreground">
              Join thousands discovering their cosmic destiny with expert guidance
            </p>
          </div>

          {/* Progress Indicator */}
          <div className="flex items-center justify-center mb-8">
            {[1, 2, 3, 4].map((stepNumber) => (
              <div key={stepNumber} className="flex items-center">
                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold ${
                  step >= stepNumber 
                    ? "bg-primary text-primary-foreground neon-border" 
                    : "bg-muted text-muted-foreground"
                }`}>
                  {stepNumber}
                </div>
                {stepNumber < 4 && (
                  <div className={`w-12 h-0.5 mx-2 ${
                    step > stepNumber ? "bg-primary" : "bg-muted"
                  }`} />
                )}
              </div>
            ))}
          </div>

          {/* Step Labels */}
          <div className="flex items-center justify-center mb-6">
            <div className="text-xs text-muted-foreground text-center">
              {step === 1 && "Basic Information"}
              {step === 2 && "Phone Verification"}
              {step === 3 && "Birth Details & Preferences"}
              {step === 4 && "Legal Agreements"}
            </div>
          </div>

          <form onSubmit={step === 4 ? handleSubmit : undefined} className="space-y-6">
            {/* Step 1: Basic Information */}
            {step === 1 && (
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-foreground mb-4">Basic Information</h3>
                
                <div className="space-y-2">
                  <Label htmlFor="fullName" className="text-foreground">
                    Full Name *
                  </Label>
                  <div className="relative">
                    <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                    <Input
                      id="fullName"
                      value={formData.fullName}
                      onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}
                      placeholder="Enter your full name"
                      className="form-input pl-10"
                      required
                      data-testid="full-name-input"
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="username" className="text-foreground">
                    Username *
                  </Label>
                  <div className="relative">
                    <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                    <Input
                      id="username"
                      value={formData.username}
                      onChange={(e) => setFormData({ ...formData, username: e.target.value })}
                      placeholder="Choose a unique username"
                      className="form-input pl-10"
                      required
                      data-testid="username-input"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-3 gap-3">
                  <div className="space-y-2">
                    <Label className="text-foreground">Country Code *</Label>
                    <Select
                      value={formData.countryCode}
                      onValueChange={(value) => setFormData({ ...formData, countryCode: value })}
                    >
                      <SelectTrigger className="form-input text-xs">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="glass-card max-h-60 overflow-y-auto">
                        {globalPhoneCodes.map((code) => (
                          <SelectItem key={code.value} value={code.value} className="text-xs">
                            {code.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="col-span-2 space-y-2">
                    <Label htmlFor="phoneNumber" className="text-foreground">
                      Mobile Number *
                    </Label>
                    <div className="relative">
                      <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                      <Input
                        id="phoneNumber"
                        value={formData.phoneNumber}
                        onChange={(e) => setFormData({ ...formData, phoneNumber: e.target.value })}
                        placeholder="Your mobile number"
                        className="form-input pl-10"
                        required
                        data-testid="phone-input"
                      />
                    </div>
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="email" className="text-foreground">
                    Email Address (optional for recovery)
                  </Label>
                  <div className="relative">
                    <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                    <Input
                      id="email"
                      type="email"
                      value={formData.email}
                      onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                      placeholder="Enter your email address"
                      className="form-input pl-10"
                      data-testid="email-input"
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="password" className="text-foreground">
                    Password *
                  </Label>
                  <div className="relative">
                    <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                    <Input
                      id="password"
                      type={showPassword ? "text" : "password"}
                      value={formData.password}
                      onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                      placeholder="Create a strong password"
                      className="form-input pl-10 pr-10"
                      required
                      data-testid="password-input"
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      className="absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0"
                      onClick={() => setShowPassword(!showPassword)}
                    >
                      {showPassword ? (
                        <EyeOff className="w-4 h-4 text-muted-foreground" />
                      ) : (
                        <Eye className="w-4 h-4 text-muted-foreground" />
                      )}
                    </Button>
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="confirmPassword" className="text-foreground">
                    Confirm Password *
                  </Label>
                  <div className="relative">
                    <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                    <Input
                      id="confirmPassword"
                      type={showConfirmPassword ? "text" : "password"}
                      value={formData.confirmPassword}
                      onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}
                      placeholder="Confirm your password"
                      className="form-input pl-10 pr-10"
                      required
                      data-testid="confirm-password-input"
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      className="absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0"
                      onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    >
                      {showConfirmPassword ? (
                        <EyeOff className="w-4 h-4 text-muted-foreground" />
                      ) : (
                        <Eye className="w-4 h-4 text-muted-foreground" />
                      )}
                    </Button>
                  </div>
                </div>
              </div>
            )}

            {/* Step 2: Phone Verification */}
            {step === 2 && (
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-foreground mb-4">Phone Verification</h3>
                
                <div className="grid grid-cols-3 gap-3">
                  <div className="space-y-2">
                    <Label className="text-foreground">Country Code *</Label>
                    <Select
                      value={formData.countryCode}
                      onValueChange={(value) => setFormData({ ...formData, countryCode: value })}
                    >
                      <SelectTrigger className="form-input text-xs">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="glass-card max-h-40">
                        {globalPhoneCodes.map((code) => (
                          <SelectItem key={code.value} value={code.value} className="text-xs">
                            {code.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="col-span-2 space-y-2">
                    <Label htmlFor="phoneNumber" className="text-foreground">
                      Phone Number *
                    </Label>
                    <div className="relative">
                      <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                      <Input
                        id="phoneNumber"
                        value={formData.phoneNumber}
                        onChange={(e) => setFormData({ ...formData, phoneNumber: e.target.value })}
                        placeholder="Your phone number"
                        className="form-input pl-10"
                        required
                        data-testid="phone-input"
                      />
                    </div>
                  </div>
                </div>

                {/* OTP Section */}
                <div className="glass p-4 rounded-lg space-y-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <Smartphone className="w-4 h-4 text-primary" />
                      <span className="text-sm font-medium text-foreground">Phone Verification</span>
                    </div>
                    {otpVerified && (
                      <div className="flex items-center space-x-1 text-green-500">
                        <Shield className="w-4 h-4" />
                        <span className="text-xs">Verified</span>
                      </div>
                    )}
                  </div>
                  
                  {!otpSent ? (
                    <Button
                      type="button"
                      onClick={sendOtp}
                      disabled={!formData.phoneNumber || sendOtpMutation.isPending}
                      className="w-full glass"
                      data-testid="send-otp-button"
                    >
                      {sendOtpMutation.isPending ? "Sending..." : "Send Verification Code"}
                    </Button>
                  ) : !otpVerified ? (
                    <div className="space-y-3">
                      <div className="space-y-2">
                        <Label htmlFor="otp" className="text-foreground">
                          Enter Verification Code *
                        </Label>
                        <div className="flex space-x-2">
                          <Input
                            id="otp"
                            value={formData.otp}
                            onChange={(e) => setFormData({ ...formData, otp: e.target.value })}
                            placeholder="6-digit code"
                            className="form-input"
                            maxLength={6}
                            data-testid="otp-input"
                          />
                          <Button
                            type="button"
                            onClick={verifyOtp}
                            disabled={!formData.otp || verifyOtpMutation.isPending}
                            className="glass"
                            data-testid="verify-otp-button"
                          >
                            {verifyOtpMutation.isPending ? "Verifying..." : "Verify"}
                          </Button>
                        </div>
                      </div>
                      <Button
                        type="button"
                        variant="outline"
                        onClick={() => {
                          setOtpSent(false);
                          setFormData({ ...formData, otp: "" });
                        }}
                        className="w-full glass text-xs"
                        data-testid="resend-otp-button"
                      >
                        Resend Code
                      </Button>
                    </div>
                  ) : (
                    <div className="text-center py-2">
                      <p className="text-sm text-green-500">✓ Phone number verified successfully</p>
                    </div>
                  )}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="whatsappNumber" className="text-foreground">
                    WhatsApp Number (Optional)
                  </Label>
                  <div className="relative">
                    <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                    <Input
                      id="whatsappNumber"
                      value={formData.whatsappNumber}
                      onChange={(e) => setFormData({ ...formData, whatsappNumber: e.target.value })}
                      placeholder="WhatsApp number (if different)"
                      className="form-input pl-10"
                      data-testid="whatsapp-input"
                    />
                  </div>
                </div>
              </div>
            )}

            {/* Step 3: Birth Details & Preferences */}
            {step === 3 && (
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-foreground mb-4">Birth Details & Preferences</h3>
                
                <div className="space-y-2">
                  <Label htmlFor="whatsappNumber" className="text-foreground">
                    WhatsApp Number (Optional)
                  </Label>
                  <div className="relative">
                    <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                    <Input
                      id="whatsappNumber"
                      value={formData.whatsappNumber}
                      onChange={(e) => setFormData({ ...formData, whatsappNumber: e.target.value })}
                      placeholder="WhatsApp number (if different)"
                      className="form-input pl-10"
                      data-testid="whatsapp-input"
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="dateOfBirth" className="text-foreground">
                    Date of Birth (Optional)
                  </Label>
                  <div className="relative">
                    <Calendar className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                    <Input
                      id="dateOfBirth"
                      type="date"
                      value={formData.dateOfBirth}
                      onChange={(e) => setFormData({ ...formData, dateOfBirth: e.target.value })}
                      className="form-input pl-10"
                      data-testid="birth-date-input"
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="timeOfBirth" className="text-foreground">
                    Time of Birth (Optional)
                  </Label>
                  <Input
                    id="timeOfBirth"
                    type="time"
                    value={formData.timeOfBirth}
                    onChange={(e) => setFormData({ ...formData, timeOfBirth: e.target.value })}
                    className="form-input"
                    data-testid="birth-time-input"
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="placeOfBirth" className="text-foreground">
                    Place of Birth (Optional)
                  </Label>
                  <div className="relative">
                    <MapPin className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                    <Input
                      id="placeOfBirth"
                      value={formData.placeOfBirth}
                      onChange={(e) => setFormData({ ...formData, placeOfBirth: e.target.value })}
                      placeholder="City, State, Country"
                      className="form-input pl-10"
                      data-testid="birth-place-input"
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label className="text-foreground">Preferred Language</Label>
                  <Select
                    value={formData.preferredLanguage}
                    onValueChange={(value) => setFormData({ ...formData, preferredLanguage: value })}
                  >
                    <SelectTrigger className="form-input">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent className="glass-card">
                      {languages.map((lang) => (
                        <SelectItem key={lang.value} value={lang.value}>
                          {lang.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="glass p-4 rounded-lg">
                  <p className="text-xs text-muted-foreground leading-relaxed">
                    <strong>Astrology Note:</strong> Birth details help provide accurate readings. 
                    All information is kept confidential and used only for astrological analysis.
                  </p>
                </div>
              </div>
            )}

            {/* Step 4: Legal Agreements - Critical for Legal Security */}
            {step === 4 && (
              <div className="space-y-4">
                <div className="flex items-center space-x-2 mb-4">
                  <FileText className="w-5 h-5 text-primary" />
                  <h3 className="text-lg font-semibold text-foreground">Legal Agreements</h3>
                </div>
                
                <div className="glass p-4 rounded-lg border border-yellow-500/20">
                  <div className="flex items-start space-x-2 mb-3">
                    <AlertTriangle className="w-4 h-4 text-yellow-500 mt-0.5" />
                    <p className="text-sm text-yellow-100 leading-relaxed">
                      <strong>Legal Protection Notice:</strong> The following agreements are mandatory for your protection 
                      and ours. Please read each carefully before accepting.
                    </p>
                  </div>
                </div>
                
                <div className="space-y-4">
                  {/* Terms of Service */}
                  <div className="glass p-4 rounded-lg space-y-3">
                    <div className="flex items-start space-x-3">
                      <Checkbox
                        checked={formData.agreedToTerms}
                        onCheckedChange={(checked) => setFormData({ ...formData, agreedToTerms: !!checked })}
                        data-testid="terms-checkbox"
                      />
                      <div className="text-sm text-muted-foreground leading-relaxed">
                        <strong>Terms of Service Agreement *</strong><br />
                        I agree to the{" "}
                        <a href="#" className="text-primary hover:underline">Terms of Service</a>{" "}
                        and understand that:
                        <ul className="mt-2 ml-4 list-disc space-y-1 text-xs">
                          <li>All consultations, courses, and products are non-refundable</li>
                          <li>Clients cannot cancel bookings or purchased items</li>
                          <li>Rescheduling is allowed only when Astrologer cancels due to unavoidable reasons</li>
                          <li>Services are for guidance purposes only</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  {/* Privacy Policy */}
                  <div className="glass p-4 rounded-lg space-y-3">
                    <div className="flex items-start space-x-3">
                      <Checkbox
                        checked={formData.agreedToPrivacy}
                        onCheckedChange={(checked) => setFormData({ ...formData, agreedToPrivacy: !!checked })}
                        data-testid="privacy-checkbox"
                      />
                      <div className="text-sm text-muted-foreground leading-relaxed">
                        <strong>Privacy Policy Agreement *</strong><br />
                        I agree to the{" "}
                        <a href="#" className="text-primary hover:underline">Privacy Policy</a>{" "}
                        and understand how my personal data will be collected, used, and protected.
                      </div>
                    </div>
                  </div>

                  {/* Disclaimer */}
                  <div className="glass p-4 rounded-lg space-y-3">
                    <div className="flex items-start space-x-3">
                      <Checkbox
                        checked={formData.agreedToDisclaimer}
                        onCheckedChange={(checked) => setFormData({ ...formData, agreedToDisclaimer: !!checked })}
                        data-testid="disclaimer-checkbox"
                      />
                      <div className="text-sm text-muted-foreground leading-relaxed">
                        <strong>Disclaimer Agreement *</strong><br />
                        I acknowledge the{" "}
                        <a href="#" className="text-primary hover:underline">Disclaimer</a>{" "}
                        and understand that:
                        <ul className="mt-2 ml-4 list-disc space-y-1 text-xs">
                          <li>Astrology is for guidance and entertainment purposes only</li>
                          <li>Services should not replace professional medical, legal, or financial advice</li>
                          <li>Results and outcomes are not guaranteed</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  {/* Return Policy */}
                  <div className="glass p-4 rounded-lg space-y-3">
                    <div className="flex items-start space-x-3">
                      <Checkbox
                        checked={formData.agreedToReturnPolicy}
                        onCheckedChange={(checked) => setFormData({ ...formData, agreedToReturnPolicy: !!checked })}
                        data-testid="return-policy-checkbox"
                      />
                      <div className="text-sm text-muted-foreground leading-relaxed">
                        <strong>Return Policy Agreement *</strong><br />
                        I agree to the{" "}
                        <a href="#" className="text-primary hover:underline">Return Policy</a>{" "}
                        and understand that:
                        <ul className="mt-2 ml-4 list-disc space-y-1 text-xs">
                          <li>No returns or refunds for any products or services</li>
                          <li>All sales are final upon purchase</li>
                          <li>Hard copy horoscopes are non-returnable</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  {/* Data Processing Consent */}
                  <div className="glass p-4 rounded-lg space-y-3">
                    <div className="flex items-start space-x-3">
                      <Checkbox
                        checked={formData.dataProcessingConsent}
                        onCheckedChange={(checked) => setFormData({ ...formData, dataProcessingConsent: !!checked })}
                        data-testid="data-processing-checkbox"
                      />
                      <div className="text-sm text-muted-foreground leading-relaxed">
                        <strong>Data Processing Consent *</strong><br />
                        I consent to the processing of my personal data including birth details, contact information, 
                        and consultation records for the purpose of providing astrological services.
                      </div>
                    </div>
                  </div>

                  {/* Marketing Consent (Optional) */}
                  <div className="glass p-4 rounded-lg space-y-3">
                    <div className="flex items-start space-x-3">
                      <Checkbox
                        checked={formData.marketingConsent}
                        onCheckedChange={(checked) => setFormData({ ...formData, marketingConsent: !!checked })}
                        data-testid="marketing-checkbox"
                      />
                      <div className="text-sm text-muted-foreground leading-relaxed">
                        <strong>Marketing Communications (Optional)</strong><br />
                        I would like to receive updates about new courses, special offers, 
                        and astrological insights via email and SMS.
                      </div>
                    </div>
                  </div>
                </div>

                <div className="glass p-4 rounded-lg border border-red-500/20">
                  <p className="text-xs text-red-100 leading-relaxed">
                    <strong>Final Notice:</strong> By proceeding, you confirm that you are at least 18 years old, 
                    have read and understood all agreements, and agree to be legally bound by these terms. 
                    All agreements are tracked with timestamps and IP addresses for legal compliance.
                  </p>
                </div>
              </div>
            )}

            {/* Navigation Buttons */}
            <div className="flex justify-between pt-6">
              {step > 1 && (
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setStep(step - 1)}
                  className="glass"
                  data-testid="back-button"
                >
                  Back
                </Button>
              )}
              
              <div className="ml-auto">
                {step < 4 ? (
                  <NeonButton
                    type="button"
                    onClick={handleNext}
                    data-testid="next-button"
                  >
                    {step === 3 ? "Review Legal Terms" : "Next Step"}
                  </NeonButton>
                ) : (
                  <NeonButton
                    type="submit"
                    disabled={registerMutation.isPending}
                    data-testid="register-submit-button"
                  >
                    {registerMutation.isPending ? "Creating Account..." : "Create Account"}
                  </NeonButton>
                )}
              </div>
            </div>
          </form>

          {/* Login Link */}
          <div className="text-center mt-6">
            <p className="text-muted-foreground text-sm">
              Already have an account?{" "}
              <Link href="/login">
                <Button variant="link" className="text-primary p-0 h-auto text-sm" data-testid="login-link">
                  Sign in here
                </Button>
              </Link>
            </p>
          </div>
        </GlassCard>

        {/* Security Notice */}
        <div className="mt-6 text-center space-y-2">
          <p className="text-xs text-muted-foreground">
            🔒 Your data is protected with enterprise-grade security and encryption
          </p>
          <p className="text-xs text-muted-foreground">
            🌟 Join thousands discovering their cosmic destiny with Astrologer Arup Shastri
          </p>
          <p className="text-xs text-yellow-400">
            ⚖️ All legal agreements are tracked for your protection
          </p>
        </div>
      </div>
    </div>
  );
}



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/pages/not-found.tsx
================================================================================
import { Card, CardContent } from "@/components/ui/card";
import { AlertCircle } from "lucide-react";

export default function NotFound() {
  return (
    <div className="min-h-screen w-full flex items-center justify-center bg-gray-50">
      <Card className="w-full max-w-md mx-4">
        <CardContent className="pt-6">
          <div className="flex mb-4 gap-2">
            <AlertCircle className="h-8 w-8 text-red-500" />
            <h1 className="text-2xl font-bold text-gray-900">404 Page Not Found</h1>
          </div>

          <p className="mt-4 text-sm text-gray-600">
            Did you forget to add the page to the router?
          </p>
        </CardContent>
      </Card>
    </div>
  );
}



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/components/booking/BookingSummary.tsx
================================================================================
// File: AstroOracle/client/src/components/booking/BookingSummary.tsx
import { useFormContext } from "react-hook-form";
import { useLanguage } from "@/contexts/LanguageContext";
import { GlassCard } from "@/components/ui/glass-card";
import { consultationTypes, consultationPlans } from "@/data/consultationData";

export default function BookingSummary() {
  const { watch } = useFormContext();
  const { t } = useLanguage();

  const {
    consultationType,
    plan,
    duration,
    price,
    scheduledDate,
    scheduledTime,
  } = watch();

  const typeDetails = consultationTypes.find(t => t.type === consultationType);
  
  return (
    <GlassCard className="p-6 sticky top-24">
      <h3 className="text-xl font-semibold text-foreground mb-4 neon-text">{t("booking.summaryTitle")}</h3>
      <div className="space-y-3 text-sm">
        <div className="flex justify-between">
          <span className="text-muted-foreground">{t("booking.summaryType")}:</span>
          <span className="font-semibold">{typeDetails ? t(typeDetails.titleKey) : "-"}</span>
        </div>
        <div className="flex justify-between">
          <span className="text-muted-foreground">{t("booking.summaryPlan")}:</span>
          <span className="font-semibold">{plan ? t(plan) : "-"}</span>
        </div>
        <div className="flex justify-between">
          <span className="text-muted-foreground">{t("booking.summaryDuration")}:</span>
          <span className="font-semibold">{duration ? `${duration} ${t("booking.minutes")}` : "-"}</span>
        </div>
        <div className="flex justify-between">
          <span className="text-muted-foreground">{t("booking.summaryDateTime")}:</span>
          <span className="font-semibold text-right">
            {scheduledDate ? new Date(scheduledDate).toLocaleDateString() : "-"}
            <br />
            {scheduledTime || ""}
          </span>
        </div>
        <hr className="border-primary/20 !my-4" />
        <div className="flex justify-between text-lg font-bold">
          <span>{t("booking.summaryTotal")}:</span>
          <span className="text-primary neon-text">₹{price || 0}</span>
        </div>
      </div>
    </GlassCard>
  );
}


================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/components/booking/Step1_TypeSelection.tsx
================================================================================
// File: AstroOracle/client/src/components/booking/Step1_TypeSelection.tsx
import { useFormContext } from "react-hook-form";
import { useLanguage } from "@/contexts/LanguageContext";
import { consultationTypes } from "@/data/consultationData";
import { cn } from "@/lib/utils";

export default function Step1_TypeSelection() {
  const { watch, setValue } = useFormContext();
  const { t } = useLanguage();
  const selectedType = watch("consultationType");

  const handleSelectType = (type: string) => {
    setValue("consultationType", type, { shouldValidate: true });
    // Reset dependent fields when type changes
    setValue("plan", undefined);
    setValue("selectedTopics", []);
  };

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-semibold text-foreground neon-text">{t("booking.step1.title")}</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {consultationTypes.map((consultation) => (
          <div
            key={consultation.type}
            className={cn(
              "glass-card p-6 cursor-pointer transition-all text-center",
              selectedType === consultation.type
                ? "neon-border bg-primary/10"
                : "hover:bg-primary/5"
            )}
            onClick={() => handleSelectType(consultation.type)}
          >
            <consultation.icon className={cn(
              "w-10 h-10 mx-auto mb-4",
              selectedType === consultation.type ? "text-primary neon-text" : "text-primary"
            )} />
            <h3 className="font-semibold text-primary mb-2">{t(consultation.titleKey)}</h3>
            <p className="text-xs text-muted-foreground">{t(consultation.descriptionKey)}</p>
            {consultation.noteKey && (
              <p className="text-xs text-yellow-500 mt-2">{t(consultation.noteKey)}</p>
            )}
          </div>
        ))}
      </div>
    </div>
  );
}


================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/components/booking/Step2_PlanAndTopicSelection.tsx
================================================================================
// File: AstroOracle/client/src/components/booking/Step2_PlanAndTopicSelection.tsx
import { useFormContext } from "react-hook-form";
import { useLanguage } from "@/contexts/LanguageContext";
import { consultationPlans, consultationTopics } from "@/data/consultationData";
import { cn } from "@/lib/utils";

export default function Step2_PlanAndTopicSelection() {
  const { watch, setValue, getValues } = useFormContext();
  const { t } = useLanguage();
  const consultationType = watch("consultationType");
  const selectedPlan = watch("plan");
  const selectedTopics = watch("selectedTopics") || [];

  if (!consultationType) {
    return <p className="text-muted-foreground">{t("booking.step2.selectTypeFirst")}</p>;
  }

  const plansForType = consultationPlans[consultationType as keyof typeof consultationPlans] || [];
  const isTopicBased = consultationType === 'topic-based';

  const handlePlanSelect = (plan: any) => {
    setValue("plan", plan.nameKey, { shouldValidate: true });
    setValue("price", plan.price);
    setValue("duration", plan.duration);
  };

  const handleTopicToggle = (topicValue: string) => {
    const currentTopics = getValues("selectedTopics") || [];
    const newTopics = currentTopics.includes(topicValue)
      ? currentTopics.filter((t: string) => t !== topicValue)
      : [...currentTopics, topicValue];
    
    setValue("selectedTopics", newTopics, { shouldValidate: true });
    
    const plan = plansForType[0];
    if (plan && plan.isPerTopic) {
      setValue("price", newTopics.length * plan.price);
      setValue("duration", newTopics.length * plan.duration);
      setValue("plan", newTopics.length > 0 ? plan.nameKey : undefined);
    }
  };

  return (
    <div className="space-y-8">
      <h2 className="text-2xl font-semibold text-foreground neon-text">
        {isTopicBased ? t("booking.step2.selectTopicsTitle") : t("booking.step2.selectPlanTitle")}
      </h2>

      {isTopicBased ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {consultationTopics.map((topic) => (
            <div
              key={topic.value}
              className={cn(
                "glass-card p-4 cursor-pointer transition-all relative",
                selectedTopics.includes(topic.value)
                  ? "neon-border bg-primary/10"
                  : "hover:bg-primary/5"
              )}
              onClick={() => handleTopicToggle(topic.value)}
            >
              <div className="text-2xl text-center mb-2">{topic.icon}</div>
              <h3 className="font-semibold text-center mb-2 text-sm">{t(topic.labelKey)}</h3>
              <p className="text-xs text-muted-foreground text-center">{t(topic.descriptionKey)}</p>
              <div className="text-xs text-center mt-2 text-primary">6 min - ₹100</div>
            </div>
          ))}
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {plansForType.map((plan) => (
            <div
              key={plan.nameKey}
              className={cn(
                "glass-card p-6 cursor-pointer transition-all text-center",
                selectedPlan === plan.nameKey
                  ? "neon-border bg-primary/10"
                  : "hover:bg-primary/5"
              )}
              onClick={() => handlePlanSelect(plan)}
            >
              <h3 className="font-semibold text-xl mb-2">{t(plan.nameKey)}</h3>
              <div className="text-2xl font-bold neon-text text-primary">₹{plan.price}</div>
              <div className="text-sm text-muted-foreground">{plan.duration} {t("booking.minutes")}</div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}


================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/components/booking/Step3_PersonalDetails.tsx
================================================================================
// File: AstroOracle/client/src/components/booking/Step3_PersonalDetails.tsx
import { useFormContext, Controller } from "react-hook-form";
import { useLanguage } from "@/contexts/LanguageContext";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { CalendarIcon, Clock } from "lucide-react";

const countryCodes = [
    { value: "+91", label: "🇮🇳 +91 (India)" },
    { value: "+1", label: "🇺🇸 +1 (USA)" },
    { value: "+44", label: "🇬🇧 +44 (UK)" },
]; // Add more as needed

export default function Step3_PersonalDetails() {
  const { control, formState: { errors } } = useFormContext();
  const { t } = useLanguage();

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-semibold text-foreground neon-text">{t("booking.step3.title")}</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <Controller
          name="fullName"
          control={control}
          render={({ field }) => (
            <div>
              <label className="block text-sm font-medium text-foreground mb-2">{t("booking.fullNameLabel")} *</label>
              <Input {...field} placeholder={t("booking.fullNamePlaceholder")} className="form-input" />
              {errors.fullName && <p className="text-red-400 text-xs mt-1">{errors.fullName.message as string}</p>}
            </div>
          )}
        />
        <Controller
          name="email"
          control={control}
          render={({ field }) => (
            <div>
              <label className="block text-sm font-medium text-foreground mb-2">{t("booking.emailLabel")}</label>
              <Input {...field} type="email" placeholder={t("booking.emailPlaceholder")} className="form-input" />
               {errors.email && <p className="text-red-400 text-xs mt-1">{errors.email.message as string}</p>}
            </div>
          )}
        />
      </div>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
         <Controller
            name="countryCode"
            control={control}
            render={({ field }) => (
                <div>
                    <label className="block text-sm font-medium text-foreground mb-2">{t("booking.countryCodeLabel")} *</label>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <SelectTrigger className="form-input"><SelectValue /></SelectTrigger>
                        <SelectContent className="glass-card">
                            {countryCodes.map(code => <SelectItem key={code.value} value={code.value}>{code.label}</SelectItem>)}
                        </SelectContent>
                    </Select>
                </div>
            )}
         />
         <div className="md:col-span-2">
             <Controller
                name="phoneNumber"
                control={control}
                render={({ field }) => (
                    <div>
                        <label className="block text-sm font-medium text-foreground mb-2">{t("booking.phoneLabel")} *</label>
                        <Input {...field} type="tel" placeholder={t("booking.phonePlaceholder")} className="form-input" />
                        {errors.phoneNumber && <p className="text-red-400 text-xs mt-1">{errors.phoneNumber.message as string}</p>}
                    </div>
                )}
             />
         </div>
      </div>
      <div>
        <h3 className="text-lg font-semibold text-foreground mt-6 mb-4">{t("booking.birthDetailsTitle")}</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <Controller
             name="dateOfBirth"
             control={control}
             render={({ field }) => (
                <div>
                    <label className="block text-sm font-medium text-foreground mb-2">{t("booking.dobLabel")}</label>
                    <div className="relative">
                        <Input type="date" onChange={e => field.onChange(new Date(e.target.value))} className="form-input pr-10"/>
                         <CalendarIcon className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-primary pointer-events-none" />
                    </div>
                </div>
             )}
          />
          <Controller
             name="timeOfBirth"
             control={control}
             render={({ field }) => (
                <div>
                    <label className="block text-sm font-medium text-foreground mb-2">{t("booking.tobLabel")}</label>
                     <div className="relative">
                        <Input type="time" {...field} className="form-input pr-10"/>
                        <Clock className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-primary pointer-events-none" />
                    </div>
                </div>
             )}
          />
          <Controller
             name="placeOfBirth"
             control={control}
             render={({ field }) => (
                <div>
                    <label className="block text-sm font-medium text-foreground mb-2">{t("booking.pobLabel")}</label>
                    <Input {...field} placeholder={t("booking.pobPlaceholder")} className="form-input"/>
                </div>
             )}
          />
        </div>
      </div>
    </div>
  );
}


================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/components/booking/Step4_Schedule.tsx
================================================================================
// File: AstroOracle/client/src/components/booking/Step4_Schedule.tsx
import { useFormContext, Controller } from "react-hook-form";
import { useLanguage } from "@/contexts/LanguageContext";
import { Calendar } from "@/components/ui/calendar";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";

// This should be fetched from an API in a real app
const getAvailableTimeSlots = (date: Date | undefined) => {
    if (!date) return [];
    return ["10:00", "10:30", "11:00", "14:00", "14:30"];
};

export default function Step4_Schedule() {
  const { control, watch, formState: { errors } } = useFormContext();
  const { t } = useLanguage();
  const selectedDate = watch("scheduledDate");
  const timeSlots = getAvailableTimeSlots(selectedDate);

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-semibold text-foreground neon-text">{t("booking.step4.title")}</h2>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <div>
            <label className="block text-sm font-medium text-foreground mb-2">{t("booking.dateLabel")} *</label>
            <Controller
                name="scheduledDate"
                control={control}
                render={({ field }) => (
                    <Calendar
                        mode="single"
                        selected={field.value}
                        onSelect={field.onChange}
                        disabled={(date) => date < new Date(new Date().setDate(new Date().getDate() - 1))}
                        className="glass-card rounded-md"
                    />
                )}
            />
             {errors.scheduledDate && <p className="text-red-400 text-xs mt-1">{errors.scheduledDate.message as string}</p>}
        </div>
        <div className="space-y-6">
          <Controller
             name="scheduledTime"
             control={control}
             render={({ field }) => (
                <div>
                    <label className="block text-sm font-medium text-foreground mb-2">{t("booking.timeLabel")} *</label>
                    <Select onValueChange={field.onChange} defaultValue={field.value} disabled={!selectedDate}>
                        <SelectTrigger className="form-input"><SelectValue placeholder={t("booking.timePlaceholder")} /></SelectTrigger>
                        <SelectContent className="glass-card">
                            {timeSlots.map(time => <SelectItem key={time} value={time}>{time}</SelectItem>)}
                        </SelectContent>
                    </Select>
                    {errors.scheduledTime && <p className="text-red-400 text-xs mt-1">{errors.scheduledTime.message as string}</p>}
                </div>
             )}
          />
           <Controller
             name="language"
             control={control}
             render={({ field }) => (
                <div>
                    <label className="block text-sm font-medium text-foreground mb-2">{t("booking.languageLabel")}</label>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                        <SelectTrigger className="form-input"><SelectValue /></SelectTrigger>
                        <SelectContent className="glass-card">
                            <SelectItem value="en">{t("booking.langEnglish")}</SelectItem>
                            <SelectItem value="hi">{t("booking.langHindi")}</SelectItem>
                            <SelectItem value="bn">{t("booking.langBengali")}</SelectItem>
                        </SelectContent>
                    </Select>
                </div>
             )}
          />
        </div>
      </div>
      <Controller
         name="notes"
         control={control}
         render={({ field }) => (
            <div>
                <label className="block text-sm font-medium text-foreground mb-2">{t("booking.notesLabel")}</label>
                <Textarea {...field} placeholder={t("booking.notesPlaceholder")} className="form-input min-h-[100px]"/>
            </div>
         )}
      />
    </div>
  );
}


================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/components/booking/Step5_Confirmation.tsx
================================================================================
// File: AstroOracle/client/src/components/booking/Step5_Confirmation.tsx
import { useFormContext, Controller } from "react-hook-form";
import { useLanguage } from "@/contexts/LanguageContext";
import { Checkbox } from "@/components/ui/checkbox";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

export default function Step5_Confirmation() {
  const { control, formState: { errors } } = useFormContext();
  const { t } = useLanguage();

  return (
    <div className="space-y-6">
       <h2 className="text-2xl font-semibold text-foreground neon-text">{t("booking.step5.title")}</h2>
       <p className="text-muted-foreground">{t("booking.step5.description")}</p>
       
       <Controller
          name="paymentMethod"
          control={control}
          render={({ field }) => (
            <div>
              <label className="block text-sm font-medium text-foreground mb-2">{t("booking.paymentMethodLabel")} *</label>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <SelectTrigger className="form-input"><SelectValue placeholder={t("booking.paymentMethodPlaceholder")} /></SelectTrigger>
                <SelectContent className="glass-card">
                    <SelectItem value="razorpay">{t("booking.paymentRazorpay")}</SelectItem>
                    <SelectItem value="paypal">{t("booking.paymentPaypal")}</SelectItem>
                </SelectContent>
              </Select>
              {errors.paymentMethod && <p className="text-red-400 text-xs mt-1">{errors.paymentMethod.message as string}</p>}
            </div>
          )}
       />

       <div className="glass-card p-6 rounded-lg">
         <Controller
            name="agreedToTerms"
            control={control}
            render={({ field }) => (
                <div className="flex items-start space-x-3">
                    <Checkbox id="terms" checked={field.value} onCheckedChange={field.onChange} />
                    <div className="grid gap-1.5 leading-none">
                        <label htmlFor="terms" className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                           {t("booking.agreeToTermsLabel")}
                        </label>
                         <p className="text-xs text-muted-foreground">
                            {t("booking.agreeToTermsDescription")} <a href="/terms" className="text-primary hover:underline">{t("termsOfService")}</a>.
                        </p>
                        {errors.agreedToTerms && <p className="text-red-400 text-xs mt-1">{errors.agreedToTerms.message as string}</p>}
                    </div>
                </div>
            )}
         />
       </div>
    </div>
  );
}


================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/components/consultation/chat.tsx
================================================================================
import { useState, useEffect, useRef } from "react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { GlassCard } from "@/components/ui/glass-card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { 
  Send, 
  Image, 
  Mic, 
  Video as VideoIcon, 
  Paperclip, 
  Smile,
  MoreVertical,
  Download,
  Clock
} from "lucide-react";
import { useWebSocket } from "@/hooks/use-websocket";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";


interface Message {
  id: string;
  senderId: string;
  message: string;
  messageType: "text" | "image" | "video" | "voice";
  fileUrl?: string;
  timestamp: string;
}

interface ChatProps {
  consultationId: string;
  messages: Message[];
  isActive: boolean;
}

export default function Chat({ consultationId, messages, isActive }: ChatProps) {
  const [messageText, setMessageText] = useState("");
  const [isRecording, setIsRecording] = useState(false);
  const [recordingTime, setRecordingTime] = useState(0);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const { isConnected, sendMessage } = useWebSocket({
    onMessage: (message) => {
      if (message.type === 'chat_message' && message.consultationId === consultationId) {
        queryClient.invalidateQueries({ 
          queryKey: ["/api/consultations", consultationId, "messages"] 
        });
      }
    }
  });

  const sendMessageMutation = useMutation({
    mutationFn: async (messageData: { message: string; messageType: string; fileUrl?: string }) => {
      const response = await apiRequest("POST", `/api/consultations/${consultationId}/messages`, messageData);
      return response.json();
    },
    onSuccess: (data) => {
      // Send via WebSocket for real-time delivery
      sendMessage({
        type: 'chat_message',
        consultationId,
        senderId: data.senderId,
        message: data.message,
        messageType: data.messageType,
        timestamp: data.timestamp,
      });
      
      queryClient.invalidateQueries({ 
        queryKey: ["/api/consultations", consultationId, "messages"] 
      });
    },
    onError: (error: any) => {
      toast({
        title: "Failed to send message",
        description: error.message || "Please try again",
        variant: "destructive",
      });
    },
  });

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (isRecording) {
      interval = setInterval(() => {
        setRecordingTime(prev => prev + 1);
      }, 1000);
    } else {
      setRecordingTime(0);
    }
    return () => clearInterval(interval);
  }, [isRecording]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  const handleSendMessage = () => {
    if (!messageText.trim() || !isActive) return;

    sendMessageMutation.mutate({
      message: messageText,
      messageType: "text",
    });

    setMessageText("");
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleFileUpload = async (file: File) => {
    if (!file || !isActive) return;

    const formData = new FormData();
    formData.append('file', file);

    try {
      // This would upload file to your storage service
      // For now, we'll simulate the upload
      const fileUrl = URL.createObjectURL(file);
      const messageType = file.type.startsWith('image/') ? 'image' : 
                         file.type.startsWith('video/') ? 'video' : 'text';

      sendMessageMutation.mutate({
        message: file.name,
        messageType,
        fileUrl,
      });

      toast({
        title: "File uploaded",
        description: "Your file has been shared successfully",
      });
    } catch (error) {
      toast({
        title: "Upload failed",
        description: "Failed to upload file. Please try again.",
        variant: "destructive",
      });
    }
  };

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      const chunks: BlobPart[] = [];

      mediaRecorder.ondataavailable = (event) => {
        chunks.push(event.data);
      };

      mediaRecorder.onstop = () => {
        const blob = new Blob(chunks, { type: 'audio/wav' });
        const audioUrl = URL.createObjectURL(blob);
        
        sendMessageMutation.mutate({
          message: `Voice message (${recordingTime}s)`,
          messageType: "voice",
          fileUrl: audioUrl,
        });
        
        stream.getTracks().forEach(track => track.stop());
      };

      mediaRecorderRef.current = mediaRecorder;
      mediaRecorder.start();
      setIsRecording(true);
    } catch (error) {
      toast({
        title: "Recording failed",
        description: "Could not access microphone",
        variant: "destructive",
      });
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
    }
  };

  const formatTime = (timestamp: string) => {
    return new Date(timestamp).toLocaleTimeString([], { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  const formatRecordingTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <div className="h-full flex flex-col" data-testid="chat-component">
      <GlassCard className="flex-1 flex flex-col min-h-[500px]">
        {/* Chat Header */}
        <div className="p-4 border-b border-primary/20 flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <h3 className="font-semibold text-foreground">"Consultation Chat"</h3>
            <div className="flex items-center space-x-2">
              <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`} />
              <span className="text-xs text-muted-foreground">
                {isConnected ? "Connected" : "Connecting..."}
              </span>
            </div>
          </div>
          
          {!isActive && (
            <Badge variant="secondary" className="text-xs">
              "Chat Disabled"
            </Badge>
          )}
        </div>

        {/* Messages Area */}
        <div className="flex-1 p-4 overflow-y-auto space-y-4 max-h-96">
          {messages.length === 0 ? (
            <div className="text-center py-8">
              <div className="w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4">
                <Smile className="w-8 h-8 text-primary" />
              </div>
              <p className="text-muted-foreground">
                {isActive ? "Start your conversation here" : "Chat will be available when consultation begins"}
              </p>
            </div>
          ) : (
            messages.map((message) => (
              <div key={message.id} className="flex flex-col space-y-1" data-testid={`message-${message.id}`}>
                <div className="flex items-end space-x-2">
                  <div className="flex-1">
                    <div className={`p-3 rounded-lg max-w-xs lg:max-w-md ${
                      message.senderId === 'current-user' // This should be replaced with actual user ID check
                        ? 'bg-primary text-primary-foreground ml-auto'
                        : 'bg-muted text-foreground'
                    }`}>
                      {message.messageType === "text" && (
                        <p className="text-sm whitespace-pre-wrap">{message.message}</p>
                      )}
                      
                      {message.messageType === "image" && message.fileUrl && (
                        <div>
                          <img 
                            src={message.fileUrl} 
                            alt={"Shared image"} 
                            className="rounded max-w-full h-auto mb-2"
                          />
                          <p className="text-xs opacity-80">{message.message}</p>
                        </div>
                      )}
                      
                      {message.messageType === "voice" && message.fileUrl && (
                        <div className="flex items-center space-x-2">
                          <audio controls className="max-w-full">
                            <source src={message.fileUrl} type="audio/wav" />
                          </audio>
                        </div>
                      )}
                      
                      {message.messageType === "video" && message.fileUrl && (
                        <div>
                          <video 
                            controls 
                            className="rounded max-w-full h-auto mb-2"
                            style={{ maxHeight: '200px' }}
                          >
                            <source src={message.fileUrl} type="video/mp4" />
                          </video>
                          <p className="text-xs opacity-80">{message.message}</p>
                        </div>
                      )}
                    </div>
                    
                    <div className="flex items-center space-x-2 mt-1">
                      <span className="text-xs text-muted-foreground">
                        {formatTime(message.timestamp)}
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            ))
          )}
          <div ref={messagesEndRef} />
        </div>

        {/* Message Input */}
        {isActive && (
          <div className="p-4 border-t border-primary/20">
            {isRecording ? (
              <div className="flex items-center space-x-4 p-3 glass rounded-lg">
                <div className="flex items-center space-x-2 flex-1">
                  <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse" />
                  <span className="text-sm text-foreground">Recording...</span>
                  <span className="text-sm font-mono text-primary">
                    {formatRecordingTime(recordingTime)}
                  </span>
                </div>
                <Button
                  variant="destructive"
                  size="sm"
                  onClick={stopRecording}
                  data-testid="stop-recording-button"
                >
                  Stop
                </Button>
              </div>
            ) : (
              <div className="flex items-end space-x-2">
                <div className="flex-1">
                  <Textarea
                    value={messageText}
                    onChange={(e) => setMessageText(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder={"Type your message... (Press Enter to send, Shift+Enter for new line)"}
                    className="form-input min-h-[60px] max-h-32 resize-none"
                    disabled={sendMessageMutation.isPending}
                    data-testid="message-input"
                  />
                </div>
                
                <div className="flex flex-col space-y-2">
                  {/* File Upload Options */}
                  <div className="flex space-x-1">
                    <input
                      type="file"
                      ref={fileInputRef}
                      onChange={(e) => {
                        const file = e.target.files?.[0];
                        if (file) handleFileUpload(file);
                      }}
                      accept="image/*,video/*"
                      className="hidden"
                    />
                    
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => fileInputRef.current?.click()}
                      className="glass p-2"
                      title="Upload Image/Video"
                      data-testid="file-upload-button"
                    >
                      <Paperclip className="w-4 h-4" />
                    </Button>
                    
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={startRecording}
                      className="glass p-2"
                      title={"Record Voice Message"}
                      data-testid="record-voice-button"
                    >
                      <Mic className="w-4 h-4" />
                    </Button>
                  </div>
                  
                  {/* Send Button */}
                  <Button
                    onClick={handleSendMessage}
                    disabled={!messageText.trim() || sendMessageMutation.isPending}
                    className="neon-button p-2"
                    title={"Send Message"}
                    data-testid="send-message-button"
                  >
                    <Send className="w-4 h-4" />
                  </Button>
                </div>
              </div>
            )}
          </div>
        )}
      </GlassCard>
    </div>
  );
}



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/components/consultation/video-call.tsx
================================================================================
import { useEffect, useRef, useState } from "react";
import { GlassCard } from "@/components/ui/glass-card";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { 
  Video, 
  VideoOff, 
  Mic, 
  MicOff, 
  Phone, 
  PhoneOff, 
  Settings, 
  Users,
  Monitor,
  Volume2,
  VolumeX,
  Camera,
  CameraOff
} from "lucide-react";
import { initializeJitsi, JitsiMeetInstance } from "@/lib/jitsi";
import { useToast } from "@/hooks/use-toast";


interface VideoCallProps {
  consultationId: string;
  isAstrologer: boolean;
  onEndCall: () => void;
}

export default function VideoCall({ consultationId, isAstrologer, onEndCall }: VideoCallProps) {
  const jitsiContainerRef = useRef<HTMLDivElement>(null);
  const [jitsiInstance, setJitsiInstance] = useState<JitsiMeetInstance | null>(null);
  const [isVideoEnabled, setIsVideoEnabled] = useState(true);
  const [isAudioEnabled, setIsAudioEnabled] = useState(true);
  const [isCallActive, setIsCallActive] = useState(false);
  const [participants, setParticipants] = useState(1);
  const [videoQuality, setVideoQuality] = useState("auto");
  const [selectedBackground, setSelectedBackground] = useState("none");
  const { toast } = useToast();

  const backgrounds = [
    { value: "none", label: "No Background" },
    { value: "space1", label: "Cosmic Galaxy" },
    { value: "space2", label: "Starry Night" },
    { value: "space3", label: "Nebula View" },
    { value: "planets", label: "Solar System" },
    { value: "astro1", label: "Zodiac Circle" },
    { value: "astro2", label: "Sacred Geometry" },
  ];

  const videoQualities = [
    { value: "auto", label: "Auto (Recommended)" },
    { value: "240", label: "240p" },
    { value: "360", label: "360p" },
    { value: "480", label: "480p" },
    { value: "720", label: "720p (HD)" },
    { value: "1080", label: "1080p (Full HD)" },
  ];

  useEffect(() => {
    if (jitsiContainerRef.current) {
      initializeJitsiMeet();
    }

    return () => {
      if (jitsiInstance) {
        jitsiInstance.dispose();
      }
    };
  }, []);

  const initializeJitsiMeet = async () => {
    if (!jitsiContainerRef.current) return;

    try {
      const roomName = `consultation-${consultationId}`;
      const displayName = isAstrologer ? "Astrologer Arup Shastri (Jai Guru)" : "Client";

      const instance = await initializeJitsi({
        parentNode: jitsiContainerRef.current,
        roomName,
        displayName,
        configOverwrite: {
          startWithAudioMuted: false,
          startWithVideoMuted: false,
          enableWelcomePage: false,
          enableClosePage: false,
          prejoinPageEnabled: false,
          disableModeratorIndicator: false,
          defaultLanguage: "en",
          resolution: videoQuality === "auto" ? undefined : parseInt(videoQuality),
          constraints: {
            video: {
              height: { 
                ideal: videoQuality === "auto" ? 720 : parseInt(videoQuality),
                max: isAstrologer ? 1080 : 720
              }
            }
          },
          // Custom branding for astrologer
          ...(isAstrologer && {
            brandingRoomAlias: "Jai Guru Astro Remedy",
            toolbarButtons: [
              'microphone', 'camera', 'closedcaptions', 'desktop', 
              'fullscreen', 'fodeviceselection', 'hangup', 'profile',
              'chat', 'recording', 'livestreaming', 'etherpad', 
              'sharedvideo', 'settings', 'raisehand', 'videoquality',
              'filmstrip', 'invite', 'feedback', 'stats', 'shortcuts',
              'tileview', 'videobackgroundblur', 'download', 'help'
            ]
          })
        },
        interfaceConfigOverwrite: {
          SHOW_JITSI_WATERMARK: false,
          SHOW_WATERMARK_FOR_GUESTS: false,
          SHOW_BRAND_WATERMARK: false,
          BRAND_WATERMARK_LINK: "",
          SHOW_POWERED_BY: false,
          DEFAULT_LOGO_URL: isAstrologer ? "/logo-jg.png" : "",
          APP_NAME: "Jai Guru Astro Remedy",
          NATIVE_APP_NAME: "Jai Guru Astro Remedy",
          PROVIDER_NAME: "Astrologer Arup Shastri",
          DISABLE_JOIN_LEAVE_NOTIFICATIONS: true,
          DISABLE_PRESENCE_STATUS: false,
          DISPLAY_WELCOME_PAGE_CONTENT: false,
          DISPLAY_WELCOME_PAGE_TOOLBAR_ADDITIONAL_CONTENT: false,
          HIDE_INVITE_MORE_HEADER: true,
          JITSI_WATERMARK_LINK: "",
          LANG_DETECTION: false,
          LOCAL_THUMBNAIL_RATIO: 16 / 9,
          MAXIMUM_ZOOMING_COEFFICIENT: 1.3,
          MOBILE_APP_PROMO: false,
          OPTIMAL_BROWSERS: ["chrome", "chromium", "firefox", "nwjs", "electron", "safari"],
          POLICY_LOGO: null,
          RECENT_LIST_ENABLED: false,
          REMOTE_THUMBNAIL_RATIO: 1,
          SETTINGS_SECTIONS: ["devices", "language", "moderator", "profile", "calendar"],
          SHOW_CHROME_EXTENSION_BANNER: false,
          TOOLBAR_TIMEOUT: 4000,
          UNSUPPORTED_BROWSERS: [],
          VIDEO_LAYOUT_FIT: "both"
        },
        onApiReady: (api) => {
          setJitsiInstance(api);
          setIsCallActive(true);

          // Add event listeners
          api.addEventListener('participantJoined', (participant: any) => {
            setParticipants(prev => prev + 1);
            toast({
              title: "Participant Joined",
              description: `${participant.displayName} has joined the consultation`,
            });
          });

          api.addEventListener('participantLeft', (participant: any) => {
            setParticipants(prev => Math.max(1, prev - 1));
            toast({
              title: "Participant Left",
              description: `${participant.displayName} has left the consultation`,
            });
          });

          api.addEventListener('videoConferenceJoined', () => {
            setIsCallActive(true);
            
            // Apply astrologer-specific settings
            if (isAstrologer) {
              // Set custom avatar or background
              if (selectedBackground !== "none") {
                api.executeCommand('toggleVirtualBackground', selectedBackground);
              }
            }
          });

          api.addEventListener('videoConferenceLeft', () => {
            setIsCallActive(false);
            onEndCall();
          });

          api.addEventListener('audioMuteStatusChanged', (muted: boolean) => {
            setIsAudioEnabled(!muted);
          });

          api.addEventListener('videoMuteStatusChanged', (muted: boolean) => {
            setIsVideoEnabled(!muted);
          });
        }
      });

    } catch (error) {
      console.error("Failed to initialize Jitsi Meet:", error);
      toast({
        title: "Video Call Error",
        description: "Failed to initialize video call. Please check your connection.",
        variant: "destructive",
      });
    }
  };

  const toggleVideo = () => {
    if (jitsiInstance) {
      jitsiInstance.executeCommand('toggleVideo');
    }
  };

  const toggleAudio = () => {
    if (jitsiInstance) {
      jitsiInstance.executeCommand('toggleAudio');
    }
  };

  const hangUp = () => {
    if (jitsiInstance) {
      jitsiInstance.executeCommand('hangup');
    }
    onEndCall();
  };

  const changeVideoQuality = (quality: string) => {
    setVideoQuality(quality);
    if (jitsiInstance) {
      if (quality === "auto") {
        jitsiInstance.executeCommand('setVideoQuality', -1);
      } else {
        jitsiInstance.executeCommand('setVideoQuality', parseInt(quality));
      }
    }
  };

  const changeBackground = (background: string) => {
    setSelectedBackground(background);
    if (jitsiInstance && background !== "none") {
      jitsiInstance.executeCommand('toggleVirtualBackground', background);
    } else if (jitsiInstance) {
      jitsiInstance.executeCommand('toggleVirtualBackground', false);
    }
  };

  return (
    <div className="space-y-6" data-testid="video-call">
      {/* Video Call Container */}
      <GlassCard className="p-0 overflow-hidden min-h-[500px]">
        <div 
          ref={jitsiContainerRef} 
          className="w-full h-full min-h-[500px] rounded-xl overflow-hidden"
          data-testid="jitsi-container"
        />
      </GlassCard>

      {/* Controls */}
      <GlassCard className="p-6">
        <div className="flex flex-col space-y-4">
          {/* Primary Controls */}
          <div className="flex items-center justify-center space-x-4">
            <Button
              variant={isAudioEnabled ? "default" : "destructive"}
              size="lg"
              onClick={toggleAudio}
              className="rounded-full w-12 h-12 p-0"
              data-testid="toggle-audio-button"
            >
              {isAudioEnabled ? <Mic className="w-5 h-5" /> : <MicOff className="w-5 h-5" />}
            </Button>

            <Button
              variant={isVideoEnabled ? "default" : "destructive"}
              size="lg"
              onClick={toggleVideo}
              className="rounded-full w-12 h-12 p-0"
              data-testid="toggle-video-button"
            >
              {isVideoEnabled ? <Video className="w-5 h-5" /> : <VideoOff className="w-5 h-5" />}
            </Button>

            <Button
              variant="destructive"
              size="lg"
              onClick={hangUp}
              className="rounded-full w-12 h-12 p-0"
              data-testid="hang-up-button"
            >
              <PhoneOff className="w-5 h-5" />
            </Button>
          </div>

          {/* Status Info */}
          <div className="flex items-center justify-center space-x-6 text-sm text-muted-foreground">
            <div className="flex items-center space-x-2">
              <Users className="w-4 h-4" />
              <span data-testid="participant-count">{participants} participant{participants !== 1 ? 's' : ''}</span>
            </div>
            {isCallActive && (
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse" />
                <span>Call Active</span>
              </div>
            )}
          </div>

          {/* Advanced Controls */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 pt-4 border-t border-primary/20">
            <div>
              <label className="block text-sm font-medium text-foreground mb-2">
                Video Quality
              </label>
              <Select value={videoQuality} onValueChange={changeVideoQuality}>
                <SelectTrigger className="form-input">
                  <Monitor className="w-4 h-4 mr-2" />
                  <SelectValue />
                </SelectTrigger>
                <SelectContent className="glass-card">
                  {videoQualities.map((quality) => (
                    <SelectItem key={quality.value} value={quality.value}>
                      {quality.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {isAstrologer && (
              <div>
                <label className="block text-sm font-medium text-foreground mb-2">
                  Background
                </label>
                <Select value={selectedBackground} onValueChange={changeBackground}>
                  <SelectTrigger className="form-input">
                    <Camera className="w-4 h-4 mr-2" />
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent className="glass-card">
                    {backgrounds.map((bg) => (
                      <SelectItem key={bg.value} value={bg.value}>
                        {bg.label}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            )}
          </div>

          {/* Tips for Better Experience */}
          <div className="glass p-4 rounded-lg">
            <h4 className="font-semibold text-foreground mb-2">Tips for Better Experience</h4>
            <ul className="text-sm text-muted-foreground space-y-1">
              <li>• Ensure stable internet connection for HD quality</li>
              <li>• Use headphones to avoid echo</li>
              <li>• Position camera at eye level for better interaction</li>
              <li>• Keep good lighting on your face</li>
              {isAstrologer && <li>• Use virtual backgrounds to maintain professional appearance</li>}
            </ul>
          </div>
        </div>
      </GlassCard>
    </div>
  );
}



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/components/support/ai-chatbot.tsx
================================================================================
import { useState, useEffect, useRef } from "react";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { GlassCard } from "@/components/ui/glass-card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { 
  MessageCircle, 
  Send, 
  X, 
  Bot, 
  User, 
  ThumbsUp, 
  ThumbsDown,
  Minimize2,
  Maximize2,
  HelpCircle,
  Sparkles
} from "lucide-react";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import type { SupportChatMessage } from "@shared/schema";
// AutoTranslate import removed - using t() function instead
import { useLanguage } from "@/contexts/LanguageContext";

interface ChatSession {
  sessionId: string;
  messages: SupportChatMessage[];
}

export default function AIChatbot() {
  const [isOpen, setIsOpen] = useState(false);
  const [message, setMessage] = useState("");
  const [sessionId, setSessionId] = useState<string>("");
  const [isMinimized, setIsMinimized] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const { t } = useLanguage();

  // Generate session ID on mount
  useEffect(() => {
    if (!sessionId) {
      const newSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      setSessionId(newSessionId);
    }
  }, [sessionId]);

  // Get chat messages for current session
  const { data: chatSession } = useQuery<{ messages: SupportChatMessage[] }>({
    queryKey: ["/api/support-chat", sessionId],
    enabled: !!sessionId && isOpen,
  });

  // Send message mutation
  const sendMessageMutation = useMutation({
    mutationFn: async (messageData: { message: string; sessionId: string }) => {
      setIsTyping(true);
      const response = await apiRequest("POST", "/api/support-chat/message", messageData);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/support-chat", sessionId] });
      setMessage("");
      setIsTyping(false);
    },
    onError: () => {
      setIsTyping(false);
      toast({
        title: t("error") || "Error",
        description: t("failedToSendMessage") || "Failed to send message. Please try again.",
        variant: "destructive",
      });
    }
  });

  // Rate message mutation
  const rateMessageMutation = useMutation({
    mutationFn: async ({ messageId, isHelpful }: { messageId: string; isHelpful: boolean }) => {
      const response = await apiRequest("POST", `/api/support-chat/rate/${messageId}`, { isHelpful });
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/support-chat", sessionId] });
    }
  });

  // Auto-scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [chatSession?.messages]);

  const handleSendMessage = () => {
    if (!message.trim() || !sessionId) return;
    
    sendMessageMutation.mutate({
      message: message.trim(),
      sessionId
    });
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleRateMessage = (messageId: string, isHelpful: boolean) => {
    rateMessageMutation.mutate({ messageId, isHelpful });
  };

  if (!isOpen) {
    return (
      <Button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-6 right-24 w-14 h-14 rounded-full shadow-2xl neon-button z-50 group"
        style={{ 
          background: 'linear-gradient(135deg, hsl(279, 100%, 50%) 0%, hsl(195, 100%, 50%) 100%)',
          boxShadow: '0 0 30px rgba(186, 85, 211, 0.6), 0 8px 25px rgba(0, 0, 0, 0.3)'
        }}
        data-testid="chatbot-open-button"
      >
        <MessageCircle className="w-6 h-6 text-white group-hover:scale-110 transition-transform" />
        <div className="absolute -top-2 -right-2 w-6 h-6 bg-primary rounded-full flex items-center justify-center animate-pulse">
          <Sparkles className="w-3 h-3 text-primary-foreground" />
        </div>
      </Button>
    );
  }

  return (
    <div className="fixed bottom-6 right-24 z-50" data-testid="chatbot-widget">
      <GlassCard 
        className={`w-96 transition-all duration-300 ${
          isMinimized ? 'h-16' : 'h-[600px]'
        }`}
        style={{
          background: 'linear-gradient(135deg, rgba(14, 8, 30, 0.95) 0%, rgba(26, 11, 46, 0.95) 100%)',
          backdropFilter: 'blur(20px) saturate(1.8)',
          border: '1px solid rgba(186, 85, 211, 0.3)',
          boxShadow: '0 20px 40px rgba(0, 0, 0, 0.6), 0 0 30px rgba(186, 85, 211, 0.2)'
        }}
      >
        {/* Header */}
        <div className="p-4 border-b border-primary/20 flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
              <Bot className="w-5 h-5 text-white" />
            </div>
            <div>
              <h3 className="font-semibold text-primary neon-text">AI Assistant</h3>
              <p className="text-xs text-muted-foreground">
                {isTyping ? "Typing..." : "Online • Here to help"}
              </p>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsMinimized(!isMinimized)}
              className="text-muted-foreground hover:text-primary"
              data-testid="chatbot-minimize-button"
            >
              {isMinimized ? <Maximize2 className="w-4 h-4" /> : <Minimize2 className="w-4 h-4" />}
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsOpen(false)}
              className="text-muted-foreground hover:text-primary"
              data-testid="chatbot-close-button"
            >
              <X className="w-4 h-4" />
            </Button>
          </div>
        </div>

        {!isMinimized && (
          <>
            {/* Messages */}
            <div className="flex-1 p-4 space-y-4 overflow-y-auto max-h-[440px]" data-testid="chatbot-messages">
              {!chatSession?.messages || chatSession.messages.length === 0 ? (
                <div className="text-center py-8">
                  <div className="w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-4">
                    <HelpCircle className="w-8 h-8 text-white" />
                  </div>
                  <h4 className="font-semibold text-primary mb-2">Welcome to AI Support!</h4>
                  <p className="text-sm text-muted-foreground mb-4">
                    I'm here to help with questions about consultations, courses, products, and more.
                  </p>
                  <div className="space-y-2">
                    <Badge variant="outline" className="mr-2">Consultation Booking</Badge>
                    <Badge variant="outline" className="mr-2">Course Information</Badge>
                    <Badge variant="outline" className="mr-2">Product Details</Badge>
                    <Badge variant="outline">Technical Support</Badge>
                  </div>
                </div>
              ) : (
                chatSession.messages.map((msg, index) => (
                  <div
                    key={index}
                    className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'} mb-4`}
                  >
                    <div className={`flex max-w-[80%] ${msg.sender === 'user' ? 'flex-row-reverse' : 'flex-row'} items-start space-x-2`}>
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                        msg.sender === 'user' ? 'bg-primary ml-2' : 'bg-gradient-to-br from-purple-500 to-pink-500 mr-2'
                      }`}>
                        {msg.sender === 'user' ? (
                          <User className="w-4 h-4 text-primary-foreground" />
                        ) : (
                          <Bot className="w-4 h-4 text-white" />
                        )}
                      </div>
                      <div className={`glass p-3 rounded-lg ${
                        msg.sender === 'user' 
                          ? 'bg-primary/20 border-primary/30' 
                          : 'bg-secondary/20 border-secondary/30'
                      }`}>
                        <p className="text-sm text-foreground">{msg.message}</p>
                        <p className="text-xs text-muted-foreground mt-1">
                          {msg.createdAt ? new Date(msg.createdAt).toLocaleTimeString() : ''}
                        </p>
                        {msg.sender === 'bot' && (
                          <div className="flex items-center space-x-2 mt-2">
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => handleRateMessage(msg.id, true)}
                              className="text-xs text-muted-foreground hover:text-green-500"
                              disabled={msg.isHelpful !== undefined}
                            >
                              <ThumbsUp className="w-3 h-3 mr-1" />
                              {msg.isHelpful === true ? t("helpful") : ""}
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => handleRateMessage(msg.id, false)}
                              className="text-xs text-muted-foreground hover:text-red-500"
                              disabled={msg.isHelpful !== undefined}
                            >
                              <ThumbsDown className="w-3 h-3 mr-1" />
                              {msg.isHelpful === false ? t("notHelpful") : ""}
                            </Button>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                ))
              )}
              
              {isTyping && (
                <div className="flex justify-start mb-4">
                  <div className="flex items-start space-x-2">
                    <div className="w-8 h-8 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center">
                      <Bot className="w-4 h-4 text-white" />
                    </div>
                    <div className="glass p-3 rounded-lg bg-secondary/20 border-secondary/30">
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-secondary rounded-full animate-bounce"></div>
                        <div className="w-2 h-2 bg-secondary rounded-full animate-bounce delay-100"></div>
                        <div className="w-2 h-2 bg-secondary rounded-full animate-bounce delay-200"></div>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              <div ref={messagesEndRef} />
            </div>

            {/* Input */}
            <div className="p-4 border-t border-primary/20">
              <div className="flex space-x-2">
                <Input
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder={t("askAnything") || "Ask me anything about our services..."}
                  className="flex-1 bg-background/50 border-primary/30 focus:border-primary"
                  disabled={sendMessageMutation.isPending}
                  data-testid="chatbot-input"
                />
                <Button
                  onClick={handleSendMessage}
                  disabled={!message.trim() || sendMessageMutation.isPending}
                  className="neon-button"
                  data-testid="chatbot-send-button"
                >
                  <Send className="w-4 h-4" />
                </Button>
              </div>
              <p className="text-xs text-muted-foreground mt-2 text-center">
                AI responses are generated automatically. For complex issues, request human support.
              </p>
            </div>
          </>
        )}
      </GlassCard>
    </div>
  );
}


================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/components/support/chatbot-provider.tsx
================================================================================
import { useState, createContext, useContext } from "react";
import AIChatbot from "./ai-chatbot";

interface ChatbotContextType {
  isOpen: boolean;
  openChatbot: () => void;
  closeChatbot: () => void;
  toggleChatbot: () => void;
}

const ChatbotContext = createContext<ChatbotContextType | undefined>(undefined);

export function useChatbot() {
  const context = useContext(ChatbotContext);
  if (!context) {
    throw new Error("useChatbot must be used within a ChatbotProvider");
  }
  return context;
}

interface ChatbotProviderProps {
  children: React.ReactNode;
}

export function ChatbotProvider({ children }: ChatbotProviderProps) {
  const [isOpen, setIsOpen] = useState(false);

  const openChatbot = () => setIsOpen(true);
  const closeChatbot = () => setIsOpen(false);
  const toggleChatbot = () => setIsOpen(!isOpen);

  return (
    <ChatbotContext.Provider value={{ isOpen, openChatbot, closeChatbot, toggleChatbot }}>
      {children}
      <AIChatbot isOpen={isOpen} onToggle={toggleChatbot} />
    </ChatbotContext.Provider>
  );
}


================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/hooks/use-websocket.tsx
================================================================================
import { useEffect, useRef, useState } from "react";
import { useToast } from "@/hooks/use-toast";
import { useLanguage } from "@/contexts/LanguageContext";

interface WebSocketMessage {
  type: string;
  [key: string]: any;
}

interface UseWebSocketProps {
  onMessage?: (message: WebSocketMessage) => void;
  onConnect?: () => void;
  onDisconnect?: () => void;
  reconnectAttempts?: number;
  reconnectInterval?: number;
}

export function useWebSocket({
  onMessage,
  onConnect,
  onDisconnect,
  reconnectAttempts = 5,
  reconnectInterval = 3000,
}: UseWebSocketProps = {}) {
  const [isConnected, setIsConnected] = useState(false);
  const [connectionState, setConnectionState] = useState<'connecting' | 'connected' | 'disconnected' | 'error'>('disconnected');
  const socketRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const attemptCountRef = useRef(0);
  const { toast } = useToast();
  const { t } = useLanguage();

  const connect = () => {
    // Temporarily disable WebSocket connections to fix admin navigation
    console.log('WebSocket connection disabled for admin functionality');
    setConnectionState('disconnected');
    setIsConnected(false);
    return;
    
    if (socketRef.current?.readyState === WebSocket.OPEN) {
      return;
    }

    setConnectionState('connecting');

    try {
      // Determine the WebSocket protocol and URL
      // Fix for localhost:undefined error
      const host = window.location.host || 'localhost:5000';
      const protocol = window.location.protocol === "https:" ? "wss:" : "ws:";
      const wsUrl = `${protocol}//${host}/ws`;
      
      const socket = new WebSocket(wsUrl);
      socketRef.current = socket;

      socket.onopen = () => {
        setIsConnected(true);
        setConnectionState('connected');
        attemptCountRef.current = 0;
        onConnect?.();
        
        toast({
          title: t("connected") || "Connected",
          description: t("connectionEstablished") || "Real-time connection established",
        });
      };

      socket.onmessage = (event) => {
        try {
          const message = JSON.parse(event.data);
          onMessage?.(message);
        } catch (error) {
          console.error("Failed to parse WebSocket message:", error);
        }
      };

      socket.onclose = (event) => {
        setIsConnected(false);
        setConnectionState('disconnected');
        onDisconnect?.();

        // Only attempt reconnection if it wasn't a manual close
        if (event.code !== 1000 && attemptCountRef.current < reconnectAttempts) {
          scheduleReconnect();
        } else if (attemptCountRef.current >= reconnectAttempts) {
          toast({
            title: "Connection Failed",
            description: "Unable to establish real-time connection. Please refresh the page.",
            variant: "destructive",
          });
        }
      };

      socket.onerror = () => {
        setConnectionState('error');
        console.error("WebSocket connection error");
      };

    } catch (error) {
      console.error("Failed to create WebSocket connection:", error);
      setConnectionState('error');
      scheduleReconnect();
    }
  };

  const scheduleReconnect = () => {
    if (attemptCountRef.current < reconnectAttempts) {
      attemptCountRef.current += 1;
      
      reconnectTimeoutRef.current = setTimeout(() => {
        console.log(`Reconnection attempt ${attemptCountRef.current}/${reconnectAttempts}`);
        connect();
      }, reconnectInterval * attemptCountRef.current); // Exponential backoff
    }
  };

  const disconnect = () => {
    if (reconnectTimeoutRef.current) {
      clearTimeout(reconnectTimeoutRef.current);
      reconnectTimeoutRef.current = null;
    }

    if (socketRef.current) {
      socketRef.current.close(1000, "Manual disconnect");
      socketRef.current = null;
    }

    setIsConnected(false);
    setConnectionState('disconnected');
  };

  const sendMessage = (message: WebSocketMessage) => {
    if (socketRef.current?.readyState === WebSocket.OPEN) {
      try {
        socketRef.current.send(JSON.stringify(message));
        return true;
      } catch (error) {
        console.error("Failed to send WebSocket message:", error);
        toast({
          title: "Send Failed",
          description: "Failed to send message. Please try again.",
          variant: "destructive",
        });
        return false;
      }
    } else {
      toast({
        title: "Not Connected",
        description: "Real-time connection is not available. Trying to reconnect...",
        variant: "destructive",
      });
      
      // Attempt to reconnect
      if (connectionState !== 'connecting') {
        connect();
      }
      
      return false;
    }
  };

  // Auto-connect on mount
  useEffect(() => {
    connect();

    // Cleanup on unmount
    return () => {
      disconnect();
    };
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  // Handle page visibility changes
  useEffect(() => {
    const handleVisibilityChange = () => {
      if (document.visibilityState === 'visible' && !isConnected) {
        // Reconnect when page becomes visible and not connected
        connect();
      }
    };

    document.addEventListener('visibilitychange', handleVisibilityChange);
    return () => document.removeEventListener('visibilitychange', handleVisibilityChange);
  }, [isConnected]);

  // Handle online/offline events
  useEffect(() => {
    const handleOnline = () => {
      if (!isConnected) {
        connect();
      }
    };

    const handleOffline = () => {
      toast({
        title: "Connection Lost",
        description: "You are offline. Connection will resume when online.",
        variant: "destructive",
      });
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, [isConnected, toast]);

  return {
    isConnected,
    connectionState,
    connect,
    disconnect,
    sendMessage,
  };
}



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/hooks/use-toast.ts
================================================================================
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/hooks/use-mobile.tsx
================================================================================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/lib/bookingSchema.ts
================================================================================
// File: AstroOracle/client/src/lib/bookingSchema.ts
import { z } from "zod";

export const bookingSchema = z.object({
  // Step 1: Personal Info
  fullName: z.string().min(2, { message: "Full name is required" }),
  email: z.string().email({ message: "Invalid email address" }).optional().or(z.literal("")),
  countryCode: z.string().min(1, { message: "Country code is required" }),
  phoneNumber: z.string().min(5, { message: "Valid phone number is required" }),
  dateOfBirth: z.date().optional(),
  timeOfBirth: z.string().optional(),
  placeOfBirth: z.string().optional(),

  // Step 2: Consultation Type
  consultationType: z.string({ required_error: "Please select a consultation type" }),

  // Step 3: Plan/Topics
  plan: z.string().optional(),
  selectedTopics: z.array(z.string()).optional(),
  
  // Step 4: Schedule
  scheduledDate: z.date({ required_error: "Please select a date" }),
  scheduledTime: z.string({ required_error: "Please select a time" }),
  language: z.string().default("en"),
  notes: z.string().optional(),

  // Step 5: Payment & Confirmation
  paymentMethod: z.string({ required_error: "Please select a payment method" }),
  agreedToTerms: z.boolean().refine(val => val === true, {
    message: "You must agree to the terms and conditions",
  }),

  // Calculated fields (not part of the form UI directly, but good to have in the schema)
  duration: z.number().optional(),
  price: z.number().optional(),
});

export type BookingFormData = z.infer<typeof bookingSchema>;


================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/lib/jitsi.ts
================================================================================
// Jitsi Meet API integration for video consultations
export interface JitsiConfig {
  parentNode: HTMLElement;
  roomName: string;
  displayName: string;
  configOverwrite?: any;
  interfaceConfigOverwrite?: any;
  onApiReady?: (api: JitsiMeetInstance) => void;
}

export interface JitsiMeetInstance {
  executeCommand: (command: string, ...args: any[]) => void;
  addEventListener: (event: string, listener: (...args: any[]) => void) => void;
  removeEventListener: (event: string, listener: (...args: any[]) => void) => void;
  dispose: () => void;
  getNumberOfParticipants: () => number;
  isDeviceListAvailable: () => boolean;
  isDeviceChangeAvailable: (deviceType: string) => boolean;
  isMultipleAudioInputSupported: () => boolean;
  invite: (invitees: any[]) => void;
}

declare global {
  interface Window {
    JitsiMeetExternalAPI?: any;
  }
}

// Load Jitsi Meet External API script
const loadJitsiScript = (): Promise<void> => {
  return new Promise((resolve, reject) => {
    if (window.JitsiMeetExternalAPI) {
      resolve();
      return;
    }

    const script = document.createElement('script');
    script.src = 'https://meet.jit.si/external_api.js';
    script.async = true;
    
    script.onload = () => {
      if (window.JitsiMeetExternalAPI) {
        resolve();
      } else {
        reject(new Error('Jitsi Meet API not loaded'));
      }
    };
    
    script.onerror = () => {
      reject(new Error('Failed to load Jitsi Meet script'));
    };

    document.head.appendChild(script);
  });
};

export const initializeJitsi = async ({
  parentNode,
  roomName,
  displayName,
  configOverwrite = {},
  interfaceConfigOverwrite = {},
  onApiReady,
}: JitsiConfig): Promise<JitsiMeetInstance> => {
  await loadJitsiScript();

  const domain = 'meet.jit.si';
  
  const defaultConfig = {
    // Basic configuration
    startWithAudioMuted: false,
    startWithVideoMuted: false,
    enableWelcomePage: false,
    enableClosePage: false,
    prejoinPageEnabled: false,
    
    // Quality and performance
    resolution: 720,
    constraints: {
      video: {
        height: { ideal: 720, max: 1080 }
      }
    },
    
    // UI and branding
    defaultLanguage: 'en',
    disableModeratorIndicator: false,
    
    // Features
    enableNoiseCancellation: true,
    enableTalkWhileMuted: false,
    disableAP: false,
    disableAEC: false,
    disableNS: false,
    disableAGC: false,
    disableHPF: false,
    
    // Security
    enableInsecureRoomNameWarning: false,
    enableLobbyChat: false,
    
    // Recording and streaming
    fileRecordingsEnabled: false,
    liveStreamingEnabled: false,
    
    // Chat and interaction
    disablePrivateChat: false,
    startSilent: false,
    
    // Performance optimizations
    channelLastN: 2, // Only show last N participants
    enableLayerSuspension: true,
    
    ...configOverwrite
  };

  const defaultInterfaceConfig = {
    // Branding
    SHOW_JITSI_WATERMARK: false,
    SHOW_WATERMARK_FOR_GUESTS: false,
    SHOW_BRAND_WATERMARK: false,
    BRAND_WATERMARK_LINK: "",
    SHOW_POWERED_BY: false,
    APP_NAME: "Jai Guru Astro Remedy",
    NATIVE_APP_NAME: "Jai Guru Astro Remedy",
    PROVIDER_NAME: "Astrologer Arup Shastri",
    
    // Welcome page
    DISPLAY_WELCOME_PAGE_CONTENT: false,
    DISPLAY_WELCOME_PAGE_TOOLBAR_ADDITIONAL_CONTENT: false,
    
    // Notifications
    DISABLE_JOIN_LEAVE_NOTIFICATIONS: true,
    DISABLE_PRESENCE_STATUS: false,
    
    // Toolbar and UI
    TOOLBAR_BUTTONS: [
      'microphone', 'camera', 'closedcaptions', 'desktop', 
      'fullscreen', 'fodeviceselection', 'hangup', 'profile',
      'chat', 'recording', 'livestreaming', 'etherpad', 
      'sharedvideo', 'settings', 'raisehand', 'videoquality',
      'filmstrip', 'invite', 'feedback', 'stats', 'shortcuts',
      'tileview', 'videobackgroundblur', 'download', 'help'
    ],
    
    TOOLBAR_TIMEOUT: 4000,
    
    // Settings
    SETTINGS_SECTIONS: ['devices', 'language', 'moderator', 'profile', 'calendar'],
    
    // Mobile and browser optimization
    MOBILE_APP_PROMO: false,
    OPTIMAL_BROWSERS: ['chrome', 'chromium', 'firefox', 'nwjs', 'electron', 'safari'],
    UNSUPPORTED_BROWSERS: [],
    
    // Video layout
    VIDEO_LAYOUT_FIT: 'both',
    LOCAL_THUMBNAIL_RATIO: 16 / 9,
    REMOTE_THUMBNAIL_RATIO: 1,
    MAXIMUM_ZOOMING_COEFFICIENT: 1.3,
    
    // Features
    HIDE_INVITE_MORE_HEADER: true,
    RECENT_LIST_ENABLED: false,
    LANG_DETECTION: false,
    SHOW_CHROME_EXTENSION_BANNER: false,
    
    ...interfaceConfigOverwrite
  };

  const api = new window.JitsiMeetExternalAPI(domain, {
    roomName: roomName,
    width: '100%',
    height: '100%',
    parentNode: parentNode,
    configOverwrite: defaultConfig,
    interfaceConfigOverwrite: defaultInterfaceConfig,
    userInfo: {
      displayName: displayName,
    },
  });

  // Enhanced API wrapper with additional methods
  const enhancedApi: JitsiMeetInstance = {
    executeCommand: (command: string, ...args: any[]) => {
      try {
        api.executeCommand(command, ...args);
      } catch (error) {
        console.error(`Failed to execute command ${command}:`, error);
      }
    },

    addEventListener: (event: string, listener: (...args: any[]) => void) => {
      api.addEventListener(event, listener);
    },

    removeEventListener: (event: string, listener: (...args: any[]) => void) => {
      api.removeEventListener(event, listener);
    },

    dispose: () => {
      try {
        api.dispose();
      } catch (error) {
        console.error('Error disposing Jitsi API:', error);
      }
    },

    getNumberOfParticipants: () => {
      return api.getNumberOfParticipants();
    },

    isDeviceListAvailable: () => {
      return api.isDeviceListAvailable();
    },

    isDeviceChangeAvailable: (deviceType: string) => {
      return api.isDeviceChangeAvailable(deviceType);
    },

    isMultipleAudioInputSupported: () => {
      return api.isMultipleAudioInputSupported();
    },

    invite: (invitees: any[]) => {
      api.invite(invitees);
    },
  };

  // Wait for API to be ready
  return new Promise((resolve) => {
    api.addEventListener('videoConferenceJoined', () => {
      onApiReady?.(enhancedApi);
      resolve(enhancedApi);
    });
  });
};

// Utility functions for Jitsi integration
export const getOptimalVideoQuality = (): number => {
  // Determine optimal video quality based on device capabilities
  const connection = (navigator as any).connection || (navigator as any).mozConnection || (navigator as any).webkitConnection;
  
  if (connection) {
    switch (connection.effectiveType) {
      case 'slow-2g':
      case '2g':
        return 240;
      case '3g':
        return 360;
      case '4g':
      default:
        return 720;
    }
  }
  
  // Default to 720p if connection info is not available
  return 720;
};

export const checkBrowserCompatibility = (): { isSupported: boolean; issues: string[] } => {
  const issues: string[] = [];
  let isSupported = true;

  // Check for required APIs
  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
    issues.push('Camera and microphone access not supported');
    isSupported = false;
  }

  if (!window.RTCPeerConnection) {
    issues.push('WebRTC not supported');
    isSupported = false;
  }

  if (!window.WebSocket) {
    issues.push('WebSocket not supported');
    isSupported = false;
  }

  // Check browser version
  const userAgent = navigator.userAgent;
  const isChrome = /Chrome/.test(userAgent);
  const isFirefox = /Firefox/.test(userAgent);
  const isSafari = /Safari/.test(userAgent) && !/Chrome/.test(userAgent);
  const isEdge = /Edge/.test(userAgent);

  if (!isChrome && !isFirefox && !isSafari && !isEdge) {
    issues.push('Browser may not be fully supported');
  }

  return { isSupported, issues };
};

export const getDevicePermissions = async (): Promise<{ video: boolean; audio: boolean; errors: string[] }> => {
  const errors: string[] = [];
  let video = false;
  let audio = false;

  try {
    const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
    
    const videoTracks = stream.getVideoTracks();
    const audioTracks = stream.getAudioTracks();
    
    video = videoTracks.length > 0;
    audio = audioTracks.length > 0;
    
    // Clean up the stream
    stream.getTracks().forEach(track => track.stop());
    
  } catch (error: any) {
    if (error.name === 'NotAllowedError') {
      errors.push('Camera and microphone access denied by user');
    } else if (error.name === 'NotFoundError') {
      errors.push('Camera or microphone not found');
    } else if (error.name === 'NotReadableError') {
      errors.push('Camera or microphone is being used by another application');
    } else {
      errors.push(`Media access error: ${error.message}`);
    }
  }

  return { video, audio, errors };
};



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/lib/queryClient.ts
================================================================================
import { QueryClient, QueryFunction } from "@tanstack/react-query";

async function throwIfResNotOk(res: Response) {
  if (!res.ok) {
    const text = (await res.text()) || res.statusText;
    throw new Error(`${res.status}: ${text}`);
  }
}

export async function apiRequest(
  method: string,
  url: string,
  data?: unknown | undefined,
): Promise<Response> {
  const res = await fetch(url, {
    method,
    headers: data ? { "Content-Type": "application/json" } : {},
    body: data ? JSON.stringify(data) : undefined,
    credentials: "include",
  });

  await throwIfResNotOk(res);
  return res;
}

type UnauthorizedBehavior = "returnNull" | "throw";
export const getQueryFn: <T>(options: {
  on401: UnauthorizedBehavior;
}) => QueryFunction<T> =
  ({ on401: unauthorizedBehavior }) =>
  async ({ queryKey }) => {
    const res = await fetch(queryKey.join("/") as string, {
      credentials: "include",
    });

    if (unauthorizedBehavior === "returnNull" && res.status === 401) {
      return null;
    }

    await throwIfResNotOk(res);
    return await res.json();
  };

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      queryFn: getQueryFn({ on401: "throw" }),
      refetchInterval: false,
      refetchOnWindowFocus: false,
      staleTime: Infinity,
      retry: false,
    },
    mutations: {
      retry: false,
    },
  },
});



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/lib/utils.ts
================================================================================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/data/consultationData.ts
================================================================================
// File: AstroOracle/client/src/data/consultationData.ts
// This is the complete and final version.

import { Video, Phone, MessageSquare, MapPin, Home, Clock } from "lucide-react";

export const consultationTypes = [
  {
    type: "video",
    icon: Video,
    titleKey: "consultation.types.video.title",
    descriptionKey: "consultation.types.video.desc",
  },
  {
    type: "audio",
    icon: Phone,
    titleKey: "consultation.types.audio.title",
    descriptionKey: "consultation.types.audio.desc",
  },
  {
    type: "chat",
    icon: MessageSquare,
    titleKey: "consultation.types.chat.title",
    descriptionKey: "consultation.types.chat.desc",
  },
  {
    type: "in-person",
    icon: MapPin,
    titleKey: "consultation.types.inPerson.title",
    descriptionKey: "consultation.types.inPerson.desc",
    noteKey: "consultation.types.inPerson.note",
  },
  {
    type: "home-service",
    icon: Home,
    titleKey: "consultation.types.homeService.title",
    descriptionKey: "consultation.types.homeService.desc",
    noteKey: "consultation.types.homeService.note",
  },
  {
    type: "topic-based",
    icon: Clock,
    titleKey: "consultation.types.topicBased.title",
    descriptionKey: "consultation.types.topicBased.desc",
    noteKey: "consultation.types.topicBased.note",
  },
];

export const consultationPlans = {
  video: [
    { nameKey: "consultation.plans.quickGuidance.name", duration: 15, price: 299 },
    { nameKey: "consultation.plans.focusedAnalysis.name", duration: 30, price: 499 },
    { nameKey: "consultation.plans.inDepthAnalysis.name", duration: 45, price: 749 },
    { nameKey: "consultation.plans.comprehensiveAnalysis.name", duration: 60, price: 999 },
  ],
  audio: [
    { nameKey: "consultation.plans.quickGuidance.name", duration: 15, price: 299 },
    { nameKey: "consultation.plans.focusedAnalysis.name", duration: 30, price: 499 },
    { nameKey: "consultation.plans.inDepthAnalysis.name", duration: 45, price: 749 },
    { nameKey: "consultation.plans.comprehensiveAnalysis.name", duration: 60, price: 999 },
  ],
  chat: [
    { nameKey: "consultation.plans.quickGuidance.name", duration: 15, price: 299 },
    { nameKey: "consultation.plans.focusedAnalysis.name", duration: 30, price: 499 },
    { nameKey: "consultation.plans.inDepthAnalysis.name", duration: 45, price: 749 },
    { nameKey: "consultation.plans.comprehensiveAnalysis.name", duration: 60, price: 999 },
  ],
  "in-person": [
    { nameKey: "consultation.plans.focusedAnalysis.name", duration: 30, price: 499 },
    { nameKey: "consultation.plans.inDepthAnalysis.name", duration: 45, price: 749 },
    { nameKey: "consultation.plans.comprehensiveAnalysis.name", duration: 60, price: 999 },
  ],
  "home-service": [
    { nameKey: "consultation.plans.sacredHome.name", duration: 90, price: 2499 },
    { nameKey: "consultation.plans.completeHome.name", duration: 120, price: 3999 },
    { nameKey: "consultation.plans.homeBlessing.name", duration: 180, price: 6999 },
  ],
  "topic-based": [
    { nameKey: "consultation.plans.perTopic.name", duration: 6, price: 100, isPerTopic: true as const },
  ],
};

export const consultationTopics = [
    { value: "birth_chart", labelKey: "topics.birthChart.label", descriptionKey: "topics.birthChart.desc", icon: "🌟" },
    { value: "career", labelKey: "topics.career.label", descriptionKey: "topics.career.desc", icon: "💼" },
    { value: "business", labelKey: "topics.business.label", descriptionKey: "topics.business.desc", icon: "💰" },
    { value: "partnerships", labelKey: "topics.partnerships.label", descriptionKey: "topics.partnerships.desc", icon: "🤝" },
    { value: "education", labelKey: "topics.education.label", descriptionKey: "topics.education.desc", icon: "📚" },
    { value: "marriage", labelKey: "topics.marriage.label", descriptionKey: "topics.marriage.desc", icon: "💒" },
    { value: "marital_discord", labelKey: "topics.maritalDiscord.label", descriptionKey: "topics.maritalDiscord.desc", icon: "💔" },
    { value: "breakup", labelKey: "topics.breakup.label", descriptionKey: "topics.breakup.desc", icon: "💔" },
    { value: "dreams", labelKey: "topics.dreams.label", descriptionKey: "topics.dreams.desc", icon: "💭" },
    { value: "success", labelKey: "topics.success.label", descriptionKey: "topics.success.desc", icon: "🏆" },
    { value: "divorce", labelKey: "topics.divorce.label", descriptionKey: "topics.divorce.desc", icon: "⚖️" },
    { value: "love_affairs", labelKey: "topics.loveAffairs.label", descriptionKey: "topics.loveAffairs.desc", icon: "💕" },
    { value: "litigation", labelKey: "topics.litigation.label", descriptionKey: "topics.litigation.desc", icon: "⚖️" },
    { value: "offspring", labelKey: "topics.offspring.label", descriptionKey: "topics.offspring.desc", icon: "👶" },
    { value: "siblings", labelKey: "topics.siblings.label", descriptionKey: "topics.siblings.desc", icon: "👫" },
    { value: "property", labelKey: "topics.property.label", descriptionKey: "topics.property.desc", icon: "🏠" },
    { value: "vehicle", labelKey: "topics.vehicle.label", descriptionKey: "topics.vehicle.desc", icon: "🚗" },
    { value: "parents", labelKey: "topics.parents.label", descriptionKey: "topics.parents.desc", icon: "👥" },
    { value: "relatives", labelKey: "topics.relatives.label", descriptionKey: "topics.relatives.desc", icon: "👨‍👩‍👧‍👦" },
    { value: "bank_balance", labelKey: "topics.bankBalance.label", descriptionKey: "topics.bankBalance.desc", icon: "🏦" },
    { value: "friends", labelKey: "topics.friends.label", descriptionKey: "topics.friends.desc", icon: "👫" },
    { value: "enemies", labelKey: "topics.enemies.label", descriptionKey: "topics.enemies.desc", icon: "⚡" },
    { value: "health", labelKey: "topics.health.label", descriptionKey: "topics.health.desc", icon: "🌿" },
    { value: "fortune", labelKey: "topics.fortune.label", descriptionKey: "topics.fortune.desc", icon: "🍀" },
    { value: "accident", labelKey: "topics.accident.label", descriptionKey: "topics.accident.desc", icon: "⚠️" },
    { value: "small_tour", labelKey: "topics.smallTour.label", descriptionKey: "topics.smallTour.desc", icon: "🚗" },
    { value: "foreign_travel", labelKey: "topics.foreignTravel.label", descriptionKey: "topics.foreignTravel.desc", icon: "✈️" },
    { value: "share_market", labelKey: "topics.shareMarket.label", descriptionKey: "topics.shareMarket.desc", icon: "📈" },
    { value: "sudden_gain", labelKey: "topics.suddenGain.label", descriptionKey: "topics.suddenGain.desc", icon: "💎" },
    { value: "lottery", labelKey: "topics.lottery.label", descriptionKey: "topics.lottery.desc", icon: "🎰" },
];


================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/pages/admin/dashboard.tsx
================================================================================
import { useQuery } from "@tanstack/react-query";
import { useEffect } from "react";
import { useLocation, Link } from "wouter";
import { GlassCard } from "@/components/ui/glass-card";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { 
  Users, 
  BookOpen, 
  Package, 
  Calendar, 
  TrendingUp, 
  Clock,
  DollarSign,
  MessageCircle,
  HelpCircle,
  BarChart3,
  Activity,
  Star,
  Globe,
  Smartphone,
  Video,
  Headphones,
  UserCheck,
  AlertCircle,
  CheckCircle,
  Eye,
  Settings,
  Shield,
  Home
} from "lucide-react";


export default function AdminDashboard() {
  const [location, setLocation] = useLocation();

  // Mock data for testing (bypass API calls)
  const user = { fullName: "Admin User", isAdmin: true };
  const dashboardData = {
    stats: {
      totalUsers: 156,
      monthlyRevenue: 48500,
      totalConsultations: 89,
      homeTuitionApplications: 23,
      totalCourses: 12,
      totalOrders: 67,
      supportChats: 134,
      faqViews: 456
    },
    upcomingConsultations: []
  };
  const isLoading = false;

  // Temporarily bypass authentication for testing
  // useEffect(() => {
  //   if (!localStorage.getItem("token")) {
  //     setLocation("/login");
  //     return;
  //   }
    
  //   if (user && typeof user === 'object' && 'isAdmin' in user && !user.isAdmin) {
  //     setLocation("/");
  //     return;
  //   }
  // }, [user, setLocation]);

  // if (!user || typeof user !== 'object' || !('isAdmin' in user) || !user.isAdmin) {
  //   return (
  //     <div className="min-h-screen pt-16 flex items-center justify-center">
  //       <GlassCard className="p-8 text-center">
  //         <h1 className="text-2xl font-bold text-foreground mb-4">Access Denied</h1>
  //         <p className="text-muted-foreground">You need admin privileges to access this page.</p>
  //       </GlassCard>
  //     </div>
  //   );
  // }

  if (isLoading) {
    return (
      <div className="min-h-screen pt-16 flex items-center justify-center">
        <div className="animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full" />
      </div>
    );
  }

  const stats = (dashboardData as any)?.stats || {};
  const upcomingConsultations = (dashboardData as any)?.upcomingConsultations || [];

  // Enhanced stats with more business metrics
  const statCards = [
    {
      title: "Total Users",
      value: stats.totalUsers || 0,
      icon: Users,
      color: "text-blue-400",
      bgColor: "bg-blue-500/10",
      change: "+12%",
      trend: "up"
    },
    {
      title: "Monthly Revenue",
      value: `₹${(stats.monthlyRevenue || 0).toLocaleString()}`,
      icon: DollarSign,
      color: "text-green-400",
      bgColor: "bg-green-500/10",
      change: "+18%",
      trend: "up"
    },
    {
      title: "Consultations",
      value: stats.totalConsultations || 0,
      icon: Video,
      color: "text-purple-400",
      bgColor: "bg-purple-500/10",
      change: "+8%",
      trend: "up"
    },
    {
      title: "Home Tuition",
      value: stats.homeTuitionApplications || 0,
      icon: Home,
      color: "text-orange-400",
      bgColor: "bg-orange-500/10",
      change: "+15%",
      trend: "up"
    },
    {
      title: "Active Courses",
      value: stats.totalCourses || 0,
      icon: BookOpen,
      color: "text-yellow-400",
      bgColor: "bg-yellow-500/10",
      change: "+5%",
      trend: "up"
    },
    {
      title: "Products Sold",
      value: stats.totalOrders || 0,
      icon: Package,
      color: "text-pink-400",
      bgColor: "bg-pink-500/10",
      change: "+22%",
      trend: "up"
    },
    {
      title: "AI Chat Sessions",
      value: stats.supportChats || 0,
      icon: MessageCircle,
      color: "text-cyan-400",
      bgColor: "bg-cyan-500/10",
      change: "+25%",
      trend: "up"
    },
    {
      title: "FAQ Views",
      value: stats.faqViews || 0,
      icon: HelpCircle,
      color: "text-indigo-400",
      bgColor: "bg-indigo-500/10",
      change: "+8%",
      trend: "up"
    }
  ];

  // Quick action cards with enhanced functionality
  const quickActions = [
    {
      title: "Client Management",
      description: "View and manage user accounts",
      icon: Users,
      route: "/admin/clients",
      color: "from-blue-500 to-cyan-500"
    },
    {
      title: "Consultations",
      description: "Manage appointments & sessions",
      icon: Calendar,
      route: "/admin/consultations",
      color: "from-purple-500 to-pink-500"
    },
    {
      title: "Course Management",
      description: "Manage astrology courses",
      icon: BookOpen,
      route: "/admin/courses",
      color: "from-yellow-500 to-orange-500"
    },
    {
      title: "Home Tuition",
      description: "Manage home tuition applications",
      icon: Home,
      route: "/admin/home-tuition",
      color: "from-emerald-500 to-teal-500"
    },
    {
      title: "Product Catalog",
      description: "Manage remedies & products",
      icon: Package,
      route: "/admin/products",
      color: "from-green-500 to-emerald-500"
    },
    {
      title: "AI Support Chat",
      description: "Monitor chatbot performance",
      icon: MessageCircle,
      route: "/admin/support-chat",
      color: "from-cyan-500 to-blue-500"
    },
    {
      title: "FAQ Management",
      description: "Manage AI chatbot responses",
      icon: HelpCircle,
      route: "/admin/faqs",
      color: "from-indigo-500 to-purple-500"
    },
    {
      title: "Analytics",
      description: "Revenue & performance insights",
      icon: BarChart3,
      route: "/admin/analytics",
      color: "from-pink-500 to-rose-500"
    }
  ];

  // System status indicators
  const systemStatus = [
    { name: "Server Status", status: "online", color: "bg-green-500" },
    { name: "Payment Gateway", status: "active", color: "bg-green-500" },
    { name: "Video Conferencing", status: "operational", color: "bg-green-500" },
    { name: "SMS Service", status: "connected", color: "bg-green-500" },
    { name: "Email Service", status: "operational", color: "bg-green-500" },
    { name: "AI Chatbot", status: "active", color: "bg-green-500" }
  ];

  // Recent activity data (mock data for now)
  const recentActivities = [
    {
      type: "consultation",
      message: "New video consultation booked",
      user: "Priya Sharma",
      time: "2 minutes ago",
      icon: Video,
      color: "text-purple-400"
    },
    {
      type: "order",
      message: "Gemstone order placed",
      user: "Rajesh Kumar",
      time: "15 minutes ago",
      icon: Package,
      color: "text-green-400"
    },
    {
      type: "course",
      message: "Course enrollment completed",
      user: "Anita Verma",
      time: "1 hour ago",
      icon: BookOpen,
      color: "text-yellow-400"
    },
    {
      type: "support",
      message: "Support chat initiated",
      user: "Anonymous User",
      time: "2 hours ago",
      icon: MessageCircle,
      color: "text-cyan-400"
    }
  ];

  return (
    <div className="min-h-screen pt-16 pb-16" data-testid="admin-dashboard">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-4xl font-bold neon-text text-primary mb-2" data-testid="dashboard-title">
            Admin Dashboard
          </h1>
          <p className="text-muted-foreground">
            Welcome back, {user && typeof user === 'object' && 'fullName' in user ? (user as any).fullName : 'Admin'}. Here's what's happening with your astrology business.
          </p>
        </div>


        {/* Enhanced Stats Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          {statCards.map((stat, index) => (
            <GlassCard key={index} className="p-6 hover:scale-105 transition-all duration-300 group" data-testid={`stat-card-${index}`}>
              <div className="flex items-center justify-between mb-4">
                <div className={`w-14 h-14 rounded-xl ${stat.bgColor} flex items-center justify-center group-hover:scale-110 transition-transform duration-300`}>
                  <stat.icon className={`w-7 h-7 ${stat.color}`} />
                </div>
                <div className={`flex items-center space-x-1 text-sm ${
                  stat.trend === 'up' ? 'text-green-400' : 'text-red-400'
                }`}>
                  <TrendingUp className={`w-4 h-4 ${stat.trend === 'down' ? 'rotate-180' : ''}`} />
                  <span>{stat.change}</span>
                </div>
              </div>
              <div>
                <p className="text-sm text-muted-foreground mb-1">{stat.title}</p>
                <p className="text-2xl font-bold text-foreground group-hover:text-primary transition-colors" data-testid={`stat-value-${index}`}>
                  {stat.value}
                </p>
              </div>
            </GlassCard>
          ))}
        </div>

        {/* Admin Navigation Cards - Prominent Management Center */}
        <div className="mb-8">
          <h3 className="text-3xl font-bold neon-text text-primary mb-2">Admin Management Center</h3>
          <p className="text-muted-foreground mb-8">Quick access to all administrative functions</p>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {quickActions.slice(0, 4).map((action, index) => (
              <a key={index} href={action.route}>
                <GlassCard 
                  className="p-8 cursor-pointer hover:scale-105 transition-all duration-300 group border-2 hover:border-primary/50"
                  data-testid={`quick-action-${index}`}
                >
                    <div className={`w-20 h-20 rounded-xl bg-gradient-to-br ${action.color} flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300 shadow-lg`}>
                      <action.icon className="w-10 h-10 text-white" />
                    </div>
                    <h4 className="font-bold text-lg text-foreground mb-3 group-hover:text-primary transition-colors">
                      {action.title}
                    </h4>
                    <p className="text-sm text-muted-foreground leading-relaxed">
                      {action.description}
                    </p>
                  </GlassCard>
              </a>
            ))}
          </div>
          
          {/* Additional Admin Tools */}
          <div className="mt-8">
            <h4 className="text-xl font-bold text-foreground mb-4">Additional Tools</h4>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {quickActions.slice(4).map((action, index) => (
                <a key={index + 4} href={action.route}>
                  <GlassCard 
                    className="p-6 cursor-pointer hover:scale-105 transition-all duration-300 group"
                    data-testid={`additional-action-${index}`}
                  >
                      <div className={`w-16 h-16 rounded-xl bg-gradient-to-br ${action.color} flex items-center justify-center mb-4 group-hover:scale-110 transition-transform duration-300`}>
                        <action.icon className="w-8 h-8 text-white" />
                      </div>
                      <h4 className="font-bold text-foreground mb-2 group-hover:text-primary transition-colors">
                        {action.title}
                      </h4>
                      <p className="text-sm text-muted-foreground">
                        {action.description}
                      </p>
                    </GlassCard>
                </a>
              ))}
            </div>
          </div>
        </div>

        {/* System Health & Performance */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          <GlassCard className="p-6">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-xl font-bold text-foreground">System Health</h3>
              <Shield className="w-6 h-6 text-green-400" />
            </div>
            <div className="space-y-4">
              {systemStatus.map((status, index) => (
                <div key={index} className="flex items-center justify-between">
                  <span className="text-muted-foreground">{status.name}</span>
                  <div className="flex items-center space-x-2">
                    <div className={`w-3 h-3 rounded-full ${status.color}`} />
                    <Badge variant="outline" className="text-xs">
                      {status.status}
                    </Badge>
                  </div>
                </div>
              ))}
            </div>
          </GlassCard>

          <GlassCard className="p-6">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-xl font-bold text-foreground">Recent Activity</h3>
              <Activity className="w-6 h-6 text-primary" />
            </div>
            <div className="space-y-4">
              {recentActivities.map((activity, index) => (
                <div key={index} className="flex items-center space-x-3">
                  <div className={`w-8 h-8 rounded-full bg-background flex items-center justify-center`}>
                    <activity.icon className={`w-4 h-4 ${activity.color}`} />
                  </div>
                  <div className="flex-1">
                    <p className="text-sm font-medium text-foreground">{activity.message}</p>
                    <p className="text-xs text-muted-foreground">{activity.user} • {activity.time}</p>
                  </div>
                </div>
              ))}
            </div>
          </GlassCard>
        </div>

        {/* Upcoming Consultations */}
        <GlassCard className="p-6">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-xl font-bold text-foreground">Upcoming Consultations</h3>
            <Clock className="w-5 h-5 text-primary" />
          </div>
          
          {upcomingConsultations.length === 0 ? (
            <div className="text-center py-8">
              <Calendar className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
              <p className="text-muted-foreground">No upcoming consultations scheduled</p>
            </div>
          ) : (
            <div className="space-y-4">
              {upcomingConsultations.map((consultation: any, index: number) => (
                <div
                  key={consultation.id}
                  className="glass p-4 rounded-lg"
                  data-testid={`upcoming-consultation-${index}`}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <div className={`w-3 h-3 rounded-full ${
                        consultation.type === 'video' ? 'bg-primary' :
                        consultation.type === 'audio' ? 'bg-secondary' :
                        consultation.type === 'chat' ? 'bg-accent' :
                        'bg-yellow-500'
                      }`} />
                      <div>
                        <p className="font-semibold text-foreground">
                          {consultation.type} consultation - {consultation.plan}
                        </p>
                        <p className="text-sm text-muted-foreground">
                          {new Date(consultation.scheduledAt).toLocaleString()}
                        </p>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className="font-semibold text-primary">₹{consultation.price}</p>
                      <Badge variant={
                        consultation.status === 'scheduled' ? 'default' :
                        consultation.status === 'ongoing' ? 'secondary' :
                        'outline'
                      }>
                        {consultation.status}
                      </Badge>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </GlassCard>
      </div>
    </div>
  );
}



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/pages/admin/clients.tsx
================================================================================
import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { useLocation } from "wouter";
import { GlassCard } from "@/components/ui/glass-card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Search, UserPlus, Mail, Phone, Calendar, MapPin, ArrowLeft } from "lucide-react";


export default function AdminClients() {
  const [, setLocation] = useLocation();
  const [searchTerm, setSearchTerm] = useState("");

  // Mock data for testing (bypass authentication)
  const user = { isAdmin: true };
  const users = [
    { id: "1", fullName: "Ravi Kumar", email: "ravi@email.com", phoneNumber: "+91-9876543210", createdAt: "2024-01-15T10:00:00Z", isAdmin: false, consultationsCount: 5, totalSpent: 12500 },
    { id: "2", fullName: "Priya Sharma", email: "priya@email.com", phoneNumber: "+91-9876543211", createdAt: "2024-01-20T11:00:00Z", isAdmin: false, consultationsCount: 3, totalSpent: 7500 }
  ];
  const isLoading = false;

  // Bypass authentication for testing
  // if (!user?.isAdmin) {
  //   setLocation("/");
  //   return null;
  // }

  if (isLoading) {
    return (
      <div className="min-h-screen pt-16 flex items-center justify-center">
        <div className="animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full" />
      </div>
    );
  }

  const filteredUsers = users?.filter((user: any) => 
    !user.isAdmin && (
      user.fullName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.phoneNumber?.includes(searchTerm)
    )
  ) || [];

  return (
    <div className="min-h-screen pt-16 pb-16" data-testid="admin-clients">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8">
          <div className="flex items-center space-x-4">
            <Button
              variant="outline"
              onClick={() => setLocation("/admin")}
              className="glass flex items-center space-x-2"
              data-testid="back-to-admin"
            >
              <ArrowLeft className="w-4 h-4" />
              <span>Back to Dashboard</span>
            </Button>
            <div>
              <h1 className="text-4xl font-bold neon-text text-primary mb-2">
                Client Management
              </h1>
              <p className="text-muted-foreground">
                Manage your astrology clients and their information
              </p>
            </div>
          </div>
          <Button className="neon-button mt-4 sm:mt-0" data-testid="add-client-button">
            <UserPlus className="w-4 h-4 mr-2" />
            Add New Client
          </Button>
        </div>

        {/* Search and Filters */}
        <GlassCard className="p-6 mb-8">
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
              <Input
                placeholder={"Search clients by name, email, or phone..."}
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 form-input"
                data-testid="search-clients"
              />
            </div>
            <div className="flex gap-2">
              <Button variant="outline" size="sm" className="glass">
                All Clients ({filteredUsers.length})
              </Button>
              <Button variant="outline" size="sm" className="glass">
                Verified
              </Button>
              <Button variant="outline" size="sm" className="glass">
                Unverified
              </Button>
            </div>
          </div>
        </GlassCard>

        {/* Clients Table */}
        <GlassCard className="p-6">
          {filteredUsers.length === 0 ? (
            <div className="text-center py-12">
              <UserPlus className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-foreground mb-2">No Clients Found</h3>
              <p className="text-muted-foreground">
                {searchTerm ? "Try adjusting your search criteria" : "Start by adding your first client"}
              </p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow className="border-primary/20">
                    <TableHead className="text-foreground">Client Info</TableHead>
                    <TableHead className="text-foreground">Contact</TableHead>
                    <TableHead className="text-foreground">Birth Details</TableHead>
                    <TableHead className="text-foreground">Status</TableHead>
                    <TableHead className="text-foreground">Joined</TableHead>
                    <TableHead className="text-foreground">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredUsers.map((client: any, index: number) => (
                    <TableRow key={client.id} className="border-primary/10" data-testid={`client-row-${index}`}>
                      <TableCell>
                        <div className="flex items-center space-x-3">
                          <div className="w-10 h-10 rounded-full bg-primary/20 flex items-center justify-center">
                            <span className="text-primary font-semibold">
                              {client.fullName?.charAt(0) || 'U'}
                            </span>
                          </div>
                          <div>
                            <p className="font-semibold text-foreground" data-testid={`client-name-${index}`}>
                              {client.fullName || 'Unknown'}
                            </p>
                            <p className="text-sm text-muted-foreground">
                              @{client.username}
                            </p>
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="space-y-1">
                          {client.email && (
                            <div className="flex items-center text-sm text-muted-foreground">
                              <Mail className="w-3 h-3 mr-1" />
                              {client.email}
                            </div>
                          )}
                          <div className="flex items-center text-sm text-muted-foreground">
                            <Phone className="w-3 h-3 mr-1" />
                            {client.countryCode} {client.phoneNumber}
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="space-y-1">
                          {client.dateOfBirth && (
                            <div className="flex items-center text-sm text-muted-foreground">
                              <Calendar className="w-3 h-3 mr-1" />
                              {new Date(client.dateOfBirth).toLocaleDateString()}
                            </div>
                          )}
                          {client.placeOfBirth && (
                            <div className="flex items-center text-sm text-muted-foreground">
                              <MapPin className="w-3 h-3 mr-1" />
                              {client.placeOfBirth}
                            </div>
                          )}
                          {client.timeOfBirth && (
                            <div className="text-sm text-muted-foreground">
                              Time: {client.timeOfBirth}
                            </div>
                          )}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex flex-col space-y-1">
                          <Badge variant={client.isVerified ? "default" : "secondary"}>
                            {client.isVerified ? "Verified" : "Unverified"}
                          </Badge>
                          <span className="text-xs text-muted-foreground">
                            {client.preferredLanguage?.toUpperCase() || 'EN'}
                          </span>
                        </div>
                      </TableCell>
                      <TableCell>
                        <span className="text-sm text-muted-foreground">
                          {new Date(client.createdAt).toLocaleDateString()}
                        </span>
                      </TableCell>
                      <TableCell>
                        <div className="flex space-x-2">
                          <Button size="sm" variant="outline" className="glass text-xs">
                            View
                          </Button>
                          <Button size="sm" variant="outline" className="glass text-xs">
                            Edit
                          </Button>
                          <Button size="sm" variant="outline" className="glass text-xs">
                            History
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </GlassCard>

        {/* Client Statistics */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mt-8">
          <GlassCard className="p-6 text-center">
            <div className="text-2xl font-bold text-black bg-white/90 px-2 py-1 rounded-md inline-block mb-2">
              {filteredUsers.filter((u: any) => u.isVerified).length}
            </div>
            <div className="text-sm text-muted-foreground">Verified Clients</div>
          </GlassCard>
          <GlassCard className="p-6 text-center">
            <div className="text-2xl font-bold text-black bg-white/90 px-2 py-1 rounded-md inline-block mb-2">
              {filteredUsers.filter((u: any) => u.dateOfBirth).length}
            </div>
            <div className="text-sm text-muted-foreground">Complete Profiles</div>
          </GlassCard>
          <GlassCard className="p-6 text-center">
            <div className="text-2xl font-bold text-black bg-white/90 px-2 py-1 rounded-md inline-block mb-2">
              {filteredUsers.filter((u: any) => 
                new Date(u.createdAt) > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)
              ).length}
            </div>
            <div className="text-sm text-muted-foreground">New This Month</div>
          </GlassCard>
          <GlassCard className="p-6 text-center">
            <div className="text-2xl font-bold text-foreground bg-white/90 px-2 py-1 rounded-md inline-block mb-2">
              {new Set(filteredUsers.map((u: any) => u.preferredLanguage)).size}
            </div>
            <div className="text-sm text-muted-foreground">Languages</div>
          </GlassCard>
        </div>
      </div>
    </div>
  );
}



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/pages/admin/consultations.tsx
================================================================================
import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useLocation } from "wouter";
import { GlassCard } from "@/components/ui/glass-card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { 
  Calendar, 
  Clock, 
  Video, 
  Phone, 
  MessageSquare, 
  MapPin, 
  Home,
  Filter,
  Search,
  Eye,
  CheckCircle,
  XCircle,
  PlayCircle,
  DollarSign,
  Users,
  TrendingUp,
  Star,
  AlertCircle,
  ArrowLeft
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";


export default function AdminConsultations() {
  const [, setLocation] = useLocation();
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");
  const [typeFilter, setTypeFilter] = useState("all");
  const [selectedConsultation, setSelectedConsultation] = useState<any>(null);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Mock data for testing (bypass authentication)
  const user = { isAdmin: true };
  const consultations = [
    { id: "1", clientName: "Ravi Kumar", type: "video", status: "completed", scheduledAt: "2024-01-15T14:00:00Z", duration: 60, amount: 2500, rating: 5 },
    { id: "2", clientName: "Priya Sharma", type: "audio", status: "scheduled", scheduledAt: "2024-01-22T16:00:00Z", duration: 30, amount: 1800, rating: null }
  ];
  const isLoading = false;

  const updateConsultationMutation = useMutation({
    mutationFn: async ({ id, status }: { id: string; status: string }) => {
      return apiRequest("PUT", `/api/consultations/${id}`, { status });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/admin/consultations"] });
      toast({
        title: "Updated",
        description: "Consultation status updated successfully",
      });
    },
  });

  // Bypass authentication for testing
  // if (!user?.isAdmin) {
  //   setLocation("/");
  //   return null;
  // }

  if (isLoading) {
    return (
      <div className="min-h-screen pt-16 flex items-center justify-center">
        <div className="animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full" />
      </div>
    );
  }

  const getTypeIcon = (type: string) => {
    switch (type) {
      case "video": return Video;
      case "audio": return Phone;
      case "chat": return MessageSquare;
      case "in-person": return MapPin;
      case "home-service": return Home;
      default: return Clock;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "scheduled": return "bg-blue-500/20 text-blue-500";
      case "ongoing": return "bg-green-500/20 text-green-500";
      case "completed": return "bg-purple-500/20 text-purple-500";
      case "cancelled": return "bg-red-500/20 text-red-500";
      case "no-show": return "bg-orange-500/20 text-orange-500";
      default: return "bg-gray-500/20 text-gray-500";
    }
  };

  const filteredConsultations = consultations?.filter((consultation: any) => {
    const matchesSearch = consultation.clientName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         consultation.topics?.some((topic: string) => topic.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesStatus = statusFilter === "all" || consultation.status === statusFilter;
    const matchesType = typeFilter === "all" || consultation.type === typeFilter;
    return matchesSearch && matchesStatus && matchesType;
  }) || [];

  const stats = {
    total: consultations?.length || 0,
    today: consultations?.filter((c: any) => 
      new Date(c.scheduledAt).toDateString() === new Date().toDateString()
    ).length || 0,
    pending: consultations?.filter((c: any) => c.status === "scheduled").length || 0,
    completed: consultations?.filter((c: any) => c.status === "completed").length || 0,
    revenue: consultations?.filter((c: any) => c.status === "completed")
      .reduce((sum: number, c: any) => sum + parseFloat(c.price), 0) || 0
  };

  return (
    <div className="min-h-screen pt-16 pb-16" data-testid="admin-consultations">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center space-x-4 mb-4">
            <Button
              variant="outline"
              onClick={() => setLocation("/admin")}
              className="glass flex items-center space-x-2"
              data-testid="back-to-admin"
            >
              <ArrowLeft className="w-4 h-4" />
              <span>Back to Dashboard</span>
            </Button>
          </div>
          <h1 className="text-4xl font-bold neon-text text-primary mb-2">
            Consultation Management
          </h1>
          <p className="text-muted-foreground">
            Monitor and manage all consultation bookings and sessions
          </p>
        </div>

        {/* Statistics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-5 gap-6 mb-8">
          <GlassCard className="p-6 text-center">
            <div className="w-12 h-12 bg-blue-500/20 rounded-full flex items-center justify-center mx-auto mb-3">
              <Calendar className="w-6 h-6 text-blue-400" />
            </div>
            <div className="text-2xl font-bold text-primary mb-1">{stats.total}</div>
            <div className="text-sm text-muted-foreground">Total Bookings</div>
          </GlassCard>
          
          <GlassCard className="p-6 text-center">
            <div className="w-12 h-12 bg-green-500/20 rounded-full flex items-center justify-center mx-auto mb-3">
              <Clock className="w-6 h-6 text-green-400" />
            </div>
            <div className="text-2xl font-bold text-green-400 mb-1">{stats.today}</div>
            <div className="text-sm text-muted-foreground">Today's Sessions</div>
          </GlassCard>

          <GlassCard className="p-6 text-center">
            <div className="w-12 h-12 bg-yellow-500/20 rounded-full flex items-center justify-center mx-auto mb-3">
              <AlertCircle className="w-6 h-6 text-yellow-400" />
            </div>
            <div className="text-2xl font-bold text-yellow-400 mb-1">{stats.pending}</div>
            <div className="text-sm text-muted-foreground">Pending</div>
          </GlassCard>

          <GlassCard className="p-6 text-center">
            <div className="w-12 h-12 bg-purple-500/20 rounded-full flex items-center justify-center mx-auto mb-3">
              <CheckCircle className="w-6 h-6 text-purple-400" />
            </div>
            <div className="text-2xl font-bold text-purple-400 mb-1">{stats.completed}</div>
            <div className="text-sm text-muted-foreground">Completed</div>
          </GlassCard>

          <GlassCard className="p-6 text-center">
            <div className="w-12 h-12 bg-pink-500/20 rounded-full flex items-center justify-center mx-auto mb-3">
              <DollarSign className="w-6 h-6 text-pink-400" />
            </div>
            <div className="text-2xl font-bold text-pink-400 mb-1">₹{stats.revenue.toLocaleString()}</div>
            <div className="text-sm text-muted-foreground">Revenue</div>
          </GlassCard>
        </div>

        {/* Filters */}
        <GlassCard className="p-6 mb-8">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
              <Input
                placeholder={"Search consultations by client name or topics..."}
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 form-input"
              />
            </div>
            
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger className="w-full md:w-48 form-input">
                <SelectValue placeholder={"Filter by status"} />
              </SelectTrigger>
              <SelectContent className="glass-card">
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="scheduled">Scheduled</SelectItem>
                <SelectItem value="ongoing">Ongoing</SelectItem>
                <SelectItem value="completed">Completed</SelectItem>
                <SelectItem value="cancelled">Cancelled</SelectItem>
                <SelectItem value="no-show">No Show</SelectItem>
              </SelectContent>
            </Select>

            <Select value={typeFilter} onValueChange={setTypeFilter}>
              <SelectTrigger className="w-full md:w-48 form-input">
                <SelectValue placeholder={"Filter by type"} />
              </SelectTrigger>
              <SelectContent className="glass-card">
                <SelectItem value="all">All Types</SelectItem>
                <SelectItem value="video">Video Call</SelectItem>
                <SelectItem value="audio">Audio Call</SelectItem>
                <SelectItem value="chat">Chat Session</SelectItem>
                <SelectItem value="in-person">In-Person</SelectItem>
                <SelectItem value="home-service">Home Service</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </GlassCard>

        {/* Consultations Table */}
        <GlassCard className="p-6">
          {filteredConsultations.length === 0 ? (
            <div className="text-center py-12">
              <Calendar className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-foreground mb-2">No Consultations Found</h3>
              <p className="text-muted-foreground">
                {searchTerm ? "Try adjusting your search criteria" : "No consultations scheduled yet"}
              </p>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow className="border-primary/20">
                    <TableHead className="text-foreground">Client & Session</TableHead>
                    <TableHead className="text-foreground">Type & Topics</TableHead>
                    <TableHead className="text-foreground">Schedule</TableHead>
                    <TableHead className="text-foreground">Duration & Price</TableHead>
                    <TableHead className="text-foreground">Status</TableHead>
                    <TableHead className="text-foreground">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredConsultations.map((consultation: any, index: number) => {
                    const IconComponent = getTypeIcon(consultation.type);
                    return (
                      <TableRow key={consultation.id} className="border-primary/10">
                        <TableCell>
                          <div className="flex items-center space-x-3">
                            <div className="w-10 h-10 rounded-full bg-primary/20 flex items-center justify-center">
                              <span className="text-primary font-semibold">
                                {consultation.clientName?.charAt(0) || 'U'}
                              </span>
                            </div>
                            <div>
                              <p className="font-semibold text-foreground">
                                {consultation.clientName || 'Unknown Client'}
                              </p>
                              <p className="text-sm text-muted-foreground">
                                {consultation.plan}
                              </p>
                            </div>
                          </div>
                        </TableCell>

                        <TableCell>
                          <div className="space-y-2">
                            <div className="flex items-center space-x-2">
                              <IconComponent className="w-4 h-4 text-primary" />
                              <span className="text-sm font-medium text-foreground capitalize">
                                {consultation.type.replace('-', ' ')}
                              </span>
                            </div>
                            <div className="flex flex-wrap gap-1">
                              {consultation.topics?.slice(0, 2).map((topic: string, i: number) => (
                                <Badge key={i} variant="outline" className="text-xs">
                                  {topic}
                                </Badge>
                              ))}
                              {consultation.topics?.length > 2 && (
                                <Badge variant="outline" className="text-xs">
                                  +{consultation.topics.length - 2} more
                                </Badge>
                              )}
                            </div>
                          </div>
                        </TableCell>

                        <TableCell>
                          <div className="space-y-1">
                            <div className="flex items-center space-x-2">
                              <Calendar className="w-3 h-3 text-muted-foreground" />
                              <span className="text-sm text-foreground">
                                {new Date(consultation.scheduledAt).toLocaleDateString()}
                              </span>
                            </div>
                            <div className="flex items-center space-x-2">
                              <Clock className="w-3 h-3 text-muted-foreground" />
                              <span className="text-sm text-muted-foreground">
                                {new Date(consultation.scheduledAt).toLocaleTimeString()}
                              </span>
                            </div>
                          </div>
                        </TableCell>

                        <TableCell>
                          <div className="space-y-1">
                            <div className="text-sm text-foreground">
                              {consultation.duration} minutes
                            </div>
                            <div className="text-sm font-semibold text-primary">
                              ₹{consultation.price}
                            </div>
                          </div>
                        </TableCell>

                        <TableCell>
                          <Badge className={getStatusColor(consultation.status)}>
                            {consultation.status}
                          </Badge>
                        </TableCell>

                        <TableCell>
                          <div className="flex space-x-2">
                            <Dialog>
                              <DialogTrigger asChild>
                                <Button 
                                  size="sm" 
                                  variant="outline" 
                                  className="glass"
                                  onClick={() => setSelectedConsultation(consultation)}
                                >
                                  <Eye className="w-3 h-3" />
                                </Button>
                              </DialogTrigger>
                              <DialogContent className="glass-card max-w-2xl">
                                <DialogHeader>
                                  <DialogTitle className="text-primary">Consultation Details</DialogTitle>
                                </DialogHeader>
                                {selectedConsultation && (
                                  <div className="space-y-4">
                                    <div className="grid grid-cols-2 gap-4">
                                      <div>
                                        <label className="text-sm font-medium text-muted-foreground">Client</label>
                                        <p className="text-foreground">{selectedConsultation.clientName}</p>
                                      </div>
                                      <div>
                                        <label className="text-sm font-medium text-muted-foreground">Type</label>
                                        <p className="text-foreground capitalize">{selectedConsultation.type}</p>
                                      </div>
                                      <div>
                                        <label className="text-sm font-medium text-muted-foreground">Date & Time</label>
                                        <p className="text-foreground">
                                          {new Date(selectedConsultation.scheduledAt).toLocaleString()}
                                        </p>
                                      </div>
                                      <div>
                                        <label className="text-sm font-medium text-muted-foreground">Status</label>
                                        <Badge className={getStatusColor(selectedConsultation.status)}>
                                          {selectedConsultation.status}
                                        </Badge>
                                      </div>
                                    </div>
                                    <div>
                                      <label className="text-sm font-medium text-muted-foreground">Topics</label>
                                      <div className="flex flex-wrap gap-1 mt-1">
                                        {selectedConsultation.topics?.map((topic: string, i: number) => (
                                          <Badge key={i} variant="outline">{topic}</Badge>
                                        ))}
                                      </div>
                                    </div>
                                    {selectedConsultation.notes && (
                                      <div>
                                        <label className="text-sm font-medium text-muted-foreground">Notes</label>
                                        <p className="text-foreground mt-1">{selectedConsultation.notes}</p>
                                      </div>
                                    )}
                                  </div>
                                )}
                              </DialogContent>
                            </Dialog>

                            {consultation.status === "scheduled" && (
                              <>
                                <Button
                                  size="sm"
                                  variant="outline"
                                  className="glass text-green-500"
                                  onClick={() => updateConsultationMutation.mutate({
                                    id: consultation.id,
                                    status: "ongoing"
                                  })}
                                >
                                  <PlayCircle className="w-3 h-3" />
                                </Button>
                                <Button
                                  size="sm"
                                  variant="outline"
                                  className="glass text-red-500"
                                  onClick={() => updateConsultationMutation.mutate({
                                    id: consultation.id,
                                    status: "cancelled"
                                  })}
                                >
                                  <XCircle className="w-3 h-3" />
                                </Button>
                              </>
                            )}

                            {consultation.status === "ongoing" && (
                              <Button
                                size="sm"
                                variant="outline"
                                className="glass text-purple-500"
                                onClick={() => updateConsultationMutation.mutate({
                                  id: consultation.id,
                                  status: "completed"
                                })}
                              >
                                <CheckCircle className="w-3 h-3" />
                              </Button>
                            )}
                          </div>
                        </TableCell>
                      </TableRow>
                    );
                  })}
                </TableBody>
              </Table>
            </div>
          )}
        </GlassCard>
      </div>
    </div>
  );
}


================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/pages/admin/courses.tsx
================================================================================
import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useLocation } from "wouter";
import { GlassCard } from "@/components/ui/glass-card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { BookOpen, Plus, Users, Calendar, Edit, Trash2, Eye, ArrowLeft } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";


export default function AdminCourses() {
  const [, setLocation] = useLocation();
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [newCourse, setNewCourse] = useState({
    title: "",
    description: "",
    price: "",
    maxStudents: "100",
    level: "beginner",
    teachingLanguage: "en",
    modules: [],
  });
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Mock data for testing (bypass authentication)
  const user = { isAdmin: true };
  const courses = [
    { id: "1", title: "Vedic Astrology Basics", description: "Learn fundamental concepts of Vedic astrology", price: 4999, level: "beginner", enrolledStudents: 45, maxStudents: 100 },
    { id: "2", title: "Advanced Birth Chart Analysis", description: "Master advanced chart reading techniques", price: 7999, level: "advanced", enrolledStudents: 23, maxStudents: 50 }
  ];
  const isLoading = false;

  const createCourseMutation = useMutation({
    mutationFn: async (courseData: any) => {
      return apiRequest("POST", "/api/courses", courseData);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/courses"] });
      setIsCreateDialogOpen(false);
      setNewCourse({
        title: "",
        description: "",
        price: "",
        maxStudents: "100",
        level: "beginner",
        teachingLanguage: "en",
        modules: [],
      });
      toast({
        title: "Course Created",
        description: "New course has been created successfully!",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Error",
        description: error.message || "Failed to create course",
        variant: "destructive",
      });
    },
  });

  // Bypass authentication for testing
  // if (!user?.isAdmin) {
  //   setLocation("/");
  //   return null;
  // }

  if (isLoading) {
    return (
      <div className="min-h-screen pt-16 flex items-center justify-center">
        <div className="animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full" />
      </div>
    );
  }

  const handleCreateCourse = () => {
    if (!newCourse.title || !newCourse.description || !newCourse.price) {
      toast({
        title: "Error",
        description: "Please fill in all required fields",
        variant: "destructive",
      });
      return;
    }

    createCourseMutation.mutate({
      ...newCourse,
      price: parseFloat(newCourse.price),
      maxStudents: parseInt(newCourse.maxStudents),
    });
  };

  const levelColors = {
    beginner: "bg-green-500/20 text-green-500",
    intermediate: "bg-yellow-500/20 text-yellow-500",
    expert: "bg-red-500/20 text-red-500",
  };

  return (
    <div className="min-h-screen pt-16 pb-16" data-testid="admin-courses">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8">
          <div className="flex items-center space-x-4">
            <Button
              variant="outline"
              onClick={() => setLocation("/admin")}
              className="glass flex items-center space-x-2"
              data-testid="back-to-admin"
            >
              <ArrowLeft className="w-4 h-4" />
              <span>Back to Dashboard</span>
            </Button>
            <div>
              <h1 className="text-4xl font-bold neon-text text-primary mb-2">
                Course Management
              </h1>
              <p className="text-muted-foreground">
                Create and manage your astrology courses
              </p>
            </div>
          </div>
          
          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
            <DialogTrigger asChild>
              <Button className="neon-button mt-4 sm:mt-0" data-testid="create-course-button">
                <Plus className="w-4 h-4 mr-2" />
                Create Course
              </Button>
            </DialogTrigger>
            <DialogContent className="glass-card max-w-2xl">
              <DialogHeader>
                <DialogTitle className="text-primary">Create New Course</DialogTitle>
              </DialogHeader>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-foreground mb-2">
                    Course Title *
                  </label>
                  <Input
                    value={newCourse.title}
                    onChange={(e) => setNewCourse({ ...newCourse, title: e.target.value })}
                    placeholder="e.g., Astrology Fundamentals"
                    className="form-input"
                    data-testid="course-title-input"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-foreground mb-2">
                    Description *
                  </label>
                  <Textarea
                    value={newCourse.description}
                    onChange={(e) => setNewCourse({ ...newCourse, description: e.target.value })}
                    placeholder={"Describe what students will learn..."}
                    className="form-input min-h-[100px]"
                    data-testid="course-description-input"
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Price (₹) *
                    </label>
                    <Input
                      type="number"
                      value={newCourse.price}
                      onChange={(e) => setNewCourse({ ...newCourse, price: e.target.value })}
                      placeholder="15999"
                      className="form-input"
                      data-testid="course-price-input"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Max Students
                    </label>
                    <Input
                      type="number"
                      value={newCourse.maxStudents}
                      onChange={(e) => setNewCourse({ ...newCourse, maxStudents: e.target.value })}
                      placeholder="100"
                      className="form-input"
                      data-testid="course-max-students-input"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Level
                    </label>
                    <Select
                      value={newCourse.level}
                      onValueChange={(value) => setNewCourse({ ...newCourse, level: value })}
                    >
                      <SelectTrigger className="form-input">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="glass-card">
                        <SelectItem value="beginner">Beginner</SelectItem>
                        <SelectItem value="intermediate">Intermediate</SelectItem>
                        <SelectItem value="expert">Expert</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Teaching Language
                    </label>
                    <Select
                      value={newCourse.teachingLanguage}
                      onValueChange={(value) => setNewCourse({ ...newCourse, teachingLanguage: value })}
                    >
                      <SelectTrigger className="form-input">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="glass-card">
                        <SelectItem value="en">English</SelectItem>
                        <SelectItem value="hi">Hindi</SelectItem>
                        <SelectItem value="bn">Bengali</SelectItem>
                        <SelectItem value="es">Spanish</SelectItem>
                        <SelectItem value="fr">French</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="flex justify-end space-x-4 pt-4">
                  <Button
                    variant="outline"
                    onClick={() => setIsCreateDialogOpen(false)}
                    className="glass"
                  >
                    Cancel
                  </Button>
                  <Button
                    onClick={handleCreateCourse}
                    disabled={createCourseMutation.isPending}
                    className="neon-button"
                    data-testid="submit-course-button"
                  >
                    {createCourseMutation.isPending ? "Creating..." : "Create Course"}
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>

        {/* Course Statistics */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <GlassCard className="p-6 text-center">
            <div className="text-2xl font-bold text-primary mb-2">
              {courses?.length || 0}
            </div>
            <div className="text-sm text-muted-foreground">Total Courses</div>
          </GlassCard>
          <GlassCard className="p-6 text-center">
            <div className="text-2xl font-bold text-secondary mb-2">
              {courses?.filter((c: any) => c.isActive).length || 0}
            </div>
            <div className="text-sm text-muted-foreground">Active Courses</div>
          </GlassCard>
          <GlassCard className="p-6 text-center">
            <div className="text-2xl font-bold text-accent mb-2">
              {courses?.reduce((total: number, course: any) => total + (course.currentStudents || 0), 0) || 0}
            </div>
            <div className="text-sm text-muted-foreground">Total Students</div>
          </GlassCard>
          <GlassCard className="p-6 text-center">
            <div className="text-2xl font-bold text-yellow-500 mb-2">
              ₹{courses?.reduce((total: number, course: any) => total + (parseFloat(course.price) * (course.currentStudents || 0)), 0).toLocaleString() || 0}
            </div>
            <div className="text-sm text-muted-foreground">Total Revenue</div>
          </GlassCard>
        </div>

        {/* Courses Table */}
        <GlassCard className="p-6">
          {!courses || courses.length === 0 ? (
            <div className="text-center py-12">
              <BookOpen className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-foreground mb-2">No Courses Yet</h3>
              <p className="text-muted-foreground mb-6">
                Create your first astrology course to start teaching students
              </p>
              <Button onClick={() => setIsCreateDialogOpen(true)} className="neon-button">
                <Plus className="w-4 h-4 mr-2" />
                Create First Course
              </Button>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow className="border-primary/20">
                    <TableHead className="text-foreground">Course</TableHead>
                    <TableHead className="text-foreground">Level</TableHead>
                    <TableHead className="text-foreground">Students</TableHead>
                    <TableHead className="text-foreground">Price</TableHead>
                    <TableHead className="text-foreground">Language</TableHead>
                    <TableHead className="text-foreground">Status</TableHead>
                    <TableHead className="text-foreground">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {courses.map((course: any, index: number) => (
                    <TableRow key={course.id} className="border-primary/10" data-testid={`course-row-${index}`}>
                      <TableCell>
                        <div>
                          <p className="font-semibold text-foreground" data-testid={`course-title-${index}`}>
                            {course.title}
                          </p>
                          <p className="text-sm text-muted-foreground line-clamp-2">
                            {course.description}
                          </p>
                        </div>
                      </TableCell>
                      <TableCell>
                        <Badge className={levelColors[course.level as keyof typeof levelColors]}>
                          {course.level}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center space-x-2">
                          <Users className="w-4 h-4 text-muted-foreground" />
                          <span className="text-foreground">
                            {course.currentStudents}/{course.maxStudents}
                          </span>
                        </div>
                      </TableCell>
                      <TableCell>
                        <span className="font-semibold text-primary">
                          ₹{parseFloat(course.price).toLocaleString()}
                        </span>
                      </TableCell>
                      <TableCell>
                        <span className="text-sm text-muted-foreground uppercase">
                          {course.teachingLanguage}
                        </span>
                      </TableCell>
                      <TableCell>
                        <Badge variant={course.isActive ? "default" : "secondary"}>
                          {course.isActive ? "Active" : "Inactive"}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <div className="flex space-x-2">
                          <Button size="sm" variant="outline" className="glass">
                            <Eye className="w-3 h-3" />
                          </Button>
                          <Button size="sm" variant="outline" className="glass">
                            <Edit className="w-3 h-3" />
                          </Button>
                          <Button size="sm" variant="outline" className="glass text-red-400">
                            <Trash2 className="w-3 h-3" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </GlassCard>
      </div>
    </div>
  );
}



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/pages/admin/products.tsx
================================================================================
import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useLocation } from "wouter";
import { GlassCard } from "@/components/ui/glass-card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Package, Plus, Edit, Trash2, Eye, Star, ArrowLeft } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";


export default function AdminProducts() {
  const [, setLocation] = useLocation();
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState("all");
  const [newProduct, setNewProduct] = useState({
    name: "",
    description: "",
    category: "gemstones",
    price: "",
    currency: "INR",
    stock: "10",
    specifications: {},
  });
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Mock data for testing (bypass authentication)
  const user = { isAdmin: true };
  const products = [
    { id: "1", name: "Blue Sapphire", description: "Powerful gemstone for Saturn benefits", category: "gemstones", price: 15000, stock: 5, rating: 4.8, isActive: true },
    { id: "2", name: "Rudraksha Mala", description: "108 bead authentic rudraksha mala", category: "malas", price: 2500, stock: 12, rating: 4.9, isActive: true }
  ];
  const isLoading = false;

  const createProductMutation = useMutation({
    mutationFn: async (productData: any) => {
      return apiRequest("POST", "/api/products", productData);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/products"] });
      setIsCreateDialogOpen(false);
      setNewProduct({
        name: "",
        description: "",
        category: "gemstones",
        price: "",
        currency: "INR",
        stock: "10",
        specifications: {},
      });
      toast({
        title: "Product Created",
        description: "New product has been added successfully!",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Error",
        description: error.message || "Failed to create product",
        variant: "destructive",
      });
    },
  });

  // Bypass authentication for testing
  // if (!user?.isAdmin) {
  //   setLocation("/");
  //   return null;
  // }

  if (isLoading) {
    return (
      <div className="min-h-screen pt-16 flex items-center justify-center">
        <div className="animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full" />
      </div>
    );
  }

  const handleCreateProduct = () => {
    if (!newProduct.name || !newProduct.description || !newProduct.price) {
      toast({
        title: "Error",
        description: "Please fill in all required fields",
        variant: "destructive",
      });
      return;
    }

    createProductMutation.mutate({
      ...newProduct,
      price: parseFloat(newProduct.price),
      stock: parseInt(newProduct.stock),
    });
  };

  const categories = [
    { value: "all", label: "All Categories" },
    { value: "gemstones", label: "Gemstones" },
    { value: "yantras", label: "Yantras" },
    { value: "malas", label: "Malas" },
    { value: "books", label: "Books" },
    { value: "kits", label: "Remedy Kits" },
  ];

  const categoryColors = {
    gemstones: "bg-purple-500/20 text-purple-500",
    yantras: "bg-yellow-500/20 text-yellow-500",
    malas: "bg-green-500/20 text-green-500",
    books: "bg-blue-500/20 text-blue-500",
    kits: "bg-red-500/20 text-red-500",
    jewelry: "bg-pink-500/20 text-pink-500",
  };

  const filteredProducts = selectedCategory === "all" 
    ? products 
    : products?.filter((product: any) => product.category === selectedCategory);

  return (
    <div className="min-h-screen pt-16 pb-16" data-testid="admin-products">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-8">
          <div className="flex items-center space-x-4">
            <Button
              variant="outline"
              onClick={() => setLocation("/admin")}
              className="glass flex items-center space-x-2"
              data-testid="back-to-admin"
            >
              <ArrowLeft className="w-4 h-4" />
              <span>Back to Dashboard</span>
            </Button>
            <div>
              <h1 className="text-4xl font-bold neon-text text-primary mb-2">
                Product Management
              </h1>
              <p className="text-muted-foreground">
                Manage your astrological products and remedies
              </p>
            </div>
          </div>
          
          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
            <DialogTrigger asChild>
              <Button className="neon-button mt-4 sm:mt-0" data-testid="create-product-button">
                <Plus className="w-4 h-4 mr-2" />
                Add Product
              </Button>
            </DialogTrigger>
            <DialogContent className="glass-card max-w-2xl">
              <DialogHeader>
                <DialogTitle className="text-primary">Add New Product</DialogTitle>
              </DialogHeader>
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-foreground mb-2">
                    Product Name *
                  </label>
                  <Input
                    value={newProduct.name}
                    onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })}
                    placeholder="e.g., Ruby Gemstone"
                    className="form-input"
                    data-testid="product-name-input"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-foreground mb-2">
                    Description *
                  </label>
                  <Textarea
                    value={newProduct.description}
                    onChange={(e) => setNewProduct({ ...newProduct, description: e.target.value })}
                    placeholder={"Describe the product and its benefits..."}
                    className="form-input min-h-[100px]"
                    data-testid="product-description-input"
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Category *
                    </label>
                    <Select
                      value={newProduct.category}
                      onValueChange={(value) => setNewProduct({ ...newProduct, category: value })}
                    >
                      <SelectTrigger className="form-input">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="glass-card">
                        <SelectItem value="gemstones">Gemstones</SelectItem>
                        <SelectItem value="yantras">Yantras</SelectItem>
                        <SelectItem value="malas">Malas</SelectItem>
                        <SelectItem value="books">Books</SelectItem>
                        <SelectItem value="kits">Remedy Kits</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Stock Quantity
                    </label>
                    <Input
                      type="number"
                      value={newProduct.stock}
                      onChange={(e) => setNewProduct({ ...newProduct, stock: e.target.value })}
                      placeholder="10"
                      className="form-input"
                      data-testid="product-stock-input"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Price *
                    </label>
                    <Input
                      type="number"
                      value={newProduct.price}
                      onChange={(e) => setNewProduct({ ...newProduct, price: e.target.value })}
                      placeholder="2500"
                      className="form-input"
                      data-testid="product-price-input"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-foreground mb-2">
                      Currency
                    </label>
                    <Select
                      value={newProduct.currency}
                      onValueChange={(value) => setNewProduct({ ...newProduct, currency: value })}
                    >
                      <SelectTrigger className="form-input">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="glass-card">
                        <SelectItem value="INR">INR (₹)</SelectItem>
                        <SelectItem value="USD">USD ($)</SelectItem>
                        <SelectItem value="EUR">EUR (€)</SelectItem>
                        <SelectItem value="GBP">GBP (£)</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="flex justify-end space-x-4 pt-4">
                  <Button
                    variant="outline"
                    onClick={() => setIsCreateDialogOpen(false)}
                    className="glass"
                  >
                    Cancel
                  </Button>
                  <Button
                    onClick={handleCreateProduct}
                    disabled={createProductMutation.isPending}
                    className="neon-button"
                    data-testid="submit-product-button"
                  >
                    {createProductMutation.isPending ? "Adding..." : "Add Product"}
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>

        {/* Category Filter */}
        <GlassCard className="p-6 mb-8">
          <div className="flex flex-wrap gap-2">
            {categories.map((category) => (
              <Button
                key={category.value}
                variant={selectedCategory === category.value ? "default" : "outline"}
                size="sm"
                onClick={() => setSelectedCategory(category.value)}
                className={selectedCategory === category.value ? "neon-button" : "glass"}
                data-testid={`category-${category.value}`}
              >
                {category.label}
                {category.value !== "all" && (
                  <span className="ml-2 px-2 py-1 text-xs rounded-full bg-primary/20">
                    {products?.filter((p: any) => p.category === category.value).length || 0}
                  </span>
                )}
              </Button>
            ))}
          </div>
        </GlassCard>

        {/* Product Statistics */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <GlassCard className="p-6 text-center">
            <div className="text-2xl font-bold text-primary mb-2">
              {products?.length || 0}
            </div>
            <div className="text-sm text-muted-foreground">Total Products</div>
          </GlassCard>
          <GlassCard className="p-6 text-center">
            <div className="text-2xl font-bold text-secondary mb-2">
              {products?.filter((p: any) => p.isActive).length || 0}
            </div>
            <div className="text-sm text-muted-foreground">Active Products</div>
          </GlassCard>
          <GlassCard className="p-6 text-center">
            <div className="text-2xl font-bold text-secondary mb-2">
              {products?.reduce((total: number, product: any) => total + (product.stock || 0), 0) || 0}
            </div>
            <div className="text-sm text-muted-foreground">Total Stock</div>
          </GlassCard>
          <GlassCard className="p-6 text-center">
            <div className="text-2xl font-bold text-yellow-500 mb-2">
              {new Set(products?.map((p: any) => p.category)).size || 0}
            </div>
            <div className="text-sm text-muted-foreground">Categories</div>
          </GlassCard>
        </div>

        {/* Products Table */}
        <GlassCard className="p-6">
          {!filteredProducts || filteredProducts.length === 0 ? (
            <div className="text-center py-12">
              <Package className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-foreground mb-2">
                {selectedCategory === "all" ? "No Products Yet" : `No ${selectedCategory} Products`}
              </h3>
              <p className="text-muted-foreground mb-6">
                Add your first astrological product to start selling
              </p>
              <Button onClick={() => setIsCreateDialogOpen(true)} className="neon-button">
                <Plus className="w-4 h-4 mr-2" />
                Add Product
              </Button>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow className="border-primary/20">
                    <TableHead className="text-foreground">Product</TableHead>
                    <TableHead className="text-foreground">Category</TableHead>
                    <TableHead className="text-foreground">Price</TableHead>
                    <TableHead className="text-foreground">Stock</TableHead>
                    <TableHead className="text-foreground">Status</TableHead>
                    <TableHead className="text-foreground">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredProducts.map((product: any, index: number) => (
                    <TableRow key={product.id} className="border-primary/10" data-testid={`product-row-${index}`}>
                      <TableCell>
                        <div className="flex items-center space-x-3">
                          <div className="w-12 h-12 rounded-lg bg-muted flex items-center justify-center">
                            <Package className="w-6 h-6 text-muted-foreground" />
                          </div>
                          <div>
                            <p className="font-semibold text-foreground" data-testid={`product-name-${index}`}>
                              {product.name}
                            </p>
                            <p className="text-sm text-muted-foreground line-clamp-1">
                              {product.description}
                            </p>
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <Badge className={categoryColors[product.category as keyof typeof categoryColors]}>
                          {product.category}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <span className="font-semibold text-primary">
                          {product.currency === "INR" ? "₹" : "$"}{parseFloat(product.price).toLocaleString()}
                        </span>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center space-x-2">
                          <span className={`text-sm ${product.stock > 5 ? 'text-green-500' : product.stock > 0 ? 'text-yellow-500' : 'text-red-500'}`}>
                            {product.stock} units
                          </span>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center space-x-2">
                          <Badge variant={product.isActive ? "default" : "secondary"}>
                            {product.isActive ? "Active" : "Inactive"}
                          </Badge>
                          {!product.isActive && (
                            <span className="text-xs text-muted-foreground italic">
                              (Not available for purchase)
                            </span>
                          )}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex space-x-2">
                          <Button size="sm" variant="outline" className="glass">
                            <Eye className="w-3 h-3" />
                          </Button>
                          <Button size="sm" variant="outline" className="glass">
                            <Edit className="w-3 h-3" />
                          </Button>
                          <Button size="sm" variant="outline" className="glass text-red-400">
                            <Trash2 className="w-3 h-3" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </GlassCard>
      </div>
    </div>
  );
}



================================================================================
FILE: /workspaces/astro-remedy/AstroOracle/client/src/pages/admin/faqs.tsx
================================================================================
import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { Plus, Edit, Trash2, Search, Eye, ThumbsUp, ArrowLeft } from "lucide-react";
import type { Faq } from "@shared/schema";


export default function AdminFAQs() {
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [editingFaq, setEditingFaq] = useState<Faq | null>(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedCategory, setSelectedCategory] = useState<string>("all");
  const { toast } = useToast();

  // Get all FAQs
  const { data: faqs = [], isLoading } = useQuery<Faq[]>({
    queryKey: ["/api/faqs"],
  });

  // Filter FAQs based on search and category
  const filteredFaqs = faqs.filter((faq) => {
    const matchesSearch = faq.question.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         faq.answer.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = selectedCategory === "all" || faq.category === selectedCategory;
    return matchesSearch && matchesCategory;
  });

  // Get unique categories
  const categories = Array.from(new Set(faqs.map(faq => faq.category)));

  // Create FAQ mutation
  const createFaqMutation = useMutation({
    mutationFn: async (faqData: any) => {
      return apiRequest("POST", "/api/faqs", faqData);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/faqs"] });
      setIsCreateDialogOpen(false);
      toast({ title: "FAQ created successfully" });
    },
    onError: () => {
      toast({ title: "Failed to create FAQ", variant: "destructive" });
    },
  });

  // Update FAQ mutation
  const updateFaqMutation = useMutation({
    mutationFn: async ({ id, ...faqData }: any) => {
      return apiRequest("PUT", `/api/faqs/${id}`, faqData);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/faqs"] });
      setIsEditDialogOpen(false);
      setEditingFaq(null);
      toast({ title: "FAQ updated successfully" });
    },
    onError: () => {
      toast({ title: "Failed to update FAQ", variant: "destructive" });
    },
  });

  // Delete FAQ mutation
  const deleteFaqMutation = useMutation({
    mutationFn: async (id: string) => {
      return apiRequest("DELETE", `/api/faqs/${id}`);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/faqs"] });
      toast({ title: "FAQ deleted successfully" });
    },
    onError: () => {
      toast({ title: "Failed to delete FAQ", variant: "destructive" });
    },
  });

  const handleCreateFaq = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    const formData = new FormData(event.currentTarget);
    const keywords = formData.get("keywords") as string;
    
    const faqData = {
      question: formData.get("question"),
      answer: formData.get("answer"),
      category: formData.get("category"),
      keywords: keywords ? keywords.split(",").map(k => k.trim()) : [],
      priority: parseInt(formData.get("priority") as string) || 5,
      isActive: true,
    };

    createFaqMutation.mutate(faqData);
  };

  const handleUpdateFaq = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    if (!editingFaq) return;

    const formData = new FormData(event.currentTarget);
    const keywords = formData.get("keywords") as string;
    
    const faqData = {
      id: editingFaq.id,
      question: formData.get("question"),
      answer: formData.get("answer"),
      category: formData.get("category"),
      keywords: keywords ? keywords.split(",").map(k => k.trim()) : [],
      priority: parseInt(formData.get("priority") as string) || 5,
      isActive: formData.get("isActive") === "true",
    };

    updateFaqMutation.mutate(faqData);
  };

  const handleEdit = (faq: Faq) => {
    setEditingFaq(faq);
    setIsEditDialogOpen(true);
  };

  const handleDelete = (id: string) => {
    if (confirm("Are you sure you want to delete this FAQ?")) {
      deleteFaqMutation.mutate(id);
    }
  };

  const getCategoryColor = (category: string) => {
    const colors = {
      consultation: "bg-blue-500/20 text-blue-400",
      courses: "bg-green-500/20 text-green-400",
      products: "bg-purple-500/20 text-purple-400",
      billing: "bg-yellow-500/20 text-yellow-400",
      technical: "bg-red-500/20 text-red-400",
      general: "bg-gray-500/20 text-gray-400",
    };
    return colors[category as keyof typeof colors] || "bg-gray-500/20 text-gray-400";
  };

  if (isLoading) {
    return (
      <div className="min-h-screen pt-16 pb-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="animate-pulse space-y-4">
            <div className="h-8 bg-white/10 rounded w-1/4"></div>
            <div className="h-64 bg-white/10 rounded"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen pt-16 pb-16">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center space-x-4">
            <Button
              variant="outline"
              onClick={() => window.location.href = "/admin"}
              className="glass flex items-center space-x-2"
              data-testid="back-to-admin"
            >
              <ArrowLeft className="w-4 h-4" />
              <span>Back to Dashboard</span>
            </Button>
            <div>
              <h1 className="text-4xl font-bold neon-text text-primary mb-2">
                FAQ Management
              </h1>
              <p className="text-muted-foreground">Manage frequently asked questions and AI responses</p>
            </div>
          </div>

        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button 
              className="bg-gradient-to-r from-pink-500 to-purple-600 hover:from-pink-600 hover:to-purple-700 text-white shadow-lg hover:shadow-pink-500/25"
              data-testid="button-create-faq"
            >
              <Plus className="w-4 h-4 mr-2" />
              Create FAQ
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>Create New FAQ</DialogTitle>
              <DialogDescription>
                Add a new frequently asked question to help users get instant answers.
              </DialogDescription>
            </DialogHeader>

            <form onSubmit={handleCreateFaq} className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">Question</label>
                <Input 
                  name="question" 
                  placeholder="Enter the question..."
                  required 
                  data-testid="input-question"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">Answer</label>
                <Textarea 
                  name="answer" 
                  placeholder="Enter the detailed answer..."
                  rows={4}
                  required 
                  data-testid="textarea-answer"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium mb-2">Category</label>
                  <Select name="category" defaultValue="general">
                    <SelectTrigger data-testid="select-category">
                      <SelectValue placeholder={"Select category"} />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="general">General</SelectItem>
                      <SelectItem value="consultation">Consultation</SelectItem>
                      <SelectItem value="courses">Courses</SelectItem>
                      <SelectItem value="products">Products</SelectItem>
                      <SelectItem value="billing">Billing</SelectItem>
                      <SelectItem value="technical">Technical</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">Priority</label>
                  <Input 
                    name="priority" 
                    type="number" 
                    defaultValue={5}
                    min={1}
                    max={10}
                    data-testid="input-priority"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">Keywords (comma-separated)</label>
                <Input 
                  name="keywords" 
                  placeholder="booking, appointment, schedule"
                  data-testid="input-keywords"
                />
              </div>

              <div className="flex justify-end space-x-2 pt-4">
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => setIsCreateDialogOpen(false)}
                  data-testid="button-cancel"
                >
                  Cancel
                </Button>
                <Button 
                  type="submit" 
                  disabled={createFaqMutation.isPending}
                  data-testid="button-submit"
                >
                  {createFaqMutation.isPending ? "Creating..." : "Create FAQ"}
                </Button>
              </div>
            </form>
          </DialogContent>
        </Dialog>
        </div>

      {/* Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="bg-white/5 border-white/10">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-gray-400">Total FAQs</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-white">{faqs.length}</div>
          </CardContent>
        </Card>

        <Card className="bg-white/5 border-white/10">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-gray-400">Active FAQs</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-400">
              {faqs.filter(faq => faq.isActive).length}
            </div>
          </CardContent>
        </Card>

        <Card className="bg-white/5 border-white/10">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-gray-400">Categories</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-400">{categories.length}</div>
          </CardContent>
        </Card>

        <Card className="bg-white/5 border-white/10">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-gray-400">Total Views</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-purple-400">
              {faqs.reduce((sum, faq) => sum + (faq.viewCount || 0), 0)}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      <Card className="bg-white/5 border-white/10">
        <CardContent className="p-4">
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <Input
                placeholder="Search FAQs..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
                data-testid="input-search"
              />
            </div>

            <Select value={selectedCategory} onValueChange={setSelectedCategory}>
              <SelectTrigger className="w-full sm:w-48" data-testid="select-filter-category">
                <SelectValue placeholder={"Filter by category"} />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Categories</SelectItem>
                {categories.map(category => (
                  <SelectItem key={category} value={category}>
                    {category.charAt(0).toUpperCase() + category.slice(1)}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      {/* FAQ Table */}
      <Card className="bg-white/5 border-white/10">
        <CardContent className="p-0">
          <Table>
            <TableHeader>
              <TableRow className="border-white/10">
                <TableHead>Question</TableHead>
                <TableHead>Category</TableHead>
                <TableHead>Priority</TableHead>
                <TableHead>Stats</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredFaqs.map((faq) => (
                <TableRow key={faq.id} className="border-white/10">
                  <TableCell className="max-w-md">
                    <div>
                      <div className="font-medium text-white truncate">{faq.question}</div>
                      <div className="text-sm text-gray-400 truncate mt-1">
                        {faq.answer.substring(0, 100)}...
                      </div>
                    </div>
                  </TableCell>
                  <TableCell>
                    <Badge className={getCategoryColor(faq.category)}>
                      {faq.category}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <span className="text-white font-medium">{faq.priority}</span>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center space-x-4 text-sm text-gray-400">
                      <div className="flex items-center">
                        <Eye className="w-3 h-3 mr-1" />
                        {faq.viewCount}
                      </div>
                      <div className="flex items-center">
                        <ThumbsUp className="w-3 h-3 mr-1" />
                        {faq.helpfulCount}
                      </div>
                    </div>
                  </TableCell>
                  <TableCell>
                    <Badge variant={faq.isActive ? "default" : "secondary"}>
                      {faq.isActive ? "Active" : "Inactive"}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center space-x-2">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleEdit(faq)}
                        data-testid={`button-edit-${faq.id}`}
                      >
                        <Edit className="w-4 h-4" />
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleDelete(faq.id)}
                        className="text-red-400 hover:text-red-300"
                        data-testid={`button-delete-${faq.id}`}
                      >
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>

          {filteredFaqs.length === 0 && (
            <div className="text-center py-8 text-gray-400">
              {searchTerm || selectedCategory !== "all" 
                ? "No FAQs match your filters" 
                : "No FAQs found. Create your first FAQ to get started."
              }
            </div>
          )}
        </CardContent>
      </Card>

      {/* Edit Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Edit FAQ</DialogTitle>
            <DialogDescription>
              Update the FAQ details.
            </DialogDescription>
          </DialogHeader>

          {editingFaq && (
            <form onSubmit={handleUpdateFaq} className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">Question</label>
                <Input 
                  name="question" 
                  defaultValue={editingFaq.question}
                  required 
                  data-testid="input-edit-question"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">Answer</label>
                <Textarea 
                  name="answer" 
                  defaultValue={editingFaq.answer}
                  rows={4}
                  required 
                  data-testid="textarea-edit-answer"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium mb-2">Category</label>
                  <Select name="category" defaultValue={editingFaq.category}>
                    <SelectTrigger data-testid="select-edit-category">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="general">General</SelectItem>
                      <SelectItem value="consultation">Consultation</SelectItem>
                      <SelectItem value="courses">Courses</SelectItem>
                      <SelectItem value="products">Products</SelectItem>
                      <SelectItem value="billing">Billing</SelectItem>
                      <SelectItem value="technical">Technical</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <label className="block text-sm font-medium mb-2">Priority</label>
                  <Input 
                    name="priority" 
                    type="number" 
                    defaultValue={editingFaq.priority || 5}
                    min={1}
                    max={10}
                    data-testid="input-edit-priority"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">Keywords (comma-separated)</label>
                <Input 
                  name="keywords" 
                  defaultValue={editingFaq.keywords?.join(", ") || ""}
                  data-testid="input-edit-keywords"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">Status</label>
                <Select name="isActive" defaultValue={editingFaq.isActive?.toString() || "true"}>
                  <SelectTrigger data-testid="select-edit-status">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="true">Active</SelectItem>
                    <SelectItem value="false">Inactive</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="flex justify-end space-x-2 pt-4">
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => {
                    setIsEditDialogOpen(false);
                    setEditingFaq(null);
                  }}
                  data-testid="button-edit-cancel"
                >
                  Cancel
                </Button>
                <Button 
                  type="submit" 
                  disabled={updateFaqMutation.isPending}
                  data-testid="button-edit-submit"
                >
                  {updateFaqMutation.isPending ? "Updating..." : "Update FAQ"}
                </Button>
              </div>
            </form>
          )}
        </DialogContent>
      </Dialog>
      </div>
    </div>
  );
}


